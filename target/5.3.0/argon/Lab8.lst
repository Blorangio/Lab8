
/Users/admin/Documents/CTD_2023/Labs/Lab8/target/5.3.0/argon/Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000074c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb4e0  000bb4e0  0000b4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000078  2003e540  000bb504  0000e540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000238  2003e5b8  2003e5b8  0001e5b8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bb57c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bb580  000bb580  0001b580  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bb586  000bb586  0001b586  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bb5aa  000bb5aa  0001b5aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00171d14  00000000  00000000  0001b5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000197a8  00000000  00000000  0018d2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004cb96  00000000  00000000  001a6a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003790  00000000  00000000  001f3600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c578  00000000  00000000  001f6d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00046056  00000000  00000000  00203308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005a915  00000000  00000000  0024935e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014abf0  00000000  00000000  002a3c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000aa14  00000000  00000000  003ee864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <strcmp>:
   b4948:	f810 2b01 	ldrb.w	r2, [r0], #1
   b494c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4950:	2a01      	cmp	r2, #1
   b4952:	bf28      	it	cs
   b4954:	429a      	cmpcs	r2, r3
   b4956:	d0f7      	beq.n	b4948 <strcmp>
   b4958:	1ad0      	subs	r0, r2, r3
   b495a:	4770      	bx	lr

000b495c <strlen>:
   b495c:	4603      	mov	r3, r0
   b495e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4962:	2a00      	cmp	r2, #0
   b4964:	d1fb      	bne.n	b495e <strlen+0x2>
   b4966:	1a18      	subs	r0, r3, r0
   b4968:	3801      	subs	r0, #1
   b496a:	4770      	bx	lr

000b496c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b496c:	4809      	ldr	r0, [pc, #36]	; (b4994 <module_user_pre_init+0x28>)
   b496e:	490a      	ldr	r1, [pc, #40]	; (b4998 <module_user_pre_init+0x2c>)
   b4970:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4972:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4974:	d005      	beq.n	b4982 <module_user_pre_init+0x16>
   b4976:	4a09      	ldr	r2, [pc, #36]	; (b499c <module_user_pre_init+0x30>)
   b4978:	4282      	cmp	r2, r0
   b497a:	d002      	beq.n	b4982 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b497c:	1a12      	subs	r2, r2, r0
   b497e:	f005 f9d3 	bl	b9d28 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4982:	4807      	ldr	r0, [pc, #28]	; (b49a0 <module_user_pre_init+0x34>)
   b4984:	4a07      	ldr	r2, [pc, #28]	; (b49a4 <module_user_pre_init+0x38>)
   b4986:	2100      	movs	r1, #0
   b4988:	1a12      	subs	r2, r2, r0
   b498a:	f005 f9db 	bl	b9d44 <memset>
    return &link_global_data_start;
}
   b498e:	4801      	ldr	r0, [pc, #4]	; (b4994 <module_user_pre_init+0x28>)
   b4990:	bd08      	pop	{r3, pc}
   b4992:	bf00      	nop
   b4994:	2003e540 	.word	0x2003e540
   b4998:	000bb504 	.word	0x000bb504
   b499c:	2003e5b8 	.word	0x2003e5b8
   b49a0:	2003e5b8 	.word	0x2003e5b8
   b49a4:	2003e7f0 	.word	0x2003e7f0

000b49a8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49a8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49aa:	4e07      	ldr	r6, [pc, #28]	; (b49c8 <module_user_init+0x20>)
   b49ac:	4c07      	ldr	r4, [pc, #28]	; (b49cc <module_user_init+0x24>)
    module_user_init_hook();
   b49ae:	f003 fea3 	bl	b86f8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49b2:	1ba4      	subs	r4, r4, r6
   b49b4:	08a4      	lsrs	r4, r4, #2
   b49b6:	2500      	movs	r5, #0
   b49b8:	42ac      	cmp	r4, r5
   b49ba:	d100      	bne.n	b49be <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49bc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49be:	f856 3b04 	ldr.w	r3, [r6], #4
   b49c2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49c4:	3501      	adds	r5, #1
   b49c6:	e7f7      	b.n	b49b8 <module_user_init+0x10>
   b49c8:	000bb4bc 	.word	0x000bb4bc
   b49cc:	000bb4e0 	.word	0x000bb4e0

000b49d0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b49d0:	f000 beec 	b.w	b57ac <setup>

000b49d4 <module_user_loop>:
}

void module_user_loop() {
   b49d4:	b508      	push	{r3, lr}
    loop();
   b49d6:	f000 fe17 	bl	b5608 <loop>
    _post_loop();
}
   b49da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b49de:	f003 be43 	b.w	b8668 <_post_loop>

000b49e2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b49e2:	f002 bd41 	b.w	b7468 <malloc>

000b49e6 <_Znaj>:
   b49e6:	f002 bd3f 	b.w	b7468 <malloc>

000b49ea <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b49ea:	f002 bd45 	b.w	b7478 <free>
	...

000b49f0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b49f0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b49f2:	4a03      	ldr	r2, [pc, #12]	; (b4a00 <__cxa_pure_virtual+0x10>)
   b49f4:	4903      	ldr	r1, [pc, #12]	; (b4a04 <__cxa_pure_virtual+0x14>)
   b49f6:	200c      	movs	r0, #12
   b49f8:	f002 fc8a 	bl	b7310 <panic_>
  while (1);
   b49fc:	e7fe      	b.n	b49fc <__cxa_pure_virtual+0xc>
   b49fe:	bf00      	nop
   b4a00:	000b6f61 	.word	0x000b6f61
   b4a04:	000b9fd0 	.word	0x000b9fd0

000b4a08 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a08:	7800      	ldrb	r0, [r0, #0]
   b4a0a:	fab0 f080 	clz	r0, r0
   b4a0e:	0940      	lsrs	r0, r0, #5
   b4a10:	4770      	bx	lr

000b4a12 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a12:	2301      	movs	r3, #1
   b4a14:	7003      	strb	r3, [r0, #0]
   b4a16:	4770      	bx	lr

000b4a18 <_ZN3LED6updateEv>:
    pin = PIN;
    pinMode(pin, OUTPUT);
  }
  void update()
  {
    digitalWrite(pin, val);
   b4a18:	7801      	ldrb	r1, [r0, #0]
   b4a1a:	8840      	ldrh	r0, [r0, #2]
   b4a1c:	f003 beed 	b.w	b87fa <digitalWrite>

000b4a20 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4a20:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4a22:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4a24:	685a      	ldr	r2, [r3, #4]
   b4a26:	6899      	ldr	r1, [r3, #8]
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	1054      	asrs	r4, r2, #1
   b4a2c:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4a30:	07d2      	lsls	r2, r2, #31
   b4a32:	bf48      	it	mi
   b4a34:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4a36:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4a3a:	bf48      	it	mi
   b4a3c:	58d3      	ldrmi	r3, [r2, r3]
   b4a3e:	4718      	bx	r3

000b4a40 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
   b4a40:	b513      	push	{r0, r1, r4, lr}
   b4a42:	460a      	mov	r2, r1
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4a44:	4603      	mov	r3, r0
   b4a46:	b1b0      	cbz	r0, b4a76 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0+0x36>
    _Function_base() : _M_manager(nullptr) { }
   b4a48:	2100      	movs	r1, #0
   b4a4a:	6081      	str	r1, [r0, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4a50:	466c      	mov	r4, sp
   b4a52:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4a56:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4a5a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4a62:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4a66:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a68:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4a6a:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4a6c:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4a6e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4a70:	68d8      	ldr	r0, [r3, #12]
   b4a72:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4a74:	60d9      	str	r1, [r3, #12]
   b4a76:	b002      	add	sp, #8
   b4a78:	bd10      	pop	{r4, pc}

000b4a7a <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4a7a:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4a7c:	b538      	push	{r3, r4, r5, lr}
   b4a7e:	4604      	mov	r4, r0
	switch (__op)
   b4a80:	d102      	bne.n	b4a88 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4a82:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4a84:	6023      	str	r3, [r4, #0]
	}
   b4a86:	e003      	b.n	b4a90 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4a88:	2a02      	cmp	r2, #2
   b4a8a:	d003      	beq.n	b4a94 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4a8c:	2a03      	cmp	r2, #3
   b4a8e:	d00d      	beq.n	b4aac <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4a90:	2000      	movs	r0, #0
   b4a92:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a94:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4a96:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a98:	f7ff ffa3 	bl	b49e2 <_Znwj>
   b4a9c:	4603      	mov	r3, r0
   b4a9e:	2800      	cmp	r0, #0
   b4aa0:	d0f0      	beq.n	b4a84 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b4aa2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4aaa:	e7eb      	b.n	b4a84 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4aac:	6800      	ldr	r0, [r0, #0]
   b4aae:	2800      	cmp	r0, #0
   b4ab0:	d0ee      	beq.n	b4a90 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b4ab2:	210c      	movs	r1, #12
   b4ab4:	f7ff ff99 	bl	b49ea <_ZdlPvj>
   b4ab8:	e7ea      	b.n	b4a90 <_ZNSt17_Function_handlerIFvvESt5_BindIFM3LEDFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b4abc <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4abc:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4abe:	f002 fa57 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4ac2:	4b03      	ldr	r3, [pc, #12]	; (b4ad0 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4ac4:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4aca:	f002 bc5d 	b.w	b7388 <spark_process>
   b4ace:	bf00      	nop
   b4ad0:	2003e728 	.word	0x2003e728

000b4ad4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4ad4:	b510      	push	{r4, lr}
      if (_M_manager)
   b4ad6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4ad8:	4604      	mov	r4, r0
      if (_M_manager)
   b4ada:	b113      	cbz	r3, b4ae2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4adc:	2203      	movs	r2, #3
   b4ade:	4601      	mov	r1, r0
   b4ae0:	4798      	blx	r3
    }
   b4ae2:	4620      	mov	r0, r4
   b4ae4:	bd10      	pop	{r4, pc}
	...

000b4ae8 <_Z6updatev>:
    }
  }
};

void update()
{
   b4ae8:	b538      	push	{r3, r4, r5, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4aea:	4d09      	ldr	r5, [pc, #36]	; (b4b10 <_Z6updatev+0x28>)
  for (uint i = 0; i < updates.size(); i++)
   b4aec:	2400      	movs	r4, #0
   b4aee:	e9d5 0300 	ldrd	r0, r3, [r5]
   b4af2:	1a1b      	subs	r3, r3, r0
   b4af4:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   b4af8:	d209      	bcs.n	b4b0e <_Z6updatev+0x26>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b4afa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4afe:	6883      	ldr	r3, [r0, #8]
   b4b00:	b90b      	cbnz	r3, b4b06 <_Z6updatev+0x1e>
	__throw_bad_function_call();
   b4b02:	f003 ff68 	bl	b89d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b06:	68c3      	ldr	r3, [r0, #12]
   b4b08:	4798      	blx	r3
   b4b0a:	3401      	adds	r4, #1
   b4b0c:	e7ef      	b.n	b4aee <_Z6updatev+0x6>
  {
    updates[i]();
  }
   b4b0e:	bd38      	pop	{r3, r4, r5, pc}
   b4b10:	2003e6ac 	.word	0x2003e6ac

000b4b14 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4b14:	6803      	ldr	r3, [r0, #0]
   b4b16:	b12b      	cbz	r3, b4b24 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4b18:	6842      	ldr	r2, [r0, #4]
   b4b1a:	4293      	cmp	r3, r2
   b4b1c:	d202      	bcs.n	b4b24 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4b1e:	4618      	mov	r0, r3
   b4b20:	f005 b8fa 	b.w	b9d18 <atoi>
   b4b24:	2000      	movs	r0, #0
   b4b26:	4770      	bx	lr

000b4b28 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4b28:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4b2a:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4b2c:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4b2e:	b145      	cbz	r5, b4b42 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4b30:	6843      	ldr	r3, [r0, #4]
   b4b32:	429d      	cmp	r5, r3
   b4b34:	d205      	bcs.n	b4b42 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4b36:	4628      	mov	r0, r5
   b4b38:	f7ff ff10 	bl	b495c <strlen>
   b4b3c:	3001      	adds	r0, #1
   b4b3e:	4405      	add	r5, r0
   b4b40:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4b42:	4620      	mov	r0, r4
   b4b44:	bd38      	pop	{r3, r4, r5, pc}

000b4b46 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b48:	4604      	mov	r4, r0
   b4b4a:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4b4c:	460d      	mov	r5, r1
   b4b4e:	b921      	cbnz	r1, b4b5a <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4b50:	6803      	ldr	r3, [r0, #0]
   b4b52:	1c7a      	adds	r2, r7, #1
   b4b54:	6042      	str	r2, [r0, #4]
   b4b56:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4b5a:	4608      	mov	r0, r1
   b4b5c:	f7ff fefe 	bl	b495c <strlen>
    if (len + l > buff_size)
   b4b60:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4b62:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4b64:	19f2      	adds	r2, r6, r7
   b4b66:	429a      	cmp	r2, r3
   b4b68:	d8f6      	bhi.n	b4b58 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4b6a:	6820      	ldr	r0, [r4, #0]
   b4b6c:	4632      	mov	r2, r6
   b4b6e:	4629      	mov	r1, r5
   b4b70:	4438      	add	r0, r7
   b4b72:	f005 f8d9 	bl	b9d28 <memcpy>
    len += l;
   b4b76:	6860      	ldr	r0, [r4, #4]
   b4b78:	4430      	add	r0, r6
   b4b7a:	6060      	str	r0, [r4, #4]
   b4b7c:	e7ec      	b.n	b4b58 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4b80 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4b80:	b538      	push	{r3, r4, r5, lr}
   b4b82:	4604      	mov	r4, r0
   b4b84:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4b86:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4b8a:	6825      	ldr	r5, [r4, #0]
   b4b8c:	4a04      	ldr	r2, [pc, #16]	; (b4ba0 <_ZN10BlynkParam3addEi+0x20>)
   b4b8e:	1a09      	subs	r1, r1, r0
   b4b90:	4428      	add	r0, r5
   b4b92:	f002 fc81 	bl	b7498 <snprintf>
   b4b96:	6863      	ldr	r3, [r4, #4]
   b4b98:	3001      	adds	r0, #1
   b4b9a:	4403      	add	r3, r0
   b4b9c:	6063      	str	r3, [r4, #4]
    }
   b4b9e:	bd38      	pop	{r3, r4, r5, pc}
   b4ba0:	000b9fe5 	.word	0x000b9fe5

000b4ba4 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4ba4:	b538      	push	{r3, r4, r5, lr}
   b4ba6:	4604      	mov	r4, r0
   b4ba8:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4baa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4bae:	6825      	ldr	r5, [r4, #0]
   b4bb0:	4a04      	ldr	r2, [pc, #16]	; (b4bc4 <_ZN10BlynkParam3addEl+0x20>)
   b4bb2:	1a09      	subs	r1, r1, r0
   b4bb4:	4428      	add	r0, r5
   b4bb6:	f002 fc6f 	bl	b7498 <snprintf>
   b4bba:	6863      	ldr	r3, [r4, #4]
   b4bbc:	3001      	adds	r0, #1
   b4bbe:	4403      	add	r3, r0
   b4bc0:	6063      	str	r3, [r4, #4]
    }
   b4bc2:	bd38      	pop	{r3, r4, r5, pc}
   b4bc4:	000b9fe8 	.word	0x000b9fe8

000b4bc8 <_Z14printMsgToOled6String>:

  display.display();
}

void printMsgToOled(String msg)
{
   b4bc8:	b510      	push	{r4, lr}
  display.setTextSize(1);
   b4bca:	2101      	movs	r1, #1
{
   b4bcc:	4604      	mov	r4, r0
  display.setTextSize(1);
   b4bce:	4806      	ldr	r0, [pc, #24]	; (b4be8 <_Z14printMsgToOled6String+0x20>)
   b4bd0:	f001 fa75 	bl	b60be <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4bd4:	4804      	ldr	r0, [pc, #16]	; (b4be8 <_Z14printMsgToOled6String+0x20>)
  display.setTextColor(WHITE);
  display.println(msg);
   b4bd6:	6821      	ldr	r1, [r4, #0]
   b4bd8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4bdc:	6143      	str	r3, [r0, #20]
}
   b4bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.println(msg);
   b4be2:	f002 bef0 	b.w	b79c6 <_ZN5Print7printlnEPKc>
   b4be6:	bf00      	nop
   b4be8:	2003e620 	.word	0x2003e620

000b4bec <_Z7nthRootii>:

double nthRoot(int val, int root)
{
   b4bec:	b510      	push	{r4, lr}
   b4bee:	4604      	mov	r4, r0
   b4bf0:	ed2d 8b02 	vpush	{d8}
  return std::pow(val, 1.0 / root);
   b4bf4:	4608      	mov	r0, r1
   b4bf6:	f7ff fb65 	bl	b42c4 <__aeabi_i2d>
   b4bfa:	4602      	mov	r2, r0
   b4bfc:	460b      	mov	r3, r1
   b4bfe:	2000      	movs	r0, #0
   b4c00:	4909      	ldr	r1, [pc, #36]	; (b4c28 <_Z7nthRootii+0x3c>)
   b4c02:	f7ff fcf3 	bl	b45ec <__aeabi_ddiv>
   b4c06:	ec41 0b18 	vmov	d8, r0, r1
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4c0a:	4620      	mov	r0, r4
   b4c0c:	f7ff fb5a 	bl	b42c4 <__aeabi_i2d>
   b4c10:	eeb0 1a48 	vmov.f32	s2, s16
   b4c14:	eef0 1a68 	vmov.f32	s3, s17
   b4c18:	ecbd 8b02 	vpop	{d8}
   b4c1c:	ec41 0b10 	vmov	d0, r0, r1
   b4c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4c24:	f003 bfec 	b.w	b8c00 <pow>
   b4c28:	3ff00000 	.word	0x3ff00000

000b4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4c2c:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4c2e:	2300      	movs	r3, #0
   b4c30:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4c32:	6800      	ldr	r0, [r0, #0]
   b4c34:	f003 fb2a 	bl	b828c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4c3c:	f002 b8b2 	b.w	b6da4 <BlynkNoOpCbk>

000b4c40 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c44:	e9d0 8b00 	ldrd	r8, fp, [r0]
   b4c48:	4607      	mov	r7, r0

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4c4a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c4e:	ebab 0008 	sub.w	r0, fp, r8
	if (max_size() - size() < __n)
   b4c52:	ebb3 1f20 	cmp.w	r3, r0, asr #4
   b4c56:	468a      	mov	sl, r1
   b4c58:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c5a:	ea4f 1220 	mov.w	r2, r0, asr #4
	if (max_size() - size() < __n)
   b4c5e:	d102      	bne.n	b4c66 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4c60:	4824      	ldr	r0, [pc, #144]	; (b4cf4 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xb4>)
   b4c62:	f003 feb5 	bl	b89d0 <_ZSt20__throw_length_errorPKc>
   b4c66:	2a01      	cmp	r2, #1
   b4c68:	4614      	mov	r4, r2
   b4c6a:	bf38      	it	cc
   b4c6c:	2401      	movcc	r4, #1
   b4c6e:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4c70:	ebaa 0508 	sub.w	r5, sl, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4c74:	d21b      	bcs.n	b4cae <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4c76:	b1e4      	cbz	r4, b4cb2 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
   b4c78:	429c      	cmp	r4, r3
   b4c7a:	bf28      	it	cs
   b4c7c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4c7e:	0120      	lsls	r0, r4, #4
   b4c80:	9101      	str	r1, [sp, #4]
   b4c82:	f7ff feae 	bl	b49e2 <_Znwj>
   b4c86:	9901      	ldr	r1, [sp, #4]
   b4c88:	4606      	mov	r6, r0
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
   b4c8a:	1970      	adds	r0, r6, r5
   b4c8c:	f7ff fed8 	bl	b4a40 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c90:	4645      	mov	r5, r8
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   b4c92:	4630      	mov	r0, r6
      for (; __first != __last; ++__first, (void)++__cur)
   b4c94:	45aa      	cmp	sl, r5
   b4c96:	f100 0910 	add.w	r9, r0, #16
   b4c9a:	d00c      	beq.n	b4cb6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
   b4c9c:	4629      	mov	r1, r5
   b4c9e:	f7ff fecf 	bl	b4a40 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
    class function<_Res(_ArgTypes...)>
   b4ca2:	4628      	mov	r0, r5
   b4ca4:	f7ff ff16 	bl	b4ad4 <_ZNSt14_Function_baseD1Ev>
   b4ca8:	3510      	adds	r5, #16
   b4caa:	4648      	mov	r0, r9
   b4cac:	e7f2      	b.n	b4c94 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4cae:	461c      	mov	r4, r3
   b4cb0:	e7e5      	b.n	b4c7e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4cb2:	4626      	mov	r6, r4
   b4cb4:	e7e9      	b.n	b4c8a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4a>
   b4cb6:	455d      	cmp	r5, fp
   b4cb8:	d00a      	beq.n	b4cd0 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x90>
   b4cba:	4629      	mov	r1, r5
   b4cbc:	4648      	mov	r0, r9
   b4cbe:	f7ff febf 	bl	b4a40 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
   b4cc2:	4628      	mov	r0, r5
   b4cc4:	f7ff ff06 	bl	b4ad4 <_ZNSt14_Function_baseD1Ev>
   b4cc8:	3510      	adds	r5, #16
   b4cca:	f109 0910 	add.w	r9, r9, #16
   b4cce:	e7f2      	b.n	b4cb6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
	if (__p)
   b4cd0:	f1b8 0f00 	cmp.w	r8, #0
   b4cd4:	d005      	beq.n	b4ce2 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xa2>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b4cd6:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b4cd8:	4640      	mov	r0, r8
   b4cda:	eba1 0108 	sub.w	r1, r1, r8
   b4cde:	f7ff fe84 	bl	b49ea <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4ce2:	eb06 1404 	add.w	r4, r6, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b4ce6:	e9c7 6900 	strd	r6, r9, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4cea:	60bc      	str	r4, [r7, #8]
    }
   b4cec:	b003      	add	sp, #12
   b4cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4cf2:	bf00      	nop
   b4cf4:	000b9fec 	.word	0x000b9fec

000b4cf8 <_ZN8LEDGroup10initializeEPt>:
  void initialize(pin_t *PINS)
   b4cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b4cfc:	f8df a07c 	ldr.w	sl, [pc, #124]	; b4d7c <_ZN8LEDGroup10initializeEPt+0x84>
	    _M_invoker = &_My_handler::_M_invoke;
   b4d00:	f8df 807c 	ldr.w	r8, [pc, #124]	; b4d80 <_ZN8LEDGroup10initializeEPt+0x88>
	    _M_manager = &_My_handler::_M_manager;
   b4d04:	f8df 907c 	ldr.w	r9, [pc, #124]	; b4d84 <_ZN8LEDGroup10initializeEPt+0x8c>
    pins = PINS;
   b4d08:	6041      	str	r1, [r0, #4]
  void initialize(pin_t *PINS)
   b4d0a:	b085      	sub	sp, #20
   b4d0c:	4605      	mov	r5, r0
    pins = PINS;
   b4d0e:	2400      	movs	r4, #0
      lightsInGroup[i].initialize(pins[i]);
   b4d10:	682e      	ldr	r6, [r5, #0]
   b4d12:	686b      	ldr	r3, [r5, #4]
    _Function_base() : _M_manager(nullptr) { }
   b4d14:	f04f 0b00 	mov.w	fp, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d18:	200c      	movs	r0, #12
   b4d1a:	5b1f      	ldrh	r7, [r3, r4]
    _Function_base() : _M_manager(nullptr) { }
   b4d1c:	f8cd b008 	str.w	fp, [sp, #8]
   b4d20:	eb06 0644 	add.w	r6, r6, r4, lsl #1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d24:	f7ff fe5d 	bl	b49e2 <_Znwj>
   b4d28:	b110      	cbz	r0, b4d30 <_ZN8LEDGroup10initializeEPt+0x38>
   b4d2a:	e9c0 ab00 	strd	sl, fp, [r0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4d2e:	6086      	str	r6, [r0, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4d30:	f8df b054 	ldr.w	fp, [pc, #84]	; b4d88 <_ZN8LEDGroup10initializeEPt+0x90>
   b4d34:	9000      	str	r0, [sp, #0]
   b4d36:	e9db 0301 	ldrd	r0, r3, [fp, #4]
   b4d3a:	4298      	cmp	r0, r3
	    _M_manager = &_My_handler::_M_manager;
   b4d3c:	e9cd 9802 	strd	r9, r8, [sp, #8]
   b4d40:	d015      	beq.n	b4d6e <_ZN8LEDGroup10initializeEPt+0x76>
   b4d42:	4669      	mov	r1, sp
   b4d44:	f7ff fe7c 	bl	b4a40 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
	    ++this->_M_impl._M_finish;
   b4d48:	f8db 3004 	ldr.w	r3, [fp, #4]
   b4d4c:	3310      	adds	r3, #16
   b4d4e:	f8cb 3004 	str.w	r3, [fp, #4]
    class function<_Res(_ArgTypes...)>
   b4d52:	4668      	mov	r0, sp
   b4d54:	f7ff febe 	bl	b4ad4 <_ZNSt14_Function_baseD1Ev>
    for (uint i = 0; i < sizeof(lightsInGroup) / sizeof(LED) + 2; i++)
   b4d58:	3402      	adds	r4, #2
    pin = PIN;
   b4d5a:	8077      	strh	r7, [r6, #2]
    pinMode(pin, OUTPUT);
   b4d5c:	2101      	movs	r1, #1
   b4d5e:	4638      	mov	r0, r7
   b4d60:	f003 fd3a 	bl	b87d8 <pinMode>
    for (uint i = 0; i < sizeof(lightsInGroup) / sizeof(LED) + 2; i++)
   b4d64:	2c06      	cmp	r4, #6
   b4d66:	d1d3      	bne.n	b4d10 <_ZN8LEDGroup10initializeEPt+0x18>
  }
   b4d68:	b005      	add	sp, #20
   b4d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b4d6e:	4601      	mov	r1, r0
   b4d70:	466a      	mov	r2, sp
   b4d72:	4658      	mov	r0, fp
   b4d74:	f7ff ff64 	bl	b4c40 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   b4d78:	e7eb      	b.n	b4d52 <_ZN8LEDGroup10initializeEPt+0x5a>
   b4d7a:	bf00      	nop
   b4d7c:	000b4a19 	.word	0x000b4a19
   b4d80:	000b4a21 	.word	0x000b4a21
   b4d84:	000b4a7b 	.word	0x000b4a7b
   b4d88:	2003e6ac 	.word	0x2003e6ac

000b4d8c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4d90:	188f      	adds	r7, r1, r2
   b4d92:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4d94:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4d96:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4d9a:	4606      	mov	r6, r0
   b4d9c:	4689      	mov	r9, r1
   b4d9e:	4690      	mov	r8, r2
    if (it >= param.end())
   b4da0:	f080 80c2 	bcs.w	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4da4:	a805      	add	r0, sp, #20
   b4da6:	880d      	ldrh	r5, [r1, #0]
   b4da8:	f7ff febe 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
   b4dac:	6803      	ldr	r3, [r0, #0]
   b4dae:	42bb      	cmp	r3, r7
   b4db0:	f080 80ba 	bcs.w	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4db4:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4db6:	7803      	ldrb	r3, [r0, #0]
   b4db8:	2b41      	cmp	r3, #65	; 0x41
   b4dba:	d149      	bne.n	b4e50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b4dbc:	3001      	adds	r0, #1
   b4dbe:	f004 ffab 	bl	b9d18 <atoi>
   b4dc2:	2805      	cmp	r0, #5
   b4dc4:	dd37      	ble.n	b4e36 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4dc6:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4dc8:	f247 2376 	movw	r3, #29302	; 0x7276
   b4dcc:	429d      	cmp	r5, r3
   b4dce:	f000 80d3 	beq.w	b4f78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4dd2:	d841      	bhi.n	b4e58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4dd4:	f247 2361 	movw	r3, #29281	; 0x7261
   b4dd8:	429d      	cmp	r5, r3
   b4dda:	f000 80a8 	beq.w	b4f2e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b4dde:	f247 2364 	movw	r3, #29284	; 0x7264
   b4de2:	429d      	cmp	r5, r3
   b4de4:	d06b      	beq.n	b4ebe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4de6:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4dea:	429d      	cmp	r5, r3
   b4dec:	d141      	bne.n	b4e72 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4dee:	4d78      	ldr	r5, [pc, #480]	; (b4fd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4df0:	4e78      	ldr	r6, [pc, #480]	; (b4fd4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4df2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b4fe8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4df6:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4df8:	42b8      	cmp	r0, r7
   b4dfa:	f080 8095 	bcs.w	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4dfe:	7803      	ldrb	r3, [r0, #0]
   b4e00:	2b41      	cmp	r3, #65	; 0x41
   b4e02:	d14b      	bne.n	b4e9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4e04:	3001      	adds	r0, #1
   b4e06:	f004 ff87 	bl	b9d18 <atoi>
   b4e0a:	2805      	cmp	r0, #5
   b4e0c:	dd39      	ble.n	b4e82 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4e0e:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4e10:	a805      	add	r0, sp, #20
   b4e12:	f7ff fe89 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4e16:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4e1a:	4629      	mov	r1, r5
   b4e1c:	4648      	mov	r0, r9
   b4e1e:	f7ff fd93 	bl	b4948 <strcmp>
   b4e22:	4601      	mov	r1, r0
   b4e24:	2800      	cmp	r0, #0
   b4e26:	d13d      	bne.n	b4ea4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4e28:	4620      	mov	r0, r4
   b4e2a:	f003 fcd5 	bl	b87d8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4e2e:	a805      	add	r0, sp, #20
   b4e30:	f7ff fe7a 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4e34:	e7df      	b.n	b4df6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4e36:	9805      	ldr	r0, [sp, #20]
   b4e38:	3001      	adds	r0, #1
   b4e3a:	f004 ff6d 	bl	b9d18 <atoi>
   b4e3e:	2800      	cmp	r0, #0
   b4e40:	dbc1      	blt.n	b4dc6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b4e42:	9805      	ldr	r0, [sp, #20]
   b4e44:	3001      	adds	r0, #1
   b4e46:	f004 ff67 	bl	b9d18 <atoi>
   b4e4a:	300e      	adds	r0, #14
   b4e4c:	b2c4      	uxtb	r4, r0
   b4e4e:	e7bb      	b.n	b4dc8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4e50:	a805      	add	r0, sp, #20
   b4e52:	f7ff fe5f 	bl	b4b14 <_ZNK10BlynkParam8iterator5asIntEv>
   b4e56:	e7f9      	b.n	b4e4c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b4e58:	f247 7364 	movw	r3, #30564	; 0x7764
   b4e5c:	429d      	cmp	r5, r3
   b4e5e:	d04f      	beq.n	b4f00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b4e60:	f247 7376 	movw	r3, #30582	; 0x7776
   b4e64:	429d      	cmp	r5, r3
   b4e66:	f000 8097 	beq.w	b4f98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b4e6a:	f247 7361 	movw	r3, #30561	; 0x7761
   b4e6e:	429d      	cmp	r5, r3
   b4e70:	d06f      	beq.n	b4f52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4e72:	2300      	movs	r3, #0
   b4e74:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4e78:	2202      	movs	r2, #2
   b4e7a:	9200      	str	r2, [sp, #0]
   b4e7c:	8b72      	ldrh	r2, [r6, #26]
   b4e7e:	4619      	mov	r1, r3
   b4e80:	e03a      	b.n	b4ef8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4e82:	9805      	ldr	r0, [sp, #20]
   b4e84:	3001      	adds	r0, #1
   b4e86:	f004 ff47 	bl	b9d18 <atoi>
   b4e8a:	2800      	cmp	r0, #0
   b4e8c:	dbbf      	blt.n	b4e0e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b4e8e:	9805      	ldr	r0, [sp, #20]
   b4e90:	3001      	adds	r0, #1
   b4e92:	f004 ff41 	bl	b9d18 <atoi>
   b4e96:	300e      	adds	r0, #14
   b4e98:	b2c4      	uxtb	r4, r0
   b4e9a:	e7b9      	b.n	b4e10 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b4e9c:	a805      	add	r0, sp, #20
   b4e9e:	f7ff fe39 	bl	b4b14 <_ZNK10BlynkParam8iterator5asIntEv>
   b4ea2:	e7f9      	b.n	b4e98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4ea4:	4631      	mov	r1, r6
   b4ea6:	4648      	mov	r0, r9
   b4ea8:	f7ff fd4e 	bl	b4948 <strcmp>
   b4eac:	b128      	cbz	r0, b4eba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b4eae:	4641      	mov	r1, r8
   b4eb0:	4648      	mov	r0, r9
   b4eb2:	f7ff fd49 	bl	b4948 <strcmp>
   b4eb6:	2800      	cmp	r0, #0
   b4eb8:	d1b9      	bne.n	b4e2e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b4eba:	2101      	movs	r1, #1
   b4ebc:	e7b4      	b.n	b4e28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4ebe:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4ec0:	4945      	ldr	r1, [pc, #276]	; (b4fd8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4ec2:	9307      	str	r3, [sp, #28]
   b4ec4:	a807      	add	r0, sp, #28
   b4ec6:	2310      	movs	r3, #16
   b4ec8:	2500      	movs	r5, #0
   b4eca:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4ece:	f7ff fe3a 	bl	b4b46 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4ed2:	a807      	add	r0, sp, #28
   b4ed4:	4621      	mov	r1, r4
   b4ed6:	f7ff fe53 	bl	b4b80 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4eda:	4620      	mov	r0, r4
   b4edc:	f003 fca6 	bl	b882c <digitalRead>
        rsp.add(analogRead(pin));
   b4ee0:	4601      	mov	r1, r0
   b4ee2:	a807      	add	r0, sp, #28
   b4ee4:	f7ff fe5e 	bl	b4ba4 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4ee8:	9b08      	ldr	r3, [sp, #32]
   b4eea:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4eee:	3b01      	subs	r3, #1
   b4ef0:	9300      	str	r3, [sp, #0]
   b4ef2:	9b07      	ldr	r3, [sp, #28]
   b4ef4:	462a      	mov	r2, r5
   b4ef6:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4ef8:	4630      	mov	r0, r6
   b4efa:	f000 fa85 	bl	b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4efe:	e013      	b.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4f00:	a805      	add	r0, sp, #20
   b4f02:	f7ff fe11 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
   b4f06:	6803      	ldr	r3, [r0, #0]
   b4f08:	429f      	cmp	r7, r3
   b4f0a:	d90d      	bls.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4f0c:	b2a4      	uxth	r4, r4
   b4f0e:	2101      	movs	r1, #1
   b4f10:	4620      	mov	r0, r4
   b4f12:	f003 fc61 	bl	b87d8 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4f16:	a805      	add	r0, sp, #20
   b4f18:	f7ff fdfc 	bl	b4b14 <_ZNK10BlynkParam8iterator5asIntEv>
   b4f1c:	1e01      	subs	r1, r0, #0
   b4f1e:	bf18      	it	ne
   b4f20:	2101      	movne	r1, #1
   b4f22:	4620      	mov	r0, r4
   b4f24:	f003 fc69 	bl	b87fa <digitalWrite>
    }
}
   b4f28:	b00f      	add	sp, #60	; 0x3c
   b4f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4f2e:	ab0a      	add	r3, sp, #40	; 0x28
   b4f30:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4f32:	a807      	add	r0, sp, #28
   b4f34:	2310      	movs	r3, #16
   b4f36:	4929      	ldr	r1, [pc, #164]	; (b4fdc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b4f38:	2500      	movs	r5, #0
   b4f3a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4f3e:	f7ff fe02 	bl	b4b46 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4f42:	a807      	add	r0, sp, #28
   b4f44:	4621      	mov	r1, r4
   b4f46:	f7ff fe1b 	bl	b4b80 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	f003 fc81 	bl	b8852 <analogRead>
   b4f50:	e7c6      	b.n	b4ee0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b4f52:	a805      	add	r0, sp, #20
   b4f54:	f7ff fde8 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
   b4f58:	6803      	ldr	r3, [r0, #0]
   b4f5a:	429f      	cmp	r7, r3
   b4f5c:	d9e4      	bls.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4f5e:	b2a4      	uxth	r4, r4
   b4f60:	2101      	movs	r1, #1
   b4f62:	4620      	mov	r0, r4
   b4f64:	f003 fc38 	bl	b87d8 <pinMode>
        analogWrite(pin, it.asInt());
   b4f68:	a805      	add	r0, sp, #20
   b4f6a:	f7ff fdd3 	bl	b4b14 <_ZNK10BlynkParam8iterator5asIntEv>
   b4f6e:	4601      	mov	r1, r0
   b4f70:	4620      	mov	r0, r4
   b4f72:	f003 fc85 	bl	b8880 <_Z11analogWritetm>
    } break;
   b4f76:	e7d7      	b.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b4f78:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b4f7a:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b4f7e:	f001 ff13 	bl	b6da8 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4f82:	4603      	mov	r3, r0
            handler(req);
   b4f84:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4f86:	b123      	cbz	r3, b4f92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b4f88:	4a15      	ldr	r2, [pc, #84]	; (b4fe0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b4f8a:	4293      	cmp	r3, r2
   b4f8c:	d001      	beq.n	b4f92 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b4f8e:	4798      	blx	r3
   b4f90:	e7ca      	b.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b4f92:	f001 ff05 	bl	b6da0 <BlynkWidgetRead>
        }
    }
   b4f96:	e7c7      	b.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b4f98:	a805      	add	r0, sp, #20
   b4f9a:	f7ff fdc5 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4f9e:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4fa0:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4fa4:	eba3 0109 	sub.w	r1, r3, r9
   b4fa8:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b4fac:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4fae:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b4fb2:	910c      	str	r1, [sp, #48]	; 0x30
   b4fb4:	f001 ff02 	bl	b6dbc <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4fb8:	4603      	mov	r3, r0
            handler(req, param);
   b4fba:	a90a      	add	r1, sp, #40	; 0x28
   b4fbc:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4fbe:	b123      	cbz	r3, b4fca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4fc0:	4a08      	ldr	r2, [pc, #32]	; (b4fe4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4fc2:	4293      	cmp	r3, r2
   b4fc4:	d001      	beq.n	b4fca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b4fc6:	4798      	blx	r3
   b4fc8:	e7ae      	b.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b4fca:	f001 feea 	bl	b6da2 <BlynkWidgetWrite>
    } break;
   b4fce:	e7ab      	b.n	b4f28 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4fd0:	000ba006 	.word	0x000ba006
   b4fd4:	000ba009 	.word	0x000ba009
   b4fd8:	000ba011 	.word	0x000ba011
   b4fdc:	000ba014 	.word	0x000ba014
   b4fe0:	000b6da1 	.word	0x000b6da1
   b4fe4:	000b6da3 	.word	0x000b6da3
   b4fe8:	000ba00d 	.word	0x000ba00d

000b4fec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ff0:	b08c      	sub	sp, #48	; 0x30
   b4ff2:	af04      	add	r7, sp, #16
   b4ff4:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b4ff6:	2205      	movs	r2, #5
   b4ff8:	6800      	ldr	r0, [r0, #0]
   b4ffa:	1d39      	adds	r1, r7, #4
   b4ffc:	f002 fe09 	bl	b7c12 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b5000:	b3a8      	cbz	r0, b506e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b5002:	2805      	cmp	r0, #5
   b5004:	d004      	beq.n	b5010 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b5006:	2000      	movs	r0, #0
}
   b5008:	3720      	adds	r7, #32
   b500a:	46bd      	mov	sp, r7
   b500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b5010:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b5014:	f002 f86c 	bl	b70f0 <inet_ntohs>
   b5018:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b501c:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b5020:	f002 f866 	bl	b70f0 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b5024:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b5028:	f8a7 0007 	strh.w	r0, [r7, #7]
   b502c:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b502e:	2b00      	cmp	r3, #0
   b5030:	d0e9      	beq.n	b5006 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b5032:	793b      	ldrb	r3, [r7, #4]
   b5034:	bb23      	cbnz	r3, b5080 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b5036:	f001 feb1 	bl	b6d9c <_Z11BlynkMillisv>
   b503a:	4602      	mov	r2, r0
   b503c:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b503e:	7f60      	ldrb	r0, [r4, #29]
   b5040:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5044:	b9c0      	cbnz	r0, b5078 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b5046:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b504a:	2901      	cmp	r1, #1
   b504c:	d114      	bne.n	b5078 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b504e:	2b09      	cmp	r3, #9
   b5050:	d00f      	beq.n	b5072 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b5052:	2bc8      	cmp	r3, #200	; 0xc8
   b5054:	d001      	beq.n	b505a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b5056:	2b04      	cmp	r3, #4
   b5058:	d1d6      	bne.n	b5008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b505a:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b505c:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b505e:	4620      	mov	r0, r4
                state = CONNECTED;
   b5060:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b5062:	f000 fa81 	bl	b5568 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b5066:	f7ff fd29 	bl	b4abc <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b506a:	f001 fe9b 	bl	b6da4 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b506e:	2001      	movs	r0, #1
   b5070:	e7ca      	b.n	b5008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b5072:	2303      	movs	r3, #3
   b5074:	7763      	strb	r3, [r4, #29]
                break;
   b5076:	e7c7      	b.n	b5008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b5078:	1f58      	subs	r0, r3, #5
   b507a:	bf18      	it	ne
   b507c:	2001      	movne	r0, #1
   b507e:	e7c3      	b.n	b5008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b5080:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b5084:	d903      	bls.n	b508e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b5086:	4620      	mov	r0, r4
   b5088:	f7ff fdd0 	bl	b4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b508c:	e7ef      	b.n	b506e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b508e:	f100 0308 	add.w	r3, r0, #8
   b5092:	f023 0307 	bic.w	r3, r3, #7
   b5096:	466e      	mov	r6, sp
   b5098:	ebad 0d03 	sub.w	sp, sp, r3
   b509c:	ad04      	add	r5, sp, #16
   b509e:	4602      	mov	r2, r0
   b50a0:	4629      	mov	r1, r5
   b50a2:	6820      	ldr	r0, [r4, #0]
   b50a4:	f002 fdb5 	bl	b7c12 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b50a8:	4580      	cmp	r8, r0
   b50aa:	f04f 0000 	mov.w	r0, #0
   b50ae:	d17f      	bne.n	b51b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b50b0:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b50b4:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b50b6:	f001 fe71 	bl	b6d9c <_Z11BlynkMillisv>
    switch (hdr.type)
   b50ba:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b50bc:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b50be:	2b14      	cmp	r3, #20
   b50c0:	f000 80a6 	beq.w	b5210 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b50c4:	d848      	bhi.n	b5158 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b50c6:	2b0f      	cmp	r3, #15
   b50c8:	f000 80a2 	beq.w	b5210 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b50cc:	d807      	bhi.n	b50de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b50ce:	2b02      	cmp	r3, #2
   b50d0:	d048      	beq.n	b5164 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b50d2:	2b06      	cmp	r3, #6
   b50d4:	d051      	beq.n	b517a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b50d6:	4620      	mov	r0, r4
   b50d8:	f7ff fda8 	bl	b4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b50dc:	e058      	b.n	b5190 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b50de:	2b11      	cmp	r3, #17
   b50e0:	d1f9      	bne.n	b50d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b50e2:	2300      	movs	r3, #0
   b50e4:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b50e6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b50ea:	442b      	add	r3, r5
        if (it >= param.end())
   b50ec:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b50ee:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b50f2:	d24d      	bcs.n	b5190 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b50f4:	f107 000c 	add.w	r0, r7, #12
   b50f8:	f8d5 8000 	ldr.w	r8, [r5]
   b50fc:	f7ff fd14 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5100:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b5102:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b5106:	1b5d      	subs	r5, r3, r5
   b5108:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b510a:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b510e:	687b      	ldr	r3, [r7, #4]
   b5110:	61fd      	str	r5, [r7, #28]
   b5112:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b5116:	8363      	strh	r3, [r4, #26]
   b5118:	4b64      	ldr	r3, [pc, #400]	; (b52ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b511a:	4598      	cmp	r8, r3
   b511c:	f000 80bf 	beq.w	b529e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b5120:	f200 808c 	bhi.w	b523c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b5124:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b5128:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b512c:	4413      	add	r3, r2
   b512e:	4598      	cmp	r8, r3
   b5130:	f000 809d 	beq.w	b526e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b5134:	d879      	bhi.n	b522a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b5136:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b513a:	3b06      	subs	r3, #6
   b513c:	4598      	cmp	r8, r3
   b513e:	f000 809c 	beq.w	b527a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b5142:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b5146:	3303      	adds	r3, #3
   b5148:	4598      	cmp	r8, r3
   b514a:	d16b      	bne.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b514c:	f107 0114 	add.w	r1, r7, #20
   b5150:	4638      	mov	r0, r7
   b5152:	f001 fe26 	bl	b6da2 <BlynkWidgetWrite>
   b5156:	e065      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b5158:	2b29      	cmp	r3, #41	; 0x29
   b515a:	d01b      	beq.n	b5194 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b515c:	2b37      	cmp	r3, #55	; 0x37
   b515e:	d017      	beq.n	b5190 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b5160:	2b1d      	cmp	r3, #29
   b5162:	d1b8      	bne.n	b50d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b5164:	7f63      	ldrb	r3, [r4, #29]
   b5166:	b943      	cbnz	r3, b517a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b5168:	2301      	movs	r3, #1
   b516a:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b516c:	4620      	mov	r0, r4
   b516e:	f000 f9fb 	bl	b5568 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b5172:	f7ff fca3 	bl	b4abc <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b5176:	f001 fe15 	bl	b6da4 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b517a:	2300      	movs	r3, #0
   b517c:	21c8      	movs	r1, #200	; 0xc8
   b517e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b5182:	9100      	str	r1, [sp, #0]
   b5184:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5188:	4619      	mov	r1, r3
   b518a:	4620      	mov	r0, r4
   b518c:	f000 f93c 	bl	b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b5190:	2001      	movs	r0, #1
   b5192:	e00d      	b.n	b51b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b5194:	68a3      	ldr	r3, [r4, #8]
   b5196:	b91b      	cbnz	r3, b51a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b5198:	2040      	movs	r0, #64	; 0x40
   b519a:	f002 f965 	bl	b7468 <malloc>
   b519e:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b51a0:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b51a4:	44a8      	add	r8, r5
        if (it >= param.end())
   b51a6:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b51a8:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b51ac:	d302      	bcc.n	b51b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b51ae:	2000      	movs	r0, #0
   b51b0:	46b5      	mov	sp, r6
   b51b2:	e729      	b.n	b5008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b51b4:	4629      	mov	r1, r5
   b51b6:	2240      	movs	r2, #64	; 0x40
   b51b8:	68a0      	ldr	r0, [r4, #8]
   b51ba:	f004 fdf9 	bl	b9db0 <strncpy>
        redir_serv[63] = '\0';
   b51be:	68a3      	ldr	r3, [r4, #8]
   b51c0:	2500      	movs	r5, #0
   b51c2:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b51c6:	f107 0014 	add.w	r0, r7, #20
   b51ca:	f7ff fcad 	bl	b4b28 <_ZN10BlynkParam8iteratorppEv>
   b51ce:	6803      	ldr	r3, [r0, #0]
   b51d0:	4598      	cmp	r8, r3
   b51d2:	d91b      	bls.n	b520c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b51d4:	6978      	ldr	r0, [r7, #20]
   b51d6:	b120      	cbz	r0, b51e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b51d8:	69bb      	ldr	r3, [r7, #24]
   b51da:	4298      	cmp	r0, r3
   b51dc:	d214      	bcs.n	b5208 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b51de:	f004 fd9f 	bl	b9d20 <atol>
            redir_port = it.asLong();
   b51e2:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b51e4:	6820      	ldr	r0, [r4, #0]
   b51e6:	f003 f851 	bl	b828c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b51ea:	6823      	ldr	r3, [r4, #0]
   b51ec:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b51ee:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b51f0:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b51f2:	2300      	movs	r3, #0
   b51f4:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b51f6:	f001 fdd1 	bl	b6d9c <_Z11BlynkMillisv>
   b51fa:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b51fe:	3808      	subs	r0, #8
   b5200:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b5204:	6160      	str	r0, [r4, #20]
   b5206:	e7c3      	b.n	b5190 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b5208:	4628      	mov	r0, r5
   b520a:	e7ea      	b.n	b51e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b520c:	2550      	movs	r5, #80	; 0x50
   b520e:	e7e9      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b5210:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b5212:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b5216:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b521a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b521c:	4629      	mov	r1, r5
   b521e:	4620      	mov	r0, r4
   b5220:	f7ff fdb4 	bl	b4d8c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b5224:	2300      	movs	r3, #0
   b5226:	8363      	strh	r3, [r4, #26]
   b5228:	e7b2      	b.n	b5190 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b522a:	4b21      	ldr	r3, [pc, #132]	; (b52b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b522c:	4598      	cmp	r8, r3
   b522e:	d1f9      	bne.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b5230:	f107 0114 	add.w	r1, r7, #20
   b5234:	4638      	mov	r0, r7
   b5236:	f001 fdb4 	bl	b6da2 <BlynkWidgetWrite>
   b523a:	e7f3      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b523c:	4b1d      	ldr	r3, [pc, #116]	; (b52b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b523e:	4598      	cmp	r8, r3
   b5240:	d021      	beq.n	b5286 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b5242:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b5246:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b524a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b524e:	4598      	cmp	r8, r3
   b5250:	d01f      	beq.n	b5292 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b5252:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b5256:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b525a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b525e:	4598      	cmp	r8, r3
   b5260:	d1e0      	bne.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b5262:	f107 0114 	add.w	r1, r7, #20
   b5266:	4638      	mov	r0, r7
   b5268:	f001 fd9b 	bl	b6da2 <BlynkWidgetWrite>
   b526c:	e7da      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b526e:	f107 0114 	add.w	r1, r7, #20
   b5272:	4638      	mov	r0, r7
   b5274:	f001 fd95 	bl	b6da2 <BlynkWidgetWrite>
   b5278:	e7d4      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b527a:	f107 0114 	add.w	r1, r7, #20
   b527e:	4638      	mov	r0, r7
   b5280:	f001 fd8f 	bl	b6da2 <BlynkWidgetWrite>
   b5284:	e7ce      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b5286:	f107 0114 	add.w	r1, r7, #20
   b528a:	4638      	mov	r0, r7
   b528c:	f001 fd89 	bl	b6da2 <BlynkWidgetWrite>
   b5290:	e7c8      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b5292:	f107 0114 	add.w	r1, r7, #20
   b5296:	4638      	mov	r0, r7
   b5298:	f001 fd83 	bl	b6da2 <BlynkWidgetWrite>
   b529c:	e7c2      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b529e:	f107 0114 	add.w	r1, r7, #20
   b52a2:	4638      	mov	r0, r7
   b52a4:	f001 fd7d 	bl	b6da2 <BlynkWidgetWrite>
   b52a8:	e7bc      	b.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b52aa:	bf00      	nop
   b52ac:	00736676 	.word	0x00736676
   b52b0:	00676264 	.word	0x00676264
   b52b4:	6e6f6361 	.word	0x6e6f6361

000b52b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b52b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52bc:	4604      	mov	r4, r0
   b52be:	b08c      	sub	sp, #48	; 0x30
   b52c0:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b52c2:	f7ff fbfb 	bl	b4abc <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b52c6:	7f63      	ldrb	r3, [r4, #29]
   b52c8:	2b02      	cmp	r3, #2
   b52ca:	d01e      	beq.n	b530a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b52cc:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b52ce:	8b62      	ldrh	r2, [r4, #26]
   b52d0:	3301      	adds	r3, #1
   b52d2:	b2db      	uxtb	r3, r3
   b52d4:	7723      	strb	r3, [r4, #28]
   b52d6:	b9aa      	cbnz	r2, b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b52d8:	2b02      	cmp	r3, #2
   b52da:	d813      	bhi.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b52dc:	6820      	ldr	r0, [r4, #0]
   b52de:	f002 fe9d 	bl	b801c <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b52e2:	b1a8      	cbz	r0, b5310 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b52e4:	b925      	cbnz	r5, b52f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b52e6:	6820      	ldr	r0, [r4, #0]
   b52e8:	f002 ff76 	bl	b81d8 <_ZN9TCPClient9availableEv>
   b52ec:	2800      	cmp	r0, #0
   b52ee:	dd0f      	ble.n	b5310 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b52f0:	4620      	mov	r0, r4
   b52f2:	f7ff fe7b 	bl	b4fec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b52f6:	2800      	cmp	r0, #0
   b52f8:	d1f5      	bne.n	b52e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b52fa:	6820      	ldr	r0, [r4, #0]
   b52fc:	f002 ffc6 	bl	b828c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b5300:	f001 fd50 	bl	b6da4 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b5304:	7f23      	ldrb	r3, [r4, #28]
   b5306:	3b01      	subs	r3, #1
   b5308:	7723      	strb	r3, [r4, #28]
}
   b530a:	b00c      	add	sp, #48	; 0x30
   b530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b5310:	f001 fd44 	bl	b6d9c <_Z11BlynkMillisv>
   b5314:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b5316:	6820      	ldr	r0, [r4, #0]
   b5318:	f002 fe80 	bl	b801c <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b531c:	7f67      	ldrb	r7, [r4, #29]
   b531e:	2f01      	cmp	r7, #1
   b5320:	4606      	mov	r6, r0
   b5322:	d124      	bne.n	b536e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b5324:	b920      	cbnz	r0, b5330 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b5326:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b5328:	4620      	mov	r0, r4
   b532a:	f7ff fc7f 	bl	b4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b532e:	e7e9      	b.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b5330:	68e3      	ldr	r3, [r4, #12]
   b5332:	f24f 6218 	movw	r2, #63000	; 0xf618
   b5336:	1aeb      	subs	r3, r5, r3
   b5338:	4293      	cmp	r3, r2
   b533a:	d8f5      	bhi.n	b5328 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b533c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b5340:	4293      	cmp	r3, r2
   b5342:	d803      	bhi.n	b534c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5344:	6923      	ldr	r3, [r4, #16]
   b5346:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5348:	4293      	cmp	r3, r2
   b534a:	d9db      	bls.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b534c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b534e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5352:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5354:	4293      	cmp	r3, r2
   b5356:	d9d5      	bls.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b5358:	2300      	movs	r3, #0
   b535a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b535e:	9300      	str	r3, [sp, #0]
   b5360:	461a      	mov	r2, r3
   b5362:	2106      	movs	r1, #6
   b5364:	4620      	mov	r0, r4
   b5366:	f000 f84f 	bl	b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b536a:	6165      	str	r5, [r4, #20]
                return false;
   b536c:	e7ca      	b.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b536e:	2f00      	cmp	r7, #0
   b5370:	d1c8      	bne.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5372:	6963      	ldr	r3, [r4, #20]
   b5374:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b5376:	b140      	cbz	r0, b538a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b5378:	f241 7270 	movw	r2, #6000	; 0x1770
   b537c:	4293      	cmp	r3, r2
   b537e:	d9c1      	bls.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b5380:	6820      	ldr	r0, [r4, #0]
   b5382:	f002 ff83 	bl	b828c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5386:	7767      	strb	r7, [r4, #29]
            return false;
   b5388:	e7bc      	b.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b538a:	f241 3288 	movw	r2, #5000	; 0x1388
   b538e:	4293      	cmp	r3, r2
   b5390:	d9b8      	bls.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b5392:	6820      	ldr	r0, [r4, #0]
   b5394:	f002 ff7a 	bl	b828c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b5398:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b539c:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b53a0:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b53a4:	f1be 0f00 	cmp.w	lr, #0
   b53a8:	d01b      	beq.n	b53e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b53aa:	4633      	mov	r3, r6
   b53ac:	4642      	mov	r2, r8
   b53ae:	4671      	mov	r1, lr
   b53b0:	4660      	mov	r0, ip
   b53b2:	f002 fdb5 	bl	b7f20 <_ZN9TCPClient7connectEPKctm>
   b53b6:	2801      	cmp	r0, #1
   b53b8:	d1d7      	bne.n	b536a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b53ba:	6863      	ldr	r3, [r4, #4]
   b53bc:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b53be:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b53c0:	4618      	mov	r0, r3
            msgIdOut = 1;
   b53c2:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b53c4:	f7ff faca 	bl	b495c <strlen>
   b53c8:	2200      	movs	r2, #0
   b53ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b53ce:	9b05      	ldr	r3, [sp, #20]
   b53d0:	9000      	str	r0, [sp, #0]
   b53d2:	462a      	mov	r2, r5
   b53d4:	211d      	movs	r1, #29
   b53d6:	4620      	mov	r0, r4
   b53d8:	f000 f816 	bl	b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b53dc:	6923      	ldr	r3, [r4, #16]
   b53de:	6163      	str	r3, [r4, #20]
            return true;
   b53e0:	e790      	b.n	b5304 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b53e2:	4b08      	ldr	r3, [pc, #32]	; (b5404 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b53e4:	9306      	str	r3, [sp, #24]
   b53e6:	f10c 0720 	add.w	r7, ip, #32
   b53ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b53ec:	ae07      	add	r6, sp, #28
   b53ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b53f0:	683b      	ldr	r3, [r7, #0]
   b53f2:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b53f4:	4642      	mov	r2, r8
   b53f6:	4673      	mov	r3, lr
   b53f8:	a906      	add	r1, sp, #24
   b53fa:	4660      	mov	r0, ip
   b53fc:	f002 fe70 	bl	b80e0 <_ZN9TCPClient7connectE9IPAddresstm>
   b5400:	e7d9      	b.n	b53b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b5402:	bf00      	nop
   b5404:	000bb0b0 	.word	0x000bb0b0

000b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b5408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b540c:	b083      	sub	sp, #12
   b540e:	af00      	add	r7, sp, #0
   b5410:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b5412:	6800      	ldr	r0, [r0, #0]
   b5414:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b5416:	4688      	mov	r8, r1
   b5418:	4616      	mov	r6, r2
   b541a:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b541c:	46eb      	mov	fp, sp
   b541e:	f002 fdfd 	bl	b801c <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b5422:	2800      	cmp	r0, #0
   b5424:	f000 8081 	beq.w	b552a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b5428:	f1b8 0f1d 	cmp.w	r8, #29
   b542c:	d804      	bhi.n	b5438 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b542e:	4b4d      	ldr	r3, [pc, #308]	; (b5564 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b5430:	fa23 f308 	lsr.w	r3, r3, r8
   b5434:	07db      	lsls	r3, r3, #31
   b5436:	d402      	bmi.n	b543e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b5438:	7f63      	ldrb	r3, [r4, #29]
   b543a:	2b01      	cmp	r3, #1
   b543c:	d175      	bne.n	b552a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b543e:	b946      	cbnz	r6, b5452 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5440:	8b66      	ldrh	r6, [r4, #26]
   b5442:	b936      	cbnz	r6, b5452 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b5444:	8b23      	ldrh	r3, [r4, #24]
   b5446:	3301      	adds	r3, #1
   b5448:	b29b      	uxth	r3, r3
   b544a:	2b00      	cmp	r3, #0
   b544c:	d072      	beq.n	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b544e:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b5450:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b5452:	f1a8 030c 	sub.w	r3, r8, #12
   b5456:	2b08      	cmp	r3, #8
   b5458:	d816      	bhi.n	b5488 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b545a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b545e:	4293      	cmp	r3, r2
   b5460:	bf38      	it	cc
   b5462:	4613      	movcc	r3, r2
   b5464:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b5468:	f001 fc98 	bl	b6d9c <_Z11BlynkMillisv>
   b546c:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b5470:	2800      	cmp	r0, #0
   b5472:	db61      	blt.n	b5538 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b5474:	2100      	movs	r1, #0
   b5476:	4620      	mov	r0, r4
   b5478:	f7ff ff1e 	bl	b52b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b547c:	f001 fc8e 	bl	b6d9c <_Z11BlynkMillisv>
   b5480:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b5484:	2800      	cmp	r0, #0
   b5486:	daf5      	bge.n	b5474 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5488:	f1b9 0f00 	cmp.w	r9, #0
   b548c:	d05b      	beq.n	b5546 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b548e:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b5490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b5492:	2a00      	cmp	r2, #0
   b5494:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b5496:	bf08      	it	eq
   b5498:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b549a:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b549e:	f10a 0307 	add.w	r3, sl, #7
   b54a2:	f023 0307 	bic.w	r3, r3, #7
   b54a6:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b54aa:	4630      	mov	r0, r6
    hdr->type = cmd;
   b54ac:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b54b0:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b54b4:	f001 fe24 	bl	b7100 <inet_htons>
    hdr->length = htons(length+length2);
   b54b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b54ba:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b54be:	18e8      	adds	r0, r5, r3
   b54c0:	b280      	uxth	r0, r0
   b54c2:	f001 fe1d 	bl	b7100 <inet_htons>
   b54c6:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b54ca:	f1b9 0f00 	cmp.w	r9, #0
   b54ce:	d03c      	beq.n	b554a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b54d0:	2d00      	cmp	r5, #0
   b54d2:	d03a      	beq.n	b554a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b54d4:	462a      	mov	r2, r5
   b54d6:	4649      	mov	r1, r9
   b54d8:	f10d 0005 	add.w	r0, sp, #5
   b54dc:	f004 fc24 	bl	b9d28 <memcpy>
        pos += length;
   b54e0:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b54e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b54e4:	b13b      	cbz	r3, b54f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b54e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b54e8:	b12b      	cbz	r3, b54f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b54ea:	461a      	mov	r2, r3
   b54ec:	687b      	ldr	r3, [r7, #4]
   b54ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b54f0:	4418      	add	r0, r3
   b54f2:	f004 fc19 	bl	b9d28 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b54f6:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b54f8:	4555      	cmp	r5, sl
   b54fa:	d22a      	bcs.n	b5552 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b54fc:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b5500:	687b      	ldr	r3, [r7, #4]
   b5502:	6820      	ldr	r0, [r4, #0]
   b5504:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b5508:	bf28      	it	cs
   b550a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b550e:	1959      	adds	r1, r3, r5
   b5510:	f002 fc37 	bl	b7d82 <_ZN9TCPClient5writeEPKhj>
   b5514:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b5516:	2000      	movs	r0, #0
   b5518:	f001 fc3e 	bl	b6d98 <_Z10BlynkDelaym>
        if (w == 0) {
   b551c:	b9be      	cbnz	r6, b554e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b551e:	6820      	ldr	r0, [r4, #0]
   b5520:	f002 feb4 	bl	b828c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5524:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b5526:	f001 fc3d 	bl	b6da4 <BlynkNoOpCbk>
}
   b552a:	370c      	adds	r7, #12
   b552c:	46dd      	mov	sp, fp
   b552e:	46bd      	mov	sp, r7
   b5530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b5534:	2301      	movs	r3, #1
   b5536:	e78a      	b.n	b544e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b5538:	7f21      	ldrb	r1, [r4, #28]
   b553a:	2900      	cmp	r1, #0
   b553c:	d1a4      	bne.n	b5488 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b553e:	4620      	mov	r0, r4
   b5540:	f7ff feba 	bl	b52b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5544:	e7a0      	b.n	b5488 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5546:	2305      	movs	r3, #5
   b5548:	e7a2      	b.n	b5490 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b554a:	2005      	movs	r0, #5
   b554c:	e7c9      	b.n	b54e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b554e:	4435      	add	r5, r6
    while (wlen < full_length) {
   b5550:	e7d2      	b.n	b54f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b5552:	d003      	beq.n	b555c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b5554:	4620      	mov	r0, r4
   b5556:	f7ff fb69 	bl	b4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b555a:	e7e6      	b.n	b552a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b555c:	f001 fc1e 	bl	b6d9c <_Z11BlynkMillisv>
   b5560:	6120      	str	r0, [r4, #16]
   b5562:	e7e2      	b.n	b552a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b5564:	20000045 	.word	0x20000045

000b5568 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b5568:	b530      	push	{r4, r5, lr}
   b556a:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b556c:	ab08      	add	r3, sp, #32
   b556e:	4604      	mov	r4, r0
   b5570:	9305      	str	r3, [sp, #20]
   b5572:	2500      	movs	r5, #0
   b5574:	2340      	movs	r3, #64	; 0x40
        add(key);
   b5576:	a805      	add	r0, sp, #20
   b5578:	490b      	ldr	r1, [pc, #44]	; (b55a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b557a:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b557e:	f7ff fae2 	bl	b4b46 <_ZN10BlynkParam3addEPKc>
        add(val);
   b5582:	a805      	add	r0, sp, #20
   b5584:	4909      	ldr	r1, [pc, #36]	; (b55ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b5586:	f7ff fade 	bl	b4b46 <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b558a:	9b06      	ldr	r3, [sp, #24]
   b558c:	9302      	str	r3, [sp, #8]
   b558e:	9b05      	ldr	r3, [sp, #20]
   b5590:	9301      	str	r3, [sp, #4]
   b5592:	2365      	movs	r3, #101	; 0x65
   b5594:	9300      	str	r3, [sp, #0]
   b5596:	462a      	mov	r2, r5
   b5598:	4b05      	ldr	r3, [pc, #20]	; (b55b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b559a:	2111      	movs	r1, #17
   b559c:	4620      	mov	r0, r4
   b559e:	f7ff ff33 	bl	b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b55a2:	b019      	add	sp, #100	; 0x64
   b55a4:	bd30      	pop	{r4, r5, pc}
   b55a6:	bf00      	nop
   b55a8:	000ba017 	.word	0x000ba017
   b55ac:	000ba01c 	.word	0x000ba01c
   b55b0:	000ba0a0 	.word	0x000ba0a0

000b55b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b55b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b55b6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b55ba:	ab08      	add	r3, sp, #32
   b55bc:	2400      	movs	r4, #0
   b55be:	4605      	mov	r5, r0
   b55c0:	460f      	mov	r7, r1
   b55c2:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b55c4:	a805      	add	r0, sp, #20
   b55c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b55ca:	490e      	ldr	r1, [pc, #56]	; (b5604 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
    void virtualWrite(int pin, Args... values) {
   b55cc:	4616      	mov	r6, r2
   b55ce:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b55d2:	f7ff fab8 	bl	b4b46 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b55d6:	4639      	mov	r1, r7
   b55d8:	a805      	add	r0, sp, #20
   b55da:	f7ff fad1 	bl	b4b80 <_ZN10BlynkParam3addEi>
        add(last);
   b55de:	4631      	mov	r1, r6
   b55e0:	a805      	add	r0, sp, #20
   b55e2:	f7ff facd 	bl	b4b80 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b55e6:	9b06      	ldr	r3, [sp, #24]
   b55e8:	3b01      	subs	r3, #1
   b55ea:	9300      	str	r3, [sp, #0]
   b55ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b55f0:	9b05      	ldr	r3, [sp, #20]
   b55f2:	4622      	mov	r2, r4
   b55f4:	2114      	movs	r1, #20
   b55f6:	4628      	mov	r0, r5
   b55f8:	f7ff ff06 	bl	b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b55fc:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b5600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5602:	bf00      	nop
   b5604:	000ba02a 	.word	0x000ba02a

000b5608 <loop>:
{
   b5608:	b5f0      	push	{r4, r5, r6, r7, lr}
  Blynk.run();
   b560a:	2100      	movs	r1, #0
{
   b560c:	b087      	sub	sp, #28
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b560e:	4c5a      	ldr	r4, [pc, #360]	; (b5778 <loop+0x170>)
  Blynk.run();
   b5610:	485a      	ldr	r0, [pc, #360]	; (b577c <loop+0x174>)
  lightLevel = distanceSensor.getAmbient();
   b5612:	4f5b      	ldr	r7, [pc, #364]	; (b5780 <loop+0x178>)
  distance = distanceSensor.getProximity();
   b5614:	4d5b      	ldr	r5, [pc, #364]	; (b5784 <loop+0x17c>)
  Blynk.run();
   b5616:	f7ff fe4f 	bl	b52b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b561a:	2300      	movs	r3, #0
   b561c:	6123      	str	r3, [r4, #16]
  update();
   b561e:	f7ff fa63 	bl	b4ae8 <_Z6updatev>
  display.loop();
   b5622:	4620      	mov	r0, r4
   b5624:	f001 fc45 	bl	b6eb2 <_ZN16OledWingAdafruit4loopEv>
  display.clearDisplay();
   b5628:	4620      	mov	r0, r4
   b562a:	f000 ff01 	bl	b6430 <_ZN16Adafruit_SSD130612clearDisplayEv>
  lightLevel = distanceSensor.getAmbient();
   b562e:	4856      	ldr	r0, [pc, #344]	; (b5788 <loop+0x180>)
   b5630:	f001 fa9c 	bl	b6b6c <_ZN8VCNL404010getAmbientEv>
   b5634:	6038      	str	r0, [r7, #0]
  distance = distanceSensor.getProximity();
   b5636:	4854      	ldr	r0, [pc, #336]	; (b5788 <loop+0x180>)
   b5638:	f001 fa95 	bl	b6b66 <_ZN8VCNL404012getProximityEv>
   b563c:	6028      	str	r0, [r5, #0]
  if (display.pressedA())
   b563e:	4620      	mov	r0, r4
   b5640:	f001 fc50 	bl	b6ee4 <_ZN16OledWingAdafruit8pressedAEv>
   b5644:	4c51      	ldr	r4, [pc, #324]	; (b578c <loop+0x184>)
   b5646:	b118      	cbz	r0, b5650 <loop+0x48>
    buttonAToggle = !buttonAToggle;
   b5648:	7823      	ldrb	r3, [r4, #0]
   b564a:	f083 0301 	eor.w	r3, r3, #1
   b564e:	7023      	strb	r3, [r4, #0]
  if (display.pressedB())
   b5650:	4849      	ldr	r0, [pc, #292]	; (b5778 <loop+0x170>)
   b5652:	4e4f      	ldr	r6, [pc, #316]	; (b5790 <loop+0x188>)
   b5654:	f001 fc50 	bl	b6ef8 <_ZN16OledWingAdafruit8pressedBEv>
   b5658:	b118      	cbz	r0, b5662 <loop+0x5a>
    buttonBToggle = !buttonBToggle;
   b565a:	7833      	ldrb	r3, [r6, #0]
   b565c:	f083 0301 	eor.w	r3, r3, #1
   b5660:	7033      	strb	r3, [r6, #0]
  if (display.pressedC())
   b5662:	4845      	ldr	r0, [pc, #276]	; (b5778 <loop+0x170>)
   b5664:	f001 fc52 	bl	b6f0c <_ZN16OledWingAdafruit8pressedCEv>
   b5668:	4b4a      	ldr	r3, [pc, #296]	; (b5794 <loop+0x18c>)
   b566a:	b118      	cbz	r0, b5674 <loop+0x6c>
    buttonCToggle = !buttonCToggle;
   b566c:	781a      	ldrb	r2, [r3, #0]
   b566e:	f082 0201 	eor.w	r2, r2, #1
   b5672:	701a      	strb	r2, [r3, #0]
  if (buttonCToggle)
   b5674:	781a      	ldrb	r2, [r3, #0]
   b5676:	2a00      	cmp	r2, #0
   b5678:	d072      	beq.n	b5760 <loop+0x158>
    Blynk.virtualWrite(virtualDistancePin, distance);
   b567a:	682a      	ldr	r2, [r5, #0]
   b567c:	483f      	ldr	r0, [pc, #252]	; (b577c <loop+0x174>)
   b567e:	2100      	movs	r1, #0
   b5680:	f7ff ff98 	bl	b55b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    Blynk.virtualWrite(virtualLightLevelPin, lightLevel);
   b5684:	683a      	ldr	r2, [r7, #0]
   b5686:	483d      	ldr	r0, [pc, #244]	; (b577c <loop+0x174>)
   b5688:	2101      	movs	r1, #1
   b568a:	f7ff ff93 	bl	b55b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    Blynk.virtualWrite(virtualIsInformationPin, true);
   b568e:	2201      	movs	r2, #1
   b5690:	483a      	ldr	r0, [pc, #232]	; (b577c <loop+0x174>)
   b5692:	2102      	movs	r1, #2
   b5694:	f7ff ff8e 	bl	b55b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
    buttonBToggle = false;
   b5698:	2300      	movs	r3, #0
    printMsgToOled("Information on Blynk app");
   b569a:	493f      	ldr	r1, [pc, #252]	; (b5798 <loop+0x190>)
    buttonBToggle = false;
   b569c:	7033      	strb	r3, [r6, #0]
    printMsgToOled("Information on Blynk app");
   b569e:	a802      	add	r0, sp, #8
    buttonAToggle = false;
   b56a0:	7023      	strb	r3, [r4, #0]
    printMsgToOled("Information on Blynk app");
   b56a2:	f002 fb16 	bl	b7cd2 <_ZN6StringC1EPK19__FlashStringHelper>
   b56a6:	a802      	add	r0, sp, #8
   b56a8:	f7ff fa8e 	bl	b4bc8 <_Z14printMsgToOled6String>
   b56ac:	a802      	add	r0, sp, #8
   b56ae:	f002 fac5 	bl	b7c3c <_ZN6StringD1Ev>
  if (buttonBToggle)
   b56b2:	7833      	ldrb	r3, [r6, #0]
   b56b4:	b1a3      	cbz	r3, b56e0 <loop+0xd8>
    printMsgToOled("Light Level:");
   b56b6:	4939      	ldr	r1, [pc, #228]	; (b579c <loop+0x194>)
   b56b8:	a802      	add	r0, sp, #8
   b56ba:	f002 fb0a 	bl	b7cd2 <_ZN6StringC1EPK19__FlashStringHelper>
   b56be:	a802      	add	r0, sp, #8
   b56c0:	f7ff fa82 	bl	b4bc8 <_Z14printMsgToOled6String>
   b56c4:	a802      	add	r0, sp, #8
   b56c6:	f002 fab9 	bl	b7c3c <_ZN6StringD1Ev>
    printMsgToOled((String)lightLevel);
   b56ca:	6839      	ldr	r1, [r7, #0]
   b56cc:	220a      	movs	r2, #10
   b56ce:	a802      	add	r0, sp, #8
   b56d0:	f002 fb25 	bl	b7d1e <_ZN6StringC1Eih>
   b56d4:	a802      	add	r0, sp, #8
   b56d6:	f7ff fa77 	bl	b4bc8 <_Z14printMsgToOled6String>
   b56da:	a802      	add	r0, sp, #8
   b56dc:	f002 faae 	bl	b7c3c <_ZN6StringD1Ev>
  if (buttonAToggle)
   b56e0:	7823      	ldrb	r3, [r4, #0]
   b56e2:	b1a3      	cbz	r3, b570e <loop+0x106>
    printMsgToOled("Distance:");
   b56e4:	492e      	ldr	r1, [pc, #184]	; (b57a0 <loop+0x198>)
   b56e6:	a802      	add	r0, sp, #8
   b56e8:	f002 faf3 	bl	b7cd2 <_ZN6StringC1EPK19__FlashStringHelper>
   b56ec:	a802      	add	r0, sp, #8
   b56ee:	f7ff fa6b 	bl	b4bc8 <_Z14printMsgToOled6String>
   b56f2:	a802      	add	r0, sp, #8
   b56f4:	f002 faa2 	bl	b7c3c <_ZN6StringD1Ev>
    printMsgToOled((String)distance);
   b56f8:	6829      	ldr	r1, [r5, #0]
   b56fa:	220a      	movs	r2, #10
   b56fc:	a802      	add	r0, sp, #8
   b56fe:	f002 fb0e 	bl	b7d1e <_ZN6StringC1Eih>
   b5702:	a802      	add	r0, sp, #8
   b5704:	f7ff fa60 	bl	b4bc8 <_Z14printMsgToOled6String>
   b5708:	a802      	add	r0, sp, #8
   b570a:	f002 fa97 	bl	b7c3c <_ZN6StringD1Ev>
      lightsInGroup[i].val = false;
   b570e:	4e25      	ldr	r6, [pc, #148]	; (b57a4 <loop+0x19c>)
   b5710:	6833      	ldr	r3, [r6, #0]
   b5712:	2400      	movs	r4, #0
   b5714:	701c      	strb	r4, [r3, #0]
   b5716:	6833      	ldr	r3, [r6, #0]
  distanceCheck = int(nthRoot(distance - 20, 5) / 1.3);
   b5718:	6828      	ldr	r0, [r5, #0]
   b571a:	711c      	strb	r4, [r3, #4]
   b571c:	721c      	strb	r4, [r3, #8]
   b571e:	2105      	movs	r1, #5
   b5720:	3814      	subs	r0, #20
   b5722:	f7ff fa63 	bl	b4bec <_Z7nthRootii>
   b5726:	a312      	add	r3, pc, #72	; (adr r3, b5770 <loop+0x168>)
   b5728:	e9d3 2300 	ldrd	r2, r3, [r3]
   b572c:	ec51 0b10 	vmov	r0, r1, d0
   b5730:	f7fe ff5c 	bl	b45ec <__aeabi_ddiv>
   b5734:	f7ff f8e0 	bl	b48f8 <__aeabi_d2iz>
   b5738:	4d1b      	ldr	r5, [pc, #108]	; (b57a8 <loop+0x1a0>)
  distanceCheck = map(distanceCheck, 0, 8, 0, 4);
   b573a:	2304      	movs	r3, #4
  distanceCheck = int(nthRoot(distance - 20, 5) / 1.3);
   b573c:	6028      	str	r0, [r5, #0]
  distanceCheck = map(distanceCheck, 0, 8, 0, 4);
   b573e:	2208      	movs	r2, #8
   b5740:	9300      	str	r3, [sp, #0]
   b5742:	4621      	mov	r1, r4
   b5744:	4623      	mov	r3, r4
   b5746:	f001 fed7 	bl	b74f8 <_Z3mapiiiii>
    lightsInGroup[index].val = true;
   b574a:	6833      	ldr	r3, [r6, #0]
   b574c:	6028      	str	r0, [r5, #0]
   b574e:	2201      	movs	r2, #1
   b5750:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
  display.display();
   b5754:	4808      	ldr	r0, [pc, #32]	; (b5778 <loop+0x170>)
}
   b5756:	b007      	add	sp, #28
   b5758:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  display.display();
   b575c:	f001 b8d6 	b.w	b690c <_ZN16Adafruit_SSD13067displayEv>
    Blynk.virtualWrite(virtualIsInformationPin, false);
   b5760:	4806      	ldr	r0, [pc, #24]	; (b577c <loop+0x174>)
   b5762:	2102      	movs	r1, #2
   b5764:	f7ff ff26 	bl	b55b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
   b5768:	e7a3      	b.n	b56b2 <loop+0xaa>
   b576a:	bf00      	nop
   b576c:	f3af 8000 	nop.w
   b5770:	cccccccd 	.word	0xcccccccd
   b5774:	3ff4cccc 	.word	0x3ff4cccc
   b5778:	2003e620 	.word	0x2003e620
   b577c:	2003e5b8 	.word	0x2003e5b8
   b5780:	2003e69c 	.word	0x2003e69c
   b5784:	2003e690 	.word	0x2003e690
   b5788:	2003e698 	.word	0x2003e698
   b578c:	2003e614 	.word	0x2003e614
   b5790:	2003e615 	.word	0x2003e615
   b5794:	2003e616 	.word	0x2003e616
   b5798:	000ba02d 	.word	0x000ba02d
   b579c:	000ba046 	.word	0x000ba046
   b57a0:	000ba053 	.word	0x000ba053
   b57a4:	2003e618 	.word	0x2003e618
   b57a8:	2003e694 	.word	0x2003e694

000b57ac <setup>:
{
   b57ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  closeVeryCloseFar.initialize(pinsForLEDGroup);
   b57ae:	4930      	ldr	r1, [pc, #192]	; (b5870 <setup+0xc4>)
   b57b0:	4830      	ldr	r0, [pc, #192]	; (b5874 <setup+0xc8>)
        this->authkey = auth;
   b57b2:	4c31      	ldr	r4, [pc, #196]	; (b5878 <setup+0xcc>)
   b57b4:	f7ff faa0 	bl	b4cf8 <_ZN8LEDGroup10initializeEPt>
  display.setup();
   b57b8:	4830      	ldr	r0, [pc, #192]	; (b587c <setup+0xd0>)
   b57ba:	f001 fb51 	bl	b6e60 <_ZN16OledWingAdafruit5setupEv>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b57be:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b57c2:	f001 fae9 	bl	b6d98 <_Z10BlynkDelaym>
   b57c6:	4b2e      	ldr	r3, [pc, #184]	; (b5880 <setup+0xd4>)
   b57c8:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b57ca:	f001 fae7 	bl	b6d9c <_Z11BlynkMillisv>
   b57ce:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b57d2:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b57d4:	4a2b      	ldr	r2, [pc, #172]	; (b5884 <setup+0xd8>)
   b57d6:	635a      	str	r2, [r3, #52]	; 0x34
   b57d8:	3808      	subs	r0, #8
   b57da:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b57de:	2250      	movs	r2, #80	; 0x50
   b57e0:	6160      	str	r0, [r4, #20]
   b57e2:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b57e4:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b57e6:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b57ea:	6820      	ldr	r0, [r4, #0]
   b57ec:	f002 fd4e 	bl	b828c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b57f0:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b57f2:	f001 fad3 	bl	b6d9c <_Z11BlynkMillisv>
   b57f6:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b57f8:	7f63      	ldrb	r3, [r4, #29]
   b57fa:	2b01      	cmp	r3, #1
   b57fc:	d00c      	beq.n	b5818 <setup+0x6c>
               (BlynkMillis() - started < timeout))
   b57fe:	f001 facd 	bl	b6d9c <_Z11BlynkMillisv>
   b5802:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b5804:	42b8      	cmp	r0, r7
   b5806:	d804      	bhi.n	b5812 <setup+0x66>
            run();
   b5808:	2100      	movs	r1, #0
   b580a:	4620      	mov	r0, r4
   b580c:	f7ff fd54 	bl	b52b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5810:	e7f2      	b.n	b57f8 <setup+0x4c>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5812:	7f63      	ldrb	r3, [r4, #29]
   b5814:	2b01      	cmp	r3, #1
   b5816:	d1e8      	bne.n	b57ea <setup+0x3e>
  display.clearDisplay();
   b5818:	4818      	ldr	r0, [pc, #96]	; (b587c <setup+0xd0>)
   b581a:	f000 fe09 	bl	b6430 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b581e:	4817      	ldr	r0, [pc, #92]	; (b587c <setup+0xd0>)
   b5820:	f001 f874 	bl	b690c <_ZN16Adafruit_SSD13067displayEv>
  Wire.begin();
   b5824:	f003 f86e 	bl	b8904 <_Z19__fetch_global_Wirev>
   b5828:	f001 ff0a 	bl	b7640 <_ZN7TwoWire5beginEv>
  Serial.begin(9600);
   b582c:	f002 fe4a 	bl	b84c4 <_Z16_fetch_usbserialv>
   b5830:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5834:	f002 fe36 	bl	b84a4 <_ZN9USBSerial5beginEl>
  while (!Serial.isConnected())
   b5838:	f002 fe44 	bl	b84c4 <_Z16_fetch_usbserialv>
   b583c:	f002 fe36 	bl	b84ac <_ZN9USBSerial11isConnectedEv>
   b5840:	2800      	cmp	r0, #0
   b5842:	d0f9      	beq.n	b5838 <setup+0x8c>
  if (!distanceSensor.begin())
   b5844:	f003 f85e 	bl	b8904 <_Z19__fetch_global_Wirev>
   b5848:	4601      	mov	r1, r0
   b584a:	480f      	ldr	r0, [pc, #60]	; (b5888 <setup+0xdc>)
   b584c:	f001 fa79 	bl	b6d42 <_ZN8VCNL40405beginER7TwoWire>
   b5850:	b928      	cbnz	r0, b585e <setup+0xb2>
    Serial.println("Not Connected");
   b5852:	f002 fe37 	bl	b84c4 <_Z16_fetch_usbserialv>
   b5856:	490d      	ldr	r1, [pc, #52]	; (b588c <setup+0xe0>)
   b5858:	f002 f8b5 	bl	b79c6 <_ZN5Print7printlnEPKc>
    while (1)
   b585c:	e7fe      	b.n	b585c <setup+0xb0>
  distanceSensor.powerOnAmbient();
   b585e:	480a      	ldr	r0, [pc, #40]	; (b5888 <setup+0xdc>)
   b5860:	f001 fa02 	bl	b6c68 <_ZN8VCNL404014powerOnAmbientEv>
}
   b5864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  distanceSensor.powerOnProximity();
   b5868:	4807      	ldr	r0, [pc, #28]	; (b5888 <setup+0xdc>)
   b586a:	f001 ba20 	b.w	b6cae <_ZN8VCNL404016powerOnProximityEv>
   b586e:	bf00      	nop
   b5870:	2003e540 	.word	0x2003e540
   b5874:	2003e618 	.word	0x2003e618
   b5878:	2003e5b8 	.word	0x2003e5b8
   b587c:	2003e620 	.word	0x2003e620
   b5880:	000ba05d 	.word	0x000ba05d
   b5884:	000ba07e 	.word	0x000ba07e
   b5888:	2003e698 	.word	0x2003e698
   b588c:	000ba08a 	.word	0x000ba08a

000b5890 <_GLOBAL__sub_I_updates>:
   b5890:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5892:	4b15      	ldr	r3, [pc, #84]	; (b58e8 <_GLOBAL__sub_I_updates+0x58>)
        : domain(NULL), port(0)
   b5894:	4d15      	ldr	r5, [pc, #84]	; (b58ec <_GLOBAL__sub_I_updates+0x5c>)
   b5896:	2400      	movs	r4, #0
   b5898:	e9c3 4400 	strd	r4, r4, [r3]
   b589c:	609c      	str	r4, [r3, #8]
   b589e:	4628      	mov	r0, r5
   b58a0:	f002 fd3e 	bl	b8320 <_ZN9TCPClientC1Ev>
   b58a4:	f105 001c 	add.w	r0, r5, #28
   b58a8:	f001 ff44 	bl	b7734 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b58ac:	4b10      	ldr	r3, [pc, #64]	; (b58f0 <_GLOBAL__sub_I_updates+0x60>)
   b58ae:	636c      	str	r4, [r5, #52]	; 0x34
   b58b0:	e9c3 5400 	strd	r5, r4, [r3]
   b58b4:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b58b8:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b58bc:	619c      	str	r4, [r3, #24]
   b58be:	839c      	strh	r4, [r3, #28]
SYSTEM_THREAD(ENABLED);
   b58c0:	4621      	mov	r1, r4
   b58c2:	2001      	movs	r0, #1
   b58c4:	872c      	strh	r4, [r5, #56]	; 0x38
   b58c6:	f001 fd43 	bl	b7350 <system_thread_set_state>
VCNL4040 distanceSensor;
   b58ca:	480a      	ldr	r0, [pc, #40]	; (b58f4 <_GLOBAL__sub_I_updates+0x64>)
   b58cc:	f001 f911 	bl	b6af2 <_ZN8VCNL4040C1Ev>
OledWingAdafruit display;
   b58d0:	4809      	ldr	r0, [pc, #36]	; (b58f8 <_GLOBAL__sub_I_updates+0x68>)
   b58d2:	2107      	movs	r1, #7
   b58d4:	f001 fa96 	bl	b6e04 <_ZN16OledWingAdafruitC1Ei>
class LED
   b58d8:	4b08      	ldr	r3, [pc, #32]	; (b58fc <_GLOBAL__sub_I_updates+0x6c>)
  {
   b58da:	4a09      	ldr	r2, [pc, #36]	; (b5900 <_GLOBAL__sub_I_updates+0x70>)
class LED
   b58dc:	701c      	strb	r4, [r3, #0]
    lightsInGroup = array;
   b58de:	e9c2 3400 	strd	r3, r4, [r2]
class LED
   b58e2:	711c      	strb	r4, [r3, #4]
   b58e4:	721c      	strb	r4, [r3, #8]
   b58e6:	bd38      	pop	{r3, r4, r5, pc}
   b58e8:	2003e6ac 	.word	0x2003e6ac
   b58ec:	2003e5d8 	.word	0x2003e5d8
   b58f0:	2003e5b8 	.word	0x2003e5b8
   b58f4:	2003e698 	.word	0x2003e698
   b58f8:	2003e620 	.word	0x2003e620
   b58fc:	2003e6a0 	.word	0x2003e6a0
   b5900:	2003e618 	.word	0x2003e618

000b5904 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5908:	b085      	sub	sp, #20
   b590a:	461f      	mov	r7, r3
   b590c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5910:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5914:	eba8 0902 	sub.w	r9, r8, r2
   b5918:	eba7 0a01 	sub.w	sl, r7, r1
   b591c:	f1b9 0f00 	cmp.w	r9, #0
   b5920:	bfb8      	it	lt
   b5922:	f1c9 0900 	rsblt	r9, r9, #0
   b5926:	f1ba 0f00 	cmp.w	sl, #0
   b592a:	bfb8      	it	lt
   b592c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5930:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5932:	4683      	mov	fp, r0
   b5934:	460c      	mov	r4, r1
   b5936:	4615      	mov	r5, r2
    if (steep) {
   b5938:	dd04      	ble.n	b5944 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b593a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b593c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b593e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5940:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5942:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5944:	42bc      	cmp	r4, r7
   b5946:	dd05      	ble.n	b5954 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5948:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b594a:	4645      	mov	r5, r8
   b594c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b594e:	4622      	mov	r2, r4
   b5950:	463c      	mov	r4, r7
   b5952:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5954:	1b3e      	subs	r6, r7, r4
   b5956:	b2b2      	uxth	r2, r6
   b5958:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b595a:	eba8 0205 	sub.w	r2, r8, r5
   b595e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5962:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5966:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b596a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b596e:	4545      	cmp	r5, r8
   b5970:	bfb4      	ite	lt
   b5972:	2201      	movlt	r2, #1
   b5974:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5978:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b597a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b597c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b597e:	42bc      	cmp	r4, r7
   b5980:	dc1c      	bgt.n	b59bc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5982:	f8db 2000 	ldr.w	r2, [fp]
   b5986:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5988:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b598a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b598e:	bfc7      	ittee	gt
   b5990:	4629      	movgt	r1, r5
   b5992:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5994:	462a      	movle	r2, r5
   b5996:	4621      	movle	r1, r4
   b5998:	4658      	mov	r0, fp
   b599a:	47c0      	blx	r8
        }
        err -= dy;
   b599c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b599e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b59a0:	1ab6      	subs	r6, r6, r2
   b59a2:	b2b1      	uxth	r1, r6
   b59a4:	b236      	sxth	r6, r6
        if (err < 0) {
   b59a6:	2e00      	cmp	r6, #0
   b59a8:	da05      	bge.n	b59b6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b59aa:	9a02      	ldr	r2, [sp, #8]
   b59ac:	4415      	add	r5, r2
            err += dx;
   b59ae:	9a00      	ldr	r2, [sp, #0]
   b59b0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b59b2:	b22d      	sxth	r5, r5
            err += dx;
   b59b4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b59b6:	3401      	adds	r4, #1
   b59b8:	b224      	sxth	r4, r4
   b59ba:	e7e0      	b.n	b597e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b59bc:	b005      	add	sp, #20
   b59be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b59c2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b59c2:	4770      	bx	lr

000b59c4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b59c4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b59c6:	6804      	ldr	r4, [r0, #0]
   b59c8:	6924      	ldr	r4, [r4, #16]
   b59ca:	46a4      	mov	ip, r4
}
   b59cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b59d0:	4760      	bx	ip

000b59d2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b59d2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b59d4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b59d6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b59da:	9502      	str	r5, [sp, #8]
   b59dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b59de:	46a4      	mov	ip, r4
}
   b59e0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b59e2:	4760      	bx	ip

000b59e4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b59e4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b59e6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b59e8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b59ec:	9502      	str	r5, [sp, #8]
   b59ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b59f0:	46a4      	mov	ip, r4
}
   b59f2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b59f4:	4760      	bx	ip

000b59f6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b59f6:	b470      	push	{r4, r5, r6}
   b59f8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b59fc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5a00:	6804      	ldr	r4, [r0, #0]
   b5a02:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5a06:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5a08:	46a4      	mov	ip, r4
}
   b5a0a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5a0c:	4760      	bx	ip

000b5a0e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5a0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a12:	461c      	mov	r4, r3
    startWrite();
   b5a14:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5a16:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5a1a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5a1c:	4605      	mov	r5, r0
   b5a1e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5a20:	3c01      	subs	r4, #1
   b5a22:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5a24:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5a26:	b224      	sxth	r4, r4
    startWrite();
   b5a28:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5a2a:	682b      	ldr	r3, [r5, #0]
   b5a2c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5a30:	9400      	str	r4, [sp, #0]
   b5a32:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5a34:	4628      	mov	r0, r5
   b5a36:	463b      	mov	r3, r7
   b5a38:	4632      	mov	r2, r6
   b5a3a:	4639      	mov	r1, r7
   b5a3c:	47a0      	blx	r4
    endWrite();
   b5a3e:	682b      	ldr	r3, [r5, #0]
   b5a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a42:	4628      	mov	r0, r5
}
   b5a44:	b002      	add	sp, #8
   b5a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5a4a:	4718      	bx	r3

000b5a4c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5a4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a50:	461d      	mov	r5, r3
    startWrite();
   b5a52:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5a54:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5a58:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5a5a:	4604      	mov	r4, r0
   b5a5c:	4617      	mov	r7, r2
   b5a5e:	460e      	mov	r6, r1
    startWrite();
   b5a60:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5a62:	e9cd 7800 	strd	r7, r8, [sp]
   b5a66:	6822      	ldr	r2, [r4, #0]
   b5a68:	1e6b      	subs	r3, r5, #1
   b5a6a:	4433      	add	r3, r6
   b5a6c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5a6e:	4620      	mov	r0, r4
   b5a70:	b21b      	sxth	r3, r3
   b5a72:	463a      	mov	r2, r7
   b5a74:	4631      	mov	r1, r6
   b5a76:	47a8      	blx	r5
    endWrite();
   b5a78:	6823      	ldr	r3, [r4, #0]
   b5a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a7c:	4620      	mov	r0, r4
}
   b5a7e:	b002      	add	sp, #8
   b5a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5a84:	4718      	bx	r3

000b5a86 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5a86:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5a8a:	461e      	mov	r6, r3
    startWrite();
   b5a8c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5a8e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5a92:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5a94:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5a98:	460c      	mov	r4, r1
   b5a9a:	4605      	mov	r5, r0
   b5a9c:	4617      	mov	r7, r2
    startWrite();
   b5a9e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5aa0:	4426      	add	r6, r4
   b5aa2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5aa4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5aa6:	da0b      	bge.n	b5ac0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5aa8:	f8cd 8000 	str.w	r8, [sp]
   b5aac:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5ab0:	4621      	mov	r1, r4
   b5ab2:	464b      	mov	r3, r9
   b5ab4:	463a      	mov	r2, r7
   b5ab6:	4628      	mov	r0, r5
   b5ab8:	3401      	adds	r4, #1
   b5aba:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5abc:	b224      	sxth	r4, r4
   b5abe:	e7f0      	b.n	b5aa2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ac2:	4628      	mov	r0, r5
}
   b5ac4:	b002      	add	sp, #8
   b5ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5aca:	4718      	bx	r3

000b5acc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5acc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5ace:	6802      	ldr	r2, [r0, #0]
   b5ad0:	9101      	str	r1, [sp, #4]
   b5ad2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5ad6:	9100      	str	r1, [sp, #0]
   b5ad8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5ada:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5ade:	2200      	movs	r2, #0
   b5ae0:	4611      	mov	r1, r2
   b5ae2:	47a0      	blx	r4
}
   b5ae4:	b002      	add	sp, #8
   b5ae6:	bd10      	pop	{r4, pc}

000b5ae8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5aec:	4299      	cmp	r1, r3
        uint16_t color) {
   b5aee:	4616      	mov	r6, r2
   b5af0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5af4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5af8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5afa:	4680      	mov	r8, r0
   b5afc:	460d      	mov	r5, r1
   b5afe:	461c      	mov	r4, r3
    if(x0 == x1){
   b5b00:	d113      	bne.n	b5b2a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5b02:	42be      	cmp	r6, r7
   b5b04:	bfc8      	it	gt
   b5b06:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b08:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5b0c:	bfc4      	itt	gt
   b5b0e:	463e      	movgt	r6, r7
   b5b10:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b12:	1c7b      	adds	r3, r7, #1
   b5b14:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5b16:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b18:	b21b      	sxth	r3, r3
   b5b1a:	4632      	mov	r2, r6
   b5b1c:	4629      	mov	r1, r5
   b5b1e:	4640      	mov	r0, r8
   b5b20:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5b22:	b003      	add	sp, #12
   b5b24:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b28:	4760      	bx	ip
    } else if(y0 == y1){
   b5b2a:	42be      	cmp	r6, r7
   b5b2c:	d10a      	bne.n	b5b44 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5b2e:	4299      	cmp	r1, r3
   b5b30:	bfc2      	ittt	gt
   b5b32:	460b      	movgt	r3, r1
   b5b34:	4625      	movgt	r5, r4
   b5b36:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b38:	1c63      	adds	r3, r4, #1
   b5b3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5b3e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5b40:	1b5b      	subs	r3, r3, r5
   b5b42:	e7e9      	b.n	b5b18 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5b44:	6953      	ldr	r3, [r2, #20]
   b5b46:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5b48:	e9cd 7900 	strd	r7, r9, [sp]
   b5b4c:	f8d8 3000 	ldr.w	r3, [r8]
   b5b50:	4640      	mov	r0, r8
   b5b52:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5b54:	4632      	mov	r2, r6
   b5b56:	4623      	mov	r3, r4
   b5b58:	4629      	mov	r1, r5
   b5b5a:	47b8      	blx	r7
        endWrite();
   b5b5c:	f8d8 3000 	ldr.w	r3, [r8]
   b5b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b62:	4640      	mov	r0, r8
}
   b5b64:	b003      	add	sp, #12
   b5b66:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5b6a:	4718      	bx	r3

000b5b6c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5b6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5b70:	461d      	mov	r5, r3
    startWrite();
   b5b72:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5b74:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5b78:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5b7a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5b7e:	4604      	mov	r4, r0
   b5b80:	460f      	mov	r7, r1
   b5b82:	4616      	mov	r6, r2
    startWrite();
   b5b84:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5b86:	6823      	ldr	r3, [r4, #0]
   b5b88:	f8cd 8000 	str.w	r8, [sp]
   b5b8c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5b90:	4632      	mov	r2, r6
   b5b92:	462b      	mov	r3, r5
   b5b94:	4639      	mov	r1, r7
   b5b96:	4620      	mov	r0, r4
   b5b98:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5b9a:	6823      	ldr	r3, [r4, #0]
   b5b9c:	f8cd 8000 	str.w	r8, [sp]
   b5ba0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5ba4:	4432      	add	r2, r6
   b5ba6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5baa:	4639      	mov	r1, r7
   b5bac:	462b      	mov	r3, r5
   b5bae:	4620      	mov	r0, r4
   b5bb0:	b212      	sxth	r2, r2
   b5bb2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5bb4:	6823      	ldr	r3, [r4, #0]
   b5bb6:	f8cd 8000 	str.w	r8, [sp]
   b5bba:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5bbe:	4632      	mov	r2, r6
   b5bc0:	464b      	mov	r3, r9
   b5bc2:	4639      	mov	r1, r7
   b5bc4:	4620      	mov	r0, r4
   b5bc6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5bc8:	1e6b      	subs	r3, r5, #1
   b5bca:	19d9      	adds	r1, r3, r7
   b5bcc:	6823      	ldr	r3, [r4, #0]
   b5bce:	f8cd 8000 	str.w	r8, [sp]
   b5bd2:	6a1d      	ldr	r5, [r3, #32]
   b5bd4:	4620      	mov	r0, r4
   b5bd6:	464b      	mov	r3, r9
   b5bd8:	4632      	mov	r2, r6
   b5bda:	b209      	sxth	r1, r1
   b5bdc:	47a8      	blx	r5
    endWrite();
   b5bde:	6823      	ldr	r3, [r4, #0]
   b5be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5be2:	4620      	mov	r0, r4
}
   b5be4:	b002      	add	sp, #8
   b5be6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5bea:	4718      	bx	r3

000b5bec <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5bec:	4770      	bx	lr

000b5bee <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5bee:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5bf2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5bf6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5bf8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5bfa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5bfe:	bf59      	ittee	pl
   b5c00:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5c02:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5c04:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5c06:	81c3      	strhmi	r3, [r0, #14]
}
   b5c08:	4770      	bx	lr
	...

000b5c0c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5c0c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5c0e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5c10:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5c12:	4a07      	ldr	r2, [pc, #28]	; (b5c30 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5c14:	4d07      	ldr	r5, [pc, #28]	; (b5c34 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5c16:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b5c18:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5c1a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5c20:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5c24:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5c26:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5c28:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5c2a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5c2c:	6204      	str	r4, [r0, #32]
}
   b5c2e:	bd30      	pop	{r4, r5, pc}
   b5c30:	01000101 	.word	0x01000101
   b5c34:	000ba610 	.word	0x000ba610

000b5c38 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c3c:	b089      	sub	sp, #36	; 0x24
   b5c3e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5c42:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c44:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5c48:	9304      	str	r3, [sp, #16]
   b5c4a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5c4e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c50:	9305      	str	r3, [sp, #20]
   b5c52:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5c56:	4604      	mov	r4, r0
    startWrite();
   b5c58:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5c5a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5c5e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5c62:	bf48      	it	mi
   b5c64:	f108 020e 	addmi.w	r2, r8, #14
   b5c68:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5c6c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5c6e:	4635      	mov	r5, r6
   b5c70:	9b03      	ldr	r3, [sp, #12]
   b5c72:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5c74:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5c78:	189a      	adds	r2, r3, r2
   b5c7a:	9b05      	ldr	r3, [sp, #20]
   b5c7c:	428b      	cmp	r3, r1
   b5c7e:	b212      	sxth	r2, r2
   b5c80:	dd27      	ble.n	b5cd2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c82:	9b04      	ldr	r3, [sp, #16]
   b5c84:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5c86:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c8a:	9306      	str	r3, [sp, #24]
   b5c8c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5c90:	4580      	cmp	r8, r0
   b5c92:	fa1f f189 	uxth.w	r1, r9
   b5c96:	dd17      	ble.n	b5cc8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5c98:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5c9a:	bf05      	ittet	eq
   b5c9c:	9b06      	ldreq	r3, [sp, #24]
   b5c9e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5ca0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5ca2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5ca4:	bf18      	it	ne
   b5ca6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5ca8:	062b      	lsls	r3, r5, #24
   b5caa:	d50a      	bpl.n	b5cc2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5cac:	9b02      	ldr	r3, [sp, #8]
   b5cae:	6820      	ldr	r0, [r4, #0]
   b5cb0:	9207      	str	r2, [sp, #28]
   b5cb2:	4419      	add	r1, r3
   b5cb4:	6983      	ldr	r3, [r0, #24]
   b5cb6:	b209      	sxth	r1, r1
   b5cb8:	461f      	mov	r7, r3
   b5cba:	4620      	mov	r0, r4
   b5cbc:	4653      	mov	r3, sl
   b5cbe:	47b8      	blx	r7
   b5cc0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5cc2:	f109 0901 	add.w	r9, r9, #1
   b5cc6:	e7e1      	b.n	b5c8c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5cc8:	9b01      	ldr	r3, [sp, #4]
   b5cca:	3301      	adds	r3, #1
   b5ccc:	9301      	str	r3, [sp, #4]
   b5cce:	445e      	add	r6, fp
   b5cd0:	e7ce      	b.n	b5c70 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5cd2:	6823      	ldr	r3, [r4, #0]
   b5cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cd6:	4620      	mov	r0, r4
}
   b5cd8:	b009      	add	sp, #36	; 0x24
   b5cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5cde:	4718      	bx	r3

000b5ce0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ce4:	ed2d 8b02 	vpush	{d8}
   b5ce8:	b091      	sub	sp, #68	; 0x44
   b5cea:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5cec:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5cee:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5cf2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5cf6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5cfa:	9103      	str	r1, [sp, #12]
   b5cfc:	461f      	mov	r7, r3
   b5cfe:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5d02:	9304      	str	r3, [sp, #16]
   b5d04:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5d06:	2a00      	cmp	r2, #0
   b5d08:	f040 80c5 	bne.w	b5e96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5d0c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5d10:	428b      	cmp	r3, r1
   b5d12:	f340 814c 	ble.w	b5fae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5d16:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5d1a:	42b3      	cmp	r3, r6
   b5d1c:	f340 8147 	ble.w	b5fae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5d20:	2306      	movs	r3, #6
   b5d22:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5d26:	2b00      	cmp	r3, #0
   b5d28:	f340 8141 	ble.w	b5fae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5d2c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5d30:	2b00      	cmp	r3, #0
   b5d32:	f340 813c 	ble.w	b5fae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5d36:	7f03      	ldrb	r3, [r0, #28]
   b5d38:	b91b      	cbnz	r3, b5d42 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5d3a:	2faf      	cmp	r7, #175	; 0xaf
   b5d3c:	bf84      	itt	hi
   b5d3e:	3701      	addhi	r7, #1
   b5d40:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5d42:	f8db 3000 	ldr.w	r3, [fp]
   b5d46:	4658      	mov	r0, fp
   b5d48:	695b      	ldr	r3, [r3, #20]
   b5d4a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d4c:	2205      	movs	r2, #5
   b5d4e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5d50:	2200      	movs	r2, #0
   b5d52:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d54:	4a98      	ldr	r2, [pc, #608]	; (b5fb8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5d56:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5d5a:	18d3      	adds	r3, r2, r3
   b5d5c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5d5e:	b2b3      	uxth	r3, r6
   b5d60:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d62:	9a05      	ldr	r2, [sp, #20]
   b5d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5d66:	5c9b      	ldrb	r3, [r3, r2]
   b5d68:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5d6a:	b2ab      	uxth	r3, r5
   b5d6c:	930b      	str	r3, [sp, #44]	; 0x2c
   b5d6e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5d72:	9308      	str	r3, [sp, #32]
   b5d74:	9b03      	ldr	r3, [sp, #12]
   b5d76:	fb02 f905 	mul.w	r9, r2, r5
   b5d7a:	fa19 f983 	uxtah	r9, r9, r3
   b5d7e:	fa0f f389 	sxth.w	r3, r9
   b5d82:	ee08 3a10 	vmov	s16, r3
   b5d86:	2308      	movs	r3, #8
   b5d88:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5d8a:	9b03      	ldr	r3, [sp, #12]
   b5d8c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5d90:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5d94:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5d98:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5d9a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5d9e:	07d2      	lsls	r2, r2, #31
   b5da0:	d552      	bpl.n	b5e48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5da2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5da4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5da8:	d13e      	bne.n	b5e28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5daa:	2c01      	cmp	r4, #1
   b5dac:	d13c      	bne.n	b5e28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5dae:	699b      	ldr	r3, [r3, #24]
   b5db0:	9906      	ldr	r1, [sp, #24]
   b5db2:	461f      	mov	r7, r3
   b5db4:	9b04      	ldr	r3, [sp, #16]
   b5db6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5db8:	b212      	sxth	r2, r2
   b5dba:	4651      	mov	r1, sl
   b5dbc:	4658      	mov	r0, fp
   b5dbe:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5dc0:	f109 0301 	add.w	r3, r9, #1
   b5dc4:	fa4f f983 	sxtb.w	r9, r3
   b5dc8:	9b07      	ldr	r3, [sp, #28]
   b5dca:	085b      	lsrs	r3, r3, #1
   b5dcc:	9307      	str	r3, [sp, #28]
   b5dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5dd0:	3b01      	subs	r3, #1
   b5dd2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5dd6:	930a      	str	r3, [sp, #40]	; 0x28
   b5dd8:	d1de      	bne.n	b5d98 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5dda:	9f05      	ldr	r7, [sp, #20]
   b5ddc:	3701      	adds	r7, #1
   b5dde:	b27b      	sxtb	r3, r7
   b5de0:	9305      	str	r3, [sp, #20]
   b5de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5de4:	3b01      	subs	r3, #1
   b5de6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5dea:	9309      	str	r3, [sp, #36]	; 0x24
   b5dec:	d1b9      	bne.n	b5d62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5dee:	9b04      	ldr	r3, [sp, #16]
   b5df0:	4543      	cmp	r3, r8
   b5df2:	d00f      	beq.n	b5e14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5df4:	2d01      	cmp	r5, #1
   b5df6:	f8db 3000 	ldr.w	r3, [fp]
   b5dfa:	d13b      	bne.n	b5e74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5dfc:	2c01      	cmp	r4, #1
   b5dfe:	d139      	bne.n	b5e74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5e00:	9908      	ldr	r1, [sp, #32]
   b5e02:	f8cd 8000 	str.w	r8, [sp]
   b5e06:	3105      	adds	r1, #5
   b5e08:	6a1c      	ldr	r4, [r3, #32]
   b5e0a:	4632      	mov	r2, r6
   b5e0c:	2308      	movs	r3, #8
   b5e0e:	b209      	sxth	r1, r1
   b5e10:	4658      	mov	r0, fp
   b5e12:	47a0      	blx	r4
        endWrite();
   b5e14:	f8db 3000 	ldr.w	r3, [fp]
   b5e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e1a:	4658      	mov	r0, fp
}
   b5e1c:	b011      	add	sp, #68	; 0x44
   b5e1e:	ecbd 8b02 	vpop	{d8}
   b5e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5e26:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5e28:	9906      	ldr	r1, [sp, #24]
   b5e2a:	fb14 f202 	smulbb	r2, r4, r2
   b5e2e:	440a      	add	r2, r1
   b5e30:	9904      	ldr	r1, [sp, #16]
   b5e32:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5e34:	9400      	str	r4, [sp, #0]
   b5e36:	69db      	ldr	r3, [r3, #28]
   b5e38:	ee18 1a10 	vmov	r1, s16
   b5e3c:	461f      	mov	r7, r3
   b5e3e:	b212      	sxth	r2, r2
   b5e40:	462b      	mov	r3, r5
   b5e42:	4658      	mov	r0, fp
   b5e44:	47b8      	blx	r7
   b5e46:	e7bb      	b.n	b5dc0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5e48:	9a04      	ldr	r2, [sp, #16]
   b5e4a:	4542      	cmp	r2, r8
   b5e4c:	d0b8      	beq.n	b5dc0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5e4e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5e50:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5e54:	d107      	bne.n	b5e66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5e56:	2c01      	cmp	r4, #1
   b5e58:	d105      	bne.n	b5e66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5e5a:	699b      	ldr	r3, [r3, #24]
   b5e5c:	9906      	ldr	r1, [sp, #24]
   b5e5e:	461f      	mov	r7, r3
   b5e60:	440a      	add	r2, r1
   b5e62:	4643      	mov	r3, r8
   b5e64:	e7a8      	b.n	b5db8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5e66:	9906      	ldr	r1, [sp, #24]
   b5e68:	f8cd 8004 	str.w	r8, [sp, #4]
   b5e6c:	fb14 f202 	smulbb	r2, r4, r2
   b5e70:	440a      	add	r2, r1
   b5e72:	e7df      	b.n	b5e34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5e74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5e76:	f8cd 8004 	str.w	r8, [sp, #4]
   b5e7a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5e7e:	9a08      	ldr	r2, [sp, #32]
   b5e80:	00e4      	lsls	r4, r4, #3
   b5e82:	440a      	add	r2, r1
   b5e84:	4611      	mov	r1, r2
   b5e86:	9400      	str	r4, [sp, #0]
   b5e88:	69dc      	ldr	r4, [r3, #28]
   b5e8a:	4632      	mov	r2, r6
   b5e8c:	462b      	mov	r3, r5
   b5e8e:	b209      	sxth	r1, r1
   b5e90:	4658      	mov	r0, fp
   b5e92:	47a0      	blx	r4
        endWrite();
   b5e94:	e7be      	b.n	b5e14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5e96:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5e98:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5e9a:	6812      	ldr	r2, [r2, #0]
   b5e9c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5e9e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5ea0:	b2ff      	uxtb	r7, r7
   b5ea2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5ea6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5eaa:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5eac:	789a      	ldrb	r2, [r3, #2]
   b5eae:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5eb0:	78da      	ldrb	r2, [r3, #3]
   b5eb2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5eb4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5eb6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5eba:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5ebe:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5ec0:	d801      	bhi.n	b5ec6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5ec2:	2c01      	cmp	r4, #1
   b5ec4:	d957      	bls.n	b5f76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5ec6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5eca:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5ecc:	fa0f f38a 	sxth.w	r3, sl
   b5ed0:	9307      	str	r3, [sp, #28]
        startWrite();
   b5ed2:	f8db 3000 	ldr.w	r3, [fp]
   b5ed6:	4658      	mov	r0, fp
   b5ed8:	695b      	ldr	r3, [r3, #20]
   b5eda:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5edc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5ede:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5ee2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5ee4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5ee8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5eea:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5eec:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5ef0:	429f      	cmp	r7, r3
   b5ef2:	d28f      	bcs.n	b5e14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5ef4:	9b07      	ldr	r3, [sp, #28]
   b5ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5ef8:	443b      	add	r3, r7
   b5efa:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5efe:	2200      	movs	r2, #0
   b5f00:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f04:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f06:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f0a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f0e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f12:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5f16:	9905      	ldr	r1, [sp, #20]
   b5f18:	4291      	cmp	r1, r2
   b5f1a:	d241      	bcs.n	b5fa0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5f1c:	1c5a      	adds	r2, r3, #1
   b5f1e:	b2d2      	uxtb	r2, r2
   b5f20:	075b      	lsls	r3, r3, #29
   b5f22:	920d      	str	r2, [sp, #52]	; 0x34
   b5f24:	d107      	bne.n	b5f36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5f26:	9b06      	ldr	r3, [sp, #24]
   b5f28:	9906      	ldr	r1, [sp, #24]
   b5f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5f2c:	3301      	adds	r3, #1
   b5f2e:	b29b      	uxth	r3, r3
   b5f30:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5f34:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5f36:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5f3a:	d012      	beq.n	b5f62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5f3c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f3e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f42:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5f46:	d11a      	bne.n	b5f7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5f48:	2c01      	cmp	r4, #1
   b5f4a:	d118      	bne.n	b5f7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5f4e:	699b      	ldr	r3, [r3, #24]
   b5f50:	4411      	add	r1, r2
   b5f52:	9a05      	ldr	r2, [sp, #20]
   b5f54:	4411      	add	r1, r2
   b5f56:	461e      	mov	r6, r3
   b5f58:	4652      	mov	r2, sl
   b5f5a:	9b04      	ldr	r3, [sp, #16]
   b5f5c:	b209      	sxth	r1, r1
   b5f5e:	4658      	mov	r0, fp
   b5f60:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5f62:	9e05      	ldr	r6, [sp, #20]
   b5f64:	3601      	adds	r6, #1
   b5f66:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5f68:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5f6c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5f6e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5f74:	e7ce      	b.n	b5f14 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5f76:	2300      	movs	r3, #0
   b5f78:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5f7c:	e7a9      	b.n	b5ed2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f7e:	9805      	ldr	r0, [sp, #20]
   b5f80:	9a08      	ldr	r2, [sp, #32]
   b5f82:	4402      	add	r2, r0
   b5f84:	fb02 1105 	mla	r1, r2, r5, r1
   b5f88:	9a04      	ldr	r2, [sp, #16]
   b5f8a:	e9cd 4200 	strd	r4, r2, [sp]
   b5f8e:	69db      	ldr	r3, [r3, #28]
   b5f90:	ee18 2a10 	vmov	r2, s16
   b5f94:	461e      	mov	r6, r3
   b5f96:	b209      	sxth	r1, r1
   b5f98:	462b      	mov	r3, r5
   b5f9a:	4658      	mov	r0, fp
   b5f9c:	47b0      	blx	r6
   b5f9e:	e7e0      	b.n	b5f62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5fa2:	3701      	adds	r7, #1
   b5fa4:	4498      	add	r8, r3
   b5fa6:	fa5f f888 	uxtb.w	r8, r8
   b5faa:	b2ff      	uxtb	r7, r7
   b5fac:	e79f      	b.n	b5eee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5fae:	b011      	add	sp, #68	; 0x44
   b5fb0:	ecbd 8b02 	vpop	{d8}
   b5fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5fb8:	000ba107 	.word	0x000ba107

000b5fbc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b5fbe:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5fc0:	b085      	sub	sp, #20
   b5fc2:	4604      	mov	r4, r0
   b5fc4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5fc6:	2a00      	cmp	r2, #0
   b5fc8:	d134      	bne.n	b6034 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5fca:	290a      	cmp	r1, #10
   b5fcc:	d108      	bne.n	b5fe0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b5fce:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5fd0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5fd2:	7e42      	ldrb	r2, [r0, #25]
   b5fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5fd8:	8263      	strh	r3, [r4, #18]
}
   b5fda:	2001      	movs	r0, #1
   b5fdc:	b005      	add	sp, #20
   b5fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5fe0:	290d      	cmp	r1, #13
   b5fe2:	d0fa      	beq.n	b5fda <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5fe4:	7ee1      	ldrb	r1, [r4, #27]
   b5fe6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5fe8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5fea:	b171      	cbz	r1, b600a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5fec:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5ff0:	2106      	movs	r1, #6
   b5ff2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5ff6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5ffa:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5ffc:	bfc1      	itttt	gt
   b5ffe:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6002:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6004:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6008:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b600a:	8ae2      	ldrh	r2, [r4, #22]
   b600c:	9201      	str	r2, [sp, #4]
   b600e:	8aa2      	ldrh	r2, [r4, #20]
   b6010:	9200      	str	r2, [sp, #0]
   b6012:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6016:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b601a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b601e:	4620      	mov	r0, r4
   b6020:	f7ff fe5e 	bl	b5ce0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6024:	7e23      	ldrb	r3, [r4, #24]
   b6026:	8a22      	ldrh	r2, [r4, #16]
   b6028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b602c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6030:	8223      	strh	r3, [r4, #16]
   b6032:	e7d2      	b.n	b5fda <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6034:	290a      	cmp	r1, #10
   b6036:	d107      	bne.n	b6048 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6038:	2300      	movs	r3, #0
   b603a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b603c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b603e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6040:	8a43      	ldrh	r3, [r0, #18]
   b6042:	fb01 3302 	mla	r3, r1, r2, r3
   b6046:	e7c7      	b.n	b5fd8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6048:	290d      	cmp	r1, #13
   b604a:	d0c6      	beq.n	b5fda <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b604c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b604e:	42a9      	cmp	r1, r5
   b6050:	d3c3      	bcc.n	b5fda <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6052:	7a51      	ldrb	r1, [r2, #9]
   b6054:	4299      	cmp	r1, r3
   b6056:	d3c0      	bcc.n	b5fda <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6058:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b605a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b605c:	b2ed      	uxtb	r5, r5
   b605e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b6062:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6064:	b328      	cbz	r0, b60b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b6066:	78e9      	ldrb	r1, [r5, #3]
   b6068:	b319      	cbz	r1, b60b2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b606a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b606c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b606e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6070:	b191      	cbz	r1, b6098 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b6072:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b6076:	4408      	add	r0, r1
   b6078:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b607c:	fb06 1100 	mla	r1, r6, r0, r1
   b6080:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b6084:	4281      	cmp	r1, r0
   b6086:	dd07      	ble.n	b6098 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b6088:	2000      	movs	r0, #0
   b608a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b608c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6090:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b6092:	fb02 1207 	mla	r2, r2, r7, r1
   b6096:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6098:	8ae2      	ldrh	r2, [r4, #22]
   b609a:	9201      	str	r2, [sp, #4]
   b609c:	8aa2      	ldrh	r2, [r4, #20]
   b609e:	9200      	str	r2, [sp, #0]
   b60a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b60a4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b60a8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b60ac:	4620      	mov	r0, r4
   b60ae:	f7ff fe17 	bl	b5ce0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b60b2:	7929      	ldrb	r1, [r5, #4]
   b60b4:	7e22      	ldrb	r2, [r4, #24]
   b60b6:	8a23      	ldrh	r3, [r4, #16]
   b60b8:	fb01 3302 	mla	r3, r1, r2, r3
   b60bc:	e7b8      	b.n	b6030 <_ZN12Adafruit_GFX5writeEh+0x74>

000b60be <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b60be:	2901      	cmp	r1, #1
   b60c0:	bf38      	it	cc
   b60c2:	2101      	movcc	r1, #1
   b60c4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b60c6:	7641      	strb	r1, [r0, #25]
}
   b60c8:	4770      	bx	lr

000b60ca <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b60ca:	4770      	bx	lr

000b60cc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b60cc:	b510      	push	{r4, lr}
  }
   b60ce:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b60d0:	4604      	mov	r4, r0
  }
   b60d2:	f7fe fc8a 	bl	b49ea <_ZdlPvj>
   b60d6:	4620      	mov	r0, r4
   b60d8:	bd10      	pop	{r4, pc}

000b60da <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b60da:	b40e      	push	{r1, r2, r3}
   b60dc:	b503      	push	{r0, r1, lr}
   b60de:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b60e0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b60e2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b60e6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b60e8:	f001 fc95 	bl	b7a16 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b60ec:	b002      	add	sp, #8
   b60ee:	f85d eb04 	ldr.w	lr, [sp], #4
   b60f2:	b003      	add	sp, #12
   b60f4:	4770      	bx	lr
	...

000b60f8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b60f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60fa:	4604      	mov	r4, r0
   b60fc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b60fe:	7922      	ldrb	r2, [r4, #4]
   b6100:	68a3      	ldr	r3, [r4, #8]
   b6102:	b132      	cbz	r2, b6112 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6104:	b9a3      	cbnz	r3, b6130 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6106:	490b      	ldr	r1, [pc, #44]	; (b6134 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6108:	b002      	add	sp, #8
   b610a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b610e:	f001 bc47 	b.w	b79a0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6112:	4a09      	ldr	r2, [pc, #36]	; (b6138 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6114:	7b26      	ldrb	r6, [r4, #12]
   b6116:	4d09      	ldr	r5, [pc, #36]	; (b613c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6118:	4909      	ldr	r1, [pc, #36]	; (b6140 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b611a:	7b64      	ldrb	r4, [r4, #13]
   b611c:	2e01      	cmp	r6, #1
   b611e:	bf18      	it	ne
   b6120:	4629      	movne	r1, r5
   b6122:	e9cd 1400 	strd	r1, r4, [sp]
   b6126:	4907      	ldr	r1, [pc, #28]	; (b6144 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6128:	f7ff ffd7 	bl	b60da <_ZN5Print6printfEPKcz>
  }
   b612c:	b002      	add	sp, #8
   b612e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6130:	4a05      	ldr	r2, [pc, #20]	; (b6148 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6132:	e7ef      	b.n	b6114 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6134:	000ba671 	.word	0x000ba671
   b6138:	000ba668 	.word	0x000ba668
   b613c:	000ba66d 	.word	0x000ba66d
   b6140:	000ba669 	.word	0x000ba669
   b6144:	000ba687 	.word	0x000ba687
   b6148:	000ba660 	.word	0x000ba660

000b614c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b614c:	b510      	push	{r4, lr}
   b614e:	4b04      	ldr	r3, [pc, #16]	; (b6160 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6150:	6003      	str	r3, [r0, #0]
   b6152:	4604      	mov	r4, r0
  if(buffer) {
   b6154:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6156:	b108      	cbz	r0, b615c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6158:	f001 f98e 	bl	b7478 <free>
    buffer = NULL;
  }
}
   b615c:	4620      	mov	r0, r4
   b615e:	bd10      	pop	{r4, pc}
   b6160:	000bab60 	.word	0x000bab60

000b6164 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6164:	b510      	push	{r4, lr}
   b6166:	4604      	mov	r4, r0
}
   b6168:	f7ff fff0 	bl	b614c <_ZN16Adafruit_SSD1306D1Ev>
   b616c:	4620      	mov	r0, r4
   b616e:	2150      	movs	r1, #80	; 0x50
   b6170:	f7fe fc3b 	bl	b49ea <_ZdlPvj>
   b6174:	4620      	mov	r0, r4
   b6176:	bd10      	pop	{r4, pc}

000b6178 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6178:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b617a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b617c:	db4b      	blt.n	b6216 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b617e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6182:	428c      	cmp	r4, r1
   b6184:	dd47      	ble.n	b6216 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6186:	2a00      	cmp	r2, #0
   b6188:	db45      	blt.n	b6216 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b618a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b618e:	4294      	cmp	r4, r2
   b6190:	dd41      	ble.n	b6216 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6192:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6194:	2c02      	cmp	r4, #2
   b6196:	d01f      	beq.n	b61d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6198:	2c03      	cmp	r4, #3
   b619a:	d026      	beq.n	b61ea <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b619c:	2c01      	cmp	r4, #1
   b619e:	d104      	bne.n	b61aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b61a0:	8904      	ldrh	r4, [r0, #8]
   b61a2:	43d2      	mvns	r2, r2
   b61a4:	4414      	add	r4, r2
      break;
   b61a6:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b61a8:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b61aa:	2b01      	cmp	r3, #1
   b61ac:	d023      	beq.n	b61f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b61ae:	2b02      	cmp	r3, #2
   b61b0:	d032      	beq.n	b6218 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b61b2:	bb83      	cbnz	r3, b6216 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b61b4:	2a00      	cmp	r2, #0
   b61b6:	4613      	mov	r3, r2
   b61b8:	8904      	ldrh	r4, [r0, #8]
   b61ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b61bc:	bfb8      	it	lt
   b61be:	1dd3      	addlt	r3, r2, #7
   b61c0:	10db      	asrs	r3, r3, #3
   b61c2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b61c6:	f002 0207 	and.w	r2, r2, #7
   b61ca:	2301      	movs	r3, #1
   b61cc:	4093      	lsls	r3, r2
   b61ce:	5c42      	ldrb	r2, [r0, r1]
   b61d0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b61d4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b61d6:	e01e      	b.n	b6216 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b61d8:	8904      	ldrh	r4, [r0, #8]
   b61da:	3c01      	subs	r4, #1
   b61dc:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b61de:	8944      	ldrh	r4, [r0, #10]
   b61e0:	43d2      	mvns	r2, r2
   b61e2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b61e4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b61e6:	b212      	sxth	r2, r2
      break;
   b61e8:	e7df      	b.n	b61aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b61ea:	8944      	ldrh	r4, [r0, #10]
   b61ec:	3c01      	subs	r4, #1
   b61ee:	1a64      	subs	r4, r4, r1
      break;
   b61f0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b61f2:	b222      	sxth	r2, r4
      break;
   b61f4:	e7d9      	b.n	b61aa <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b61f6:	2a00      	cmp	r2, #0
   b61f8:	8904      	ldrh	r4, [r0, #8]
   b61fa:	4613      	mov	r3, r2
   b61fc:	bfb8      	it	lt
   b61fe:	1dd3      	addlt	r3, r2, #7
   b6200:	10db      	asrs	r3, r3, #3
   b6202:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6206:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6208:	f002 0007 	and.w	r0, r2, #7
   b620c:	2201      	movs	r2, #1
   b620e:	4082      	lsls	r2, r0
   b6210:	5c58      	ldrb	r0, [r3, r1]
   b6212:	4302      	orrs	r2, r0
   b6214:	545a      	strb	r2, [r3, r1]
}
   b6216:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6218:	2a00      	cmp	r2, #0
   b621a:	4613      	mov	r3, r2
   b621c:	8904      	ldrh	r4, [r0, #8]
   b621e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6220:	bfb8      	it	lt
   b6222:	1dd3      	addlt	r3, r2, #7
   b6224:	10db      	asrs	r3, r3, #3
   b6226:	fb13 1104 	smlabb	r1, r3, r4, r1
   b622a:	f002 0207 	and.w	r2, r2, #7
   b622e:	2301      	movs	r3, #1
   b6230:	fa03 f202 	lsl.w	r2, r3, r2
   b6234:	5c43      	ldrb	r3, [r0, r1]
   b6236:	405a      	eors	r2, r3
   b6238:	e7cc      	b.n	b61d4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b623c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b623c:	b570      	push	{r4, r5, r6, lr}
   b623e:	4604      	mov	r4, r0
   b6240:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6242:	2600      	movs	r6, #0
   b6244:	f7ff fce2 	bl	b5c0c <_ZN12Adafruit_GFXC1Ess>
   b6248:	4b11      	ldr	r3, [pc, #68]	; (b6290 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b624a:	6023      	str	r3, [r4, #0]
   b624c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b624e:	b915      	cbnz	r5, b6256 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b6250:	f002 fb58 	bl	b8904 <_Z19__fetch_global_Wirev>
   b6254:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6256:	23ff      	movs	r3, #255	; 0xff
   b6258:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b625c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b6260:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b6264:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b6268:	4b0a      	ldr	r3, [pc, #40]	; (b6294 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b626a:	63a3      	str	r3, [r4, #56]	; 0x38
   b626c:	2301      	movs	r3, #1
   b626e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6272:	9b05      	ldr	r3, [sp, #20]
   b6274:	64a3      	str	r3, [r4, #72]	; 0x48
   b6276:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b627a:	9b06      	ldr	r3, [sp, #24]
   b627c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b627e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b6282:	6426      	str	r6, [r4, #64]	; 0x40
   b6284:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b6288:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b628a:	4620      	mov	r0, r4
   b628c:	bd70      	pop	{r4, r5, r6, pc}
   b628e:	bf00      	nop
   b6290:	000bab60 	.word	0x000bab60
   b6294:	000ba6ac 	.word	0x000ba6ac

000b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b629a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b629c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b629e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b62a0:	b190      	cbz	r0, b62c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b62a2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b62a6:	f001 fa01 	bl	b76ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b62aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b62ac:	6803      	ldr	r3, [r0, #0]
   b62ae:	2100      	movs	r1, #0
   b62b0:	689b      	ldr	r3, [r3, #8]
   b62b2:	4798      	blx	r3
    WIRE_WRITE(c);
   b62b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b62b6:	6803      	ldr	r3, [r0, #0]
   b62b8:	4629      	mov	r1, r5
   b62ba:	689b      	ldr	r3, [r3, #8]
   b62bc:	4798      	blx	r3
    wire->endTransmission();
   b62be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b62c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b62c4:	f001 b9f9 	b.w	b76ba <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b62c8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b62cc:	4601      	mov	r1, r0
   b62ce:	b298      	uxth	r0, r3
   b62d0:	f002 fa93 	bl	b87fa <digitalWrite>
  if(spi) {
   b62d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b62d6:	b120      	cbz	r0, b62e2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b62d8:	4629      	mov	r1, r5
}
   b62da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b62de:	f001 bc7d 	b.w	b7bdc <_ZN8SPIClass8transferEh>
   b62e2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b62e4:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b62e6:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b62ea:	ea05 0107 	and.w	r1, r5, r7
   b62ee:	b280      	uxth	r0, r0
   b62f0:	f002 fa83 	bl	b87fa <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b62f4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b62f8:	2101      	movs	r1, #1
   b62fa:	b280      	uxth	r0, r0
   b62fc:	f002 fa7d 	bl	b87fa <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6300:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6304:	2100      	movs	r1, #0
   b6306:	b280      	uxth	r0, r0
   b6308:	f002 fa77 	bl	b87fa <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b630c:	3e01      	subs	r6, #1
   b630e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6312:	d1e8      	bne.n	b62e6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6316 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6316:	b538      	push	{r3, r4, r5, lr}
   b6318:	4604      	mov	r4, r0
  TRANSACTION_START
   b631a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b631c:	460d      	mov	r5, r1
  TRANSACTION_START
   b631e:	b180      	cbz	r0, b6342 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6320:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6322:	f001 f989 	bl	b7638 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6326:	2d00      	cmp	r5, #0
   b6328:	4620      	mov	r0, r4
   b632a:	bf14      	ite	ne
   b632c:	21a7      	movne	r1, #167	; 0xa7
   b632e:	21a6      	moveq	r1, #166	; 0xa6
   b6330:	f7ff ffb2 	bl	b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6334:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6336:	b188      	cbz	r0, b635c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6338:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b633a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b633e:	f001 b97b 	b.w	b7638 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b6342:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6344:	b118      	cbz	r0, b634e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6346:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b634a:	f001 fbd9 	bl	b7b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b634e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6352:	2100      	movs	r1, #0
   b6354:	b280      	uxth	r0, r0
   b6356:	f002 fa50 	bl	b87fa <digitalWrite>
   b635a:	e7e4      	b.n	b6326 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b635c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6360:	2101      	movs	r1, #1
   b6362:	b280      	uxth	r0, r0
   b6364:	f002 fa49 	bl	b87fa <digitalWrite>
   b6368:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b636a:	b118      	cbz	r0, b6374 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b636c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6370:	f001 bbac 	b.w	b7acc <_ZN8SPIClass14endTransactionEv>
}
   b6374:	bd38      	pop	{r3, r4, r5, pc}

000b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b637a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b637c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b637e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6380:	188f      	adds	r7, r1, r2
   b6382:	b340      	cbz	r0, b63d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6384:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6388:	f001 f990 	bl	b76ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b638c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b638e:	6803      	ldr	r3, [r0, #0]
   b6390:	2100      	movs	r1, #0
   b6392:	689b      	ldr	r3, [r3, #8]
   b6394:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6396:	2601      	movs	r6, #1
    while(n--) {
   b6398:	42af      	cmp	r7, r5
        wire->endTransmission();
   b639a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b639c:	d017      	beq.n	b63ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b639e:	2e1f      	cmp	r6, #31
   b63a0:	d90c      	bls.n	b63bc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b63a2:	f001 f98a 	bl	b76ba <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b63a6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b63aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63ac:	f001 f97e 	bl	b76ac <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b63b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63b2:	6803      	ldr	r3, [r0, #0]
   b63b4:	2100      	movs	r1, #0
   b63b6:	689b      	ldr	r3, [r3, #8]
   b63b8:	4798      	blx	r3
        bytesOut = 1;
   b63ba:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b63bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63be:	f815 1b01 	ldrb.w	r1, [r5], #1
   b63c2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b63c4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b63c6:	689b      	ldr	r3, [r3, #8]
   b63c8:	4798      	blx	r3
      bytesOut++;
   b63ca:	b2f6      	uxtb	r6, r6
    while(n--) {
   b63cc:	e7e4      	b.n	b6398 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b63ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b63d2:	f001 b972 	b.w	b76ba <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b63d6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b63da:	4601      	mov	r1, r0
   b63dc:	b298      	uxth	r0, r3
   b63de:	f002 fa0c 	bl	b87fa <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b63e2:	42bd      	cmp	r5, r7
   b63e4:	d022      	beq.n	b642c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b63e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b63e8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b63ec:	b118      	cbz	r0, b63f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b63ee:	4649      	mov	r1, r9
   b63f0:	f001 fbf4 	bl	b7bdc <_ZN8SPIClass8transferEh>
   b63f4:	e7f5      	b.n	b63e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b63f6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b63f8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b63fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6400:	ea09 0108 	and.w	r1, r9, r8
   b6404:	b280      	uxth	r0, r0
   b6406:	f002 f9f8 	bl	b87fa <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b640a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b640e:	2101      	movs	r1, #1
   b6410:	b280      	uxth	r0, r0
   b6412:	f002 f9f2 	bl	b87fa <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6416:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b641a:	2100      	movs	r1, #0
   b641c:	b280      	uxth	r0, r0
   b641e:	f002 f9ec 	bl	b87fa <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6422:	3e01      	subs	r6, #1
   b6424:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6428:	d1e8      	bne.n	b63fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b642a:	e7da      	b.n	b63e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b642c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6430 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b6430:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6434:	1dda      	adds	r2, r3, #7
   b6436:	bf48      	it	mi
   b6438:	f103 020e 	addmi.w	r2, r3, #14
   b643c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6440:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6442:	10d2      	asrs	r2, r2, #3
   b6444:	435a      	muls	r2, r3
   b6446:	2100      	movs	r1, #0
   b6448:	f003 bc7c 	b.w	b9d44 <memset>

000b644c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b644c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6450:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6452:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b6454:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6458:	4604      	mov	r4, r0
   b645a:	460f      	mov	r7, r1
   b645c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b645e:	b1c3      	cbz	r3, b6492 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b6460:	4620      	mov	r0, r4
   b6462:	f7ff ffe5 	bl	b6430 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b6466:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b646a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b646e:	2820      	cmp	r0, #32
   b6470:	dc21      	bgt.n	b64b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6472:	2320      	movs	r3, #32
   b6474:	2201      	movs	r2, #1
   b6476:	3820      	subs	r0, #32
   b6478:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b647c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b6480:	2373      	movs	r3, #115	; 0x73
   b6482:	3973      	subs	r1, #115	; 0x73
   b6484:	9300      	str	r3, [sp, #0]
   b6486:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b648a:	4b89      	ldr	r3, [pc, #548]	; (b66b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b648c:	f340 024f 	sbfx	r2, r0, #1, #16
   b6490:	e021      	b.n	b64d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6492:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6496:	1dd8      	adds	r0, r3, #7
   b6498:	bf48      	it	mi
   b649a:	f103 000e 	addmi.w	r0, r3, #14
   b649e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b64a2:	10c0      	asrs	r0, r0, #3
   b64a4:	4358      	muls	r0, r3
   b64a6:	f000 ffdf 	bl	b7468 <malloc>
   b64aa:	62e0      	str	r0, [r4, #44]	; 0x2c
   b64ac:	2800      	cmp	r0, #0
   b64ae:	d1d7      	bne.n	b6460 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b64b0:	b004      	add	sp, #16
   b64b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b64b6:	3840      	subs	r0, #64	; 0x40
   b64b8:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b64bc:	fa02 f280 	sxtah	r2, r2, r0
   b64c0:	2340      	movs	r3, #64	; 0x40
   b64c2:	2001      	movs	r0, #1
   b64c4:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b64c8:	2352      	movs	r3, #82	; 0x52
   b64ca:	3952      	subs	r1, #82	; 0x52
   b64cc:	9300      	str	r3, [sp, #0]
   b64ce:	4b79      	ldr	r3, [pc, #484]	; (b66b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b64d0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b64d4:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b64d6:	4620      	mov	r0, r4
   b64d8:	f341 014f 	sbfx	r1, r1, #1, #16
   b64dc:	f7ff fbac 	bl	b5c38 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b64e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b64e2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b64e6:	2800      	cmp	r0, #0
   b64e8:	d078      	beq.n	b65dc <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b64ea:	2d00      	cmp	r5, #0
   b64ec:	d174      	bne.n	b65d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b64ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b64f2:	2b20      	cmp	r3, #32
   b64f4:	bf0c      	ite	eq
   b64f6:	253c      	moveq	r5, #60	; 0x3c
   b64f8:	253d      	movne	r5, #61	; 0x3d
   b64fa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b64fe:	f1b8 0f00 	cmp.w	r8, #0
   b6502:	d001      	beq.n	b6508 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6504:	f001 f89c 	bl	b7640 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6508:	b1fe      	cbz	r6, b654a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b650a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b650e:	2800      	cmp	r0, #0
   b6510:	db1b      	blt.n	b654a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b6512:	2101      	movs	r1, #1
   b6514:	b280      	uxth	r0, r0
   b6516:	f002 f95f 	bl	b87d8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b651a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b651e:	2101      	movs	r1, #1
   b6520:	b280      	uxth	r0, r0
   b6522:	f002 f96a 	bl	b87fa <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6526:	2001      	movs	r0, #1
   b6528:	f000 fff2 	bl	b7510 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b652c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6530:	2100      	movs	r1, #0
   b6532:	b280      	uxth	r0, r0
   b6534:	f002 f961 	bl	b87fa <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6538:	200a      	movs	r0, #10
   b653a:	f000 ffe9 	bl	b7510 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b653e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6542:	2101      	movs	r1, #1
   b6544:	b280      	uxth	r0, r0
   b6546:	f002 f958 	bl	b87fa <digitalWrite>
  TRANSACTION_START
   b654a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b654c:	2800      	cmp	r0, #0
   b654e:	d074      	beq.n	b663a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b6550:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6552:	f001 f871 	bl	b7638 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b6556:	2204      	movs	r2, #4
   b6558:	4957      	ldr	r1, [pc, #348]	; (b66b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b655a:	4620      	mov	r0, r4
   b655c:	f7ff ff0b 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b6560:	8961      	ldrh	r1, [r4, #10]
   b6562:	3901      	subs	r1, #1
   b6564:	b2c9      	uxtb	r1, r1
   b6566:	4620      	mov	r0, r4
   b6568:	f7ff fe96 	bl	b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b656c:	4953      	ldr	r1, [pc, #332]	; (b66bc <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b656e:	2204      	movs	r2, #4
   b6570:	4620      	mov	r0, r4
   b6572:	f7ff ff00 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6576:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b657a:	2b01      	cmp	r3, #1
   b657c:	bf0c      	ite	eq
   b657e:	2110      	moveq	r1, #16
   b6580:	2114      	movne	r1, #20
   b6582:	4620      	mov	r0, r4
   b6584:	f7ff fe88 	bl	b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6588:	2204      	movs	r2, #4
   b658a:	494d      	ldr	r1, [pc, #308]	; (b66c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b658c:	4620      	mov	r0, r4
   b658e:	f7ff fef2 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b6592:	68a3      	ldr	r3, [r4, #8]
   b6594:	4a4b      	ldr	r2, [pc, #300]	; (b66c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6596:	4293      	cmp	r3, r2
   b6598:	d15c      	bne.n	b6654 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b659a:	494b      	ldr	r1, [pc, #300]	; (b66c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b659c:	2204      	movs	r2, #4
   b659e:	4620      	mov	r0, r4
   b65a0:	f7ff fee9 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b65a4:	21d9      	movs	r1, #217	; 0xd9
   b65a6:	4620      	mov	r0, r4
   b65a8:	f7ff fe76 	bl	b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b65ac:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b65b0:	2b01      	cmp	r3, #1
   b65b2:	bf0c      	ite	eq
   b65b4:	2122      	moveq	r1, #34	; 0x22
   b65b6:	21f1      	movne	r1, #241	; 0xf1
   b65b8:	4620      	mov	r0, r4
   b65ba:	f7ff fe6d 	bl	b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b65be:	4620      	mov	r0, r4
   b65c0:	4942      	ldr	r1, [pc, #264]	; (b66cc <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b65c2:	2206      	movs	r2, #6
   b65c4:	f7ff fed7 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b65c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b65ca:	2800      	cmp	r0, #0
   b65cc:	d063      	beq.n	b6696 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b65ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b65d0:	f001 f832 	bl	b7638 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b65d4:	2001      	movs	r0, #1
   b65d6:	e76b      	b.n	b64b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b65d8:	b26d      	sxtb	r5, r5
   b65da:	e78e      	b.n	b64fa <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b65dc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b65e0:	2101      	movs	r1, #1
   b65e2:	b280      	uxth	r0, r0
   b65e4:	f002 f8f8 	bl	b87d8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b65e8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b65ec:	2101      	movs	r1, #1
   b65ee:	b280      	uxth	r0, r0
   b65f0:	f002 f8f2 	bl	b87d8 <pinMode>
    SSD1306_DESELECT
   b65f4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b65f8:	2101      	movs	r1, #1
   b65fa:	b280      	uxth	r0, r0
   b65fc:	f002 f8fd 	bl	b87fa <digitalWrite>
    if(spi) { // Hardware SPI
   b6600:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b6602:	b13d      	cbz	r5, b6614 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b6604:	f1b8 0f00 	cmp.w	r8, #0
   b6608:	f43f af7e 	beq.w	b6508 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b660c:	4628      	mov	r0, r5
   b660e:	f001 fa49 	bl	b7aa4 <_ZN8SPIClass5beginEv>
   b6612:	e779      	b.n	b6508 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6614:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6618:	2101      	movs	r1, #1
   b661a:	b280      	uxth	r0, r0
   b661c:	f002 f8dc 	bl	b87d8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b6620:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6624:	2101      	movs	r1, #1
   b6626:	b280      	uxth	r0, r0
   b6628:	f002 f8d6 	bl	b87d8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b662c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6630:	4629      	mov	r1, r5
   b6632:	b280      	uxth	r0, r0
   b6634:	f002 f8e1 	bl	b87fa <digitalWrite>
   b6638:	e766      	b.n	b6508 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b663a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b663c:	b118      	cbz	r0, b6646 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b663e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6642:	f001 fa5d 	bl	b7b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6646:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b664a:	2100      	movs	r1, #0
   b664c:	b280      	uxth	r0, r0
   b664e:	f002 f8d4 	bl	b87fa <digitalWrite>
   b6652:	e780      	b.n	b6556 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b6654:	4a1e      	ldr	r2, [pc, #120]	; (b66d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b6656:	4293      	cmp	r3, r2
   b6658:	d10e      	bne.n	b6678 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b665a:	491e      	ldr	r1, [pc, #120]	; (b66d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b665c:	2203      	movs	r2, #3
   b665e:	4620      	mov	r0, r4
   b6660:	f7ff fe89 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b6664:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6668:	2b01      	cmp	r3, #1
   b666a:	bf0c      	ite	eq
   b666c:	219f      	moveq	r1, #159	; 0x9f
   b666e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6670:	4620      	mov	r0, r4
   b6672:	f7ff fe11 	bl	b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6676:	e795      	b.n	b65a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6678:	4a17      	ldr	r2, [pc, #92]	; (b66d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b667a:	4293      	cmp	r3, r2
   b667c:	d192      	bne.n	b65a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b667e:	4917      	ldr	r1, [pc, #92]	; (b66dc <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b6680:	2203      	movs	r2, #3
   b6682:	4620      	mov	r0, r4
   b6684:	f7ff fe77 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6688:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b668c:	2b01      	cmp	r3, #1
   b668e:	bf0c      	ite	eq
   b6690:	2110      	moveq	r1, #16
   b6692:	21af      	movne	r1, #175	; 0xaf
   b6694:	e7ec      	b.n	b6670 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6696:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b669a:	2101      	movs	r1, #1
   b669c:	b280      	uxth	r0, r0
   b669e:	f002 f8ac 	bl	b87fa <digitalWrite>
   b66a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b66a4:	2800      	cmp	r0, #0
   b66a6:	d095      	beq.n	b65d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b66a8:	f001 fa10 	bl	b7acc <_ZN8SPIClass14endTransactionEv>
   b66ac:	e792      	b.n	b65d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b66ae:	bf00      	nop
   b66b0:	000ba978 	.word	0x000ba978
   b66b4:	000ba6b8 	.word	0x000ba6b8
   b66b8:	000babc0 	.word	0x000babc0
   b66bc:	000babc4 	.word	0x000babc4
   b66c0:	000babc8 	.word	0x000babc8
   b66c4:	00200080 	.word	0x00200080
   b66c8:	000babd2 	.word	0x000babd2
   b66cc:	000babcc 	.word	0x000babcc
   b66d0:	00400080 	.word	0x00400080
   b66d4:	000babd6 	.word	0x000babd6
   b66d8:	00100060 	.word	0x00100060
   b66dc:	000babd9 	.word	0x000babd9

000b66e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b66e0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b66e2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b66e4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b66e8:	db3d      	blt.n	b6766 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b66ea:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b66ee:	4294      	cmp	r4, r2
   b66f0:	dd39      	ble.n	b6766 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b66f2:	2900      	cmp	r1, #0
      w += x;
   b66f4:	bfbe      	ittt	lt
   b66f6:	185b      	addlt	r3, r3, r1
   b66f8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b66fa:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b66fc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b6700:	18ce      	adds	r6, r1, r3
   b6702:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b6704:	bfc4      	itt	gt
   b6706:	1a63      	subgt	r3, r4, r1
   b6708:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b670a:	2b00      	cmp	r3, #0
   b670c:	dd2b      	ble.n	b6766 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b670e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6710:	10d6      	asrs	r6, r2, #3
   b6712:	fb14 1106 	smlabb	r1, r4, r6, r1
   b6716:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b6718:	f002 0007 	and.w	r0, r2, #7
   b671c:	2201      	movs	r2, #1
   b671e:	4082      	lsls	r2, r0
      switch(color) {
   b6720:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b6722:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6724:	d016      	beq.n	b6754 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6726:	2d02      	cmp	r5, #2
   b6728:	d00b      	beq.n	b6742 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b672a:	b9e5      	cbnz	r5, b6766 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b672c:	43d2      	mvns	r2, r2
   b672e:	b2d2      	uxtb	r2, r2
   b6730:	440b      	add	r3, r1
   b6732:	4299      	cmp	r1, r3
   b6734:	d017      	beq.n	b6766 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6736:	f811 0b01 	ldrb.w	r0, [r1], #1
   b673a:	4010      	ands	r0, r2
   b673c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6740:	e7f7      	b.n	b6732 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b6742:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b6744:	4299      	cmp	r1, r3
   b6746:	d00e      	beq.n	b6766 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6748:	f811 0b01 	ldrb.w	r0, [r1], #1
   b674c:	4050      	eors	r0, r2
   b674e:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6752:	e7f7      	b.n	b6744 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b6754:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b6756:	4299      	cmp	r1, r3
   b6758:	d005      	beq.n	b6766 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b675a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b675e:	4310      	orrs	r0, r2
   b6760:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6764:	e7f7      	b.n	b6756 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b6766:	bd70      	pop	{r4, r5, r6, pc}

000b6768 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6768:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b676a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b676c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6770:	db76      	blt.n	b6860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b6772:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b6776:	42b1      	cmp	r1, r6
   b6778:	da72      	bge.n	b6860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b677a:	2a00      	cmp	r2, #0
      __h += __y;
   b677c:	bfbe      	ittt	lt
   b677e:	189b      	addlt	r3, r3, r2
   b6780:	b21b      	sxthlt	r3, r3
      __y = 0;
   b6782:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b6784:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6788:	18d7      	adds	r7, r2, r3
   b678a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b678c:	bfc4      	itt	gt
   b678e:	1aa3      	subgt	r3, r4, r2
   b6790:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b6792:	2b00      	cmp	r3, #0
   b6794:	dd64      	ble.n	b6860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6796:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b679a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b679c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b67a0:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b67a4:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b67a6:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b67aa:	d023      	beq.n	b67f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b67ac:	f1c2 0208 	rsb	r2, r2, #8
   b67b0:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b67b2:	492d      	ldr	r1, [pc, #180]	; (b6868 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b67b4:	4293      	cmp	r3, r2
   b67b6:	bf3c      	itt	cc
   b67b8:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b67bc:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b67c0:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b67c2:	bf3c      	itt	cc
   b67c4:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b67c8:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b67cc:	2d01      	cmp	r5, #1
   b67ce:	d007      	beq.n	b67e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b67d0:	2d02      	cmp	r5, #2
   b67d2:	d02e      	beq.n	b6832 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b67d4:	b94d      	cbnz	r5, b67ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b67d6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b67da:	ea2c 0101 	bic.w	r1, ip, r1
   b67de:	e003      	b.n	b67e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b67e0:	f817 c006 	ldrb.w	ip, [r7, r6]
   b67e4:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b67e8:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b67ea:	4293      	cmp	r3, r2
   b67ec:	d338      	bcc.n	b6860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b67ee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b67f2:	440c      	add	r4, r1
        h -= mod;
   b67f4:	1a9a      	subs	r2, r3, r2
   b67f6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b67f8:	2a07      	cmp	r2, #7
   b67fa:	d90e      	bls.n	b681a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b67fc:	2d02      	cmp	r5, #2
   b67fe:	d11d      	bne.n	b683c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b6800:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b6802:	7821      	ldrb	r1, [r4, #0]
   b6804:	43c9      	mvns	r1, r1
   b6806:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6808:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b680a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b680e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6810:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6812:	440c      	add	r4, r1
            } while(h >= 8);
   b6814:	d8f5      	bhi.n	b6802 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6816:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b681a:	b30a      	cbz	r2, b6860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b681c:	4b13      	ldr	r3, [pc, #76]	; (b686c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b681e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6820:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b6822:	d01a      	beq.n	b685a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6824:	2d02      	cmp	r5, #2
   b6826:	d01c      	beq.n	b6862 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6828:	b9d5      	cbnz	r5, b6860 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b682a:	7822      	ldrb	r2, [r4, #0]
   b682c:	ea22 0303 	bic.w	r3, r2, r3
   b6830:	e015      	b.n	b685e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b6832:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6836:	ea81 010c 	eor.w	r1, r1, ip
   b683a:	e7d5      	b.n	b67e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b683c:	1e29      	subs	r1, r5, #0
   b683e:	bf18      	it	ne
   b6840:	2101      	movne	r1, #1
   b6842:	4249      	negs	r1, r1
   b6844:	b2c9      	uxtb	r1, r1
   b6846:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6848:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b684a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b684c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b6850:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6852:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6854:	4434      	add	r4, r6
            } while(h >= 8);
   b6856:	d8f7      	bhi.n	b6848 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6858:	e7dd      	b.n	b6816 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b685a:	7822      	ldrb	r2, [r4, #0]
   b685c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b685e:	7023      	strb	r3, [r4, #0]
}
   b6860:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b6862:	7822      	ldrb	r2, [r4, #0]
   b6864:	4053      	eors	r3, r2
   b6866:	e7fa      	b.n	b685e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6868:	000babb0 	.word	0x000babb0
   b686c:	000babb8 	.word	0x000babb8

000b6870 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6870:	b470      	push	{r4, r5, r6}
   b6872:	4614      	mov	r4, r2
  switch(rotation) {
   b6874:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6876:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b687a:	2a02      	cmp	r2, #2
   b687c:	d00d      	beq.n	b689a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b687e:	2a03      	cmp	r2, #3
   b6880:	d018      	beq.n	b68b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b6882:	2a01      	cmp	r2, #1
   b6884:	d111      	bne.n	b68aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6886:	8902      	ldrh	r2, [r0, #8]
   b6888:	43e4      	mvns	r4, r4
   b688a:	4414      	add	r4, r2
   b688c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b688e:	9603      	str	r6, [sp, #12]
   b6890:	460a      	mov	r2, r1
   b6892:	4621      	mov	r1, r4
}
   b6894:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6896:	f7ff bf67 	b.w	b6768 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b689a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b689c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b689e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b68a0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b68a2:	4414      	add	r4, r2
    x -= (w-1);
   b68a4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b68a6:	b224      	sxth	r4, r4
    x -= (w-1);
   b68a8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b68aa:	9603      	str	r6, [sp, #12]
   b68ac:	4622      	mov	r2, r4
}
   b68ae:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b68b0:	f7ff bf16 	b.w	b66e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b68b4:	8945      	ldrh	r5, [r0, #10]
   b68b6:	4419      	add	r1, r3
   b68b8:	1a69      	subs	r1, r5, r1
   b68ba:	b209      	sxth	r1, r1
    break;
   b68bc:	e7e7      	b.n	b688e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b68be <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b68be:	b430      	push	{r4, r5}
   b68c0:	4614      	mov	r4, r2
  switch(rotation) {
   b68c2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b68c4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b68c8:	2a02      	cmp	r2, #2
   b68ca:	d00d      	beq.n	b68e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b68cc:	2a03      	cmp	r2, #3
   b68ce:	d018      	beq.n	b6902 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b68d0:	2a01      	cmp	r2, #1
   b68d2:	d111      	bne.n	b68f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b68d4:	18e2      	adds	r2, r4, r3
   b68d6:	8904      	ldrh	r4, [r0, #8]
   b68d8:	1aa4      	subs	r4, r4, r2
   b68da:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b68dc:	9502      	str	r5, [sp, #8]
   b68de:	460a      	mov	r2, r1
   b68e0:	4621      	mov	r1, r4
}
   b68e2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b68e4:	f7ff befc 	b.w	b66e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b68e8:	8902      	ldrh	r2, [r0, #8]
   b68ea:	43c9      	mvns	r1, r1
   b68ec:	4411      	add	r1, r2
    y -= (h-1);
   b68ee:	18e2      	adds	r2, r4, r3
   b68f0:	8944      	ldrh	r4, [r0, #10]
   b68f2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b68f4:	b209      	sxth	r1, r1
    y -= (h-1);
   b68f6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b68f8:	9502      	str	r5, [sp, #8]
   b68fa:	4622      	mov	r2, r4
}
   b68fc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b68fe:	f7ff bf33 	b.w	b6768 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b6902:	8942      	ldrh	r2, [r0, #10]
   b6904:	43c9      	mvns	r1, r1
   b6906:	4411      	add	r1, r2
   b6908:	b209      	sxth	r1, r1
    break;
   b690a:	e7e7      	b.n	b68dc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b690c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b690c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6910:	4604      	mov	r4, r0
  TRANSACTION_START
   b6912:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6914:	2800      	cmp	r0, #0
   b6916:	d042      	beq.n	b699e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6918:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b691a:	f000 fe8d 	bl	b7638 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b691e:	4947      	ldr	r1, [pc, #284]	; (b6a3c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6920:	2205      	movs	r2, #5
   b6922:	4620      	mov	r0, r4
   b6924:	f7ff fd27 	bl	b6376 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6928:	8921      	ldrh	r1, [r4, #8]
   b692a:	3901      	subs	r1, #1
   b692c:	4620      	mov	r0, r4
   b692e:	b2c9      	uxtb	r1, r1
   b6930:	f7ff fcb2 	bl	b6298 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6934:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6938:	1dde      	adds	r6, r3, #7
   b693a:	bf48      	it	mi
   b693c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6940:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6944:	8923      	ldrh	r3, [r4, #8]
   b6946:	10f6      	asrs	r6, r6, #3
   b6948:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b694c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6950:	2800      	cmp	r0, #0
   b6952:	d03a      	beq.n	b69ca <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6954:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6958:	f000 fea8 	bl	b76ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b695c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b695e:	6803      	ldr	r3, [r0, #0]
   b6960:	2140      	movs	r1, #64	; 0x40
   b6962:	689b      	ldr	r3, [r3, #8]
   b6964:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6966:	2701      	movs	r7, #1
    while(count--) {
   b6968:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b696a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b696c:	d024      	beq.n	b69b8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b696e:	2f1f      	cmp	r7, #31
   b6970:	d90c      	bls.n	b698c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6972:	f000 fea2 	bl	b76ba <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6976:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b697a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b697c:	f000 fe96 	bl	b76ac <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6980:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6982:	6803      	ldr	r3, [r0, #0]
   b6984:	2140      	movs	r1, #64	; 0x40
   b6986:	689b      	ldr	r3, [r3, #8]
   b6988:	4798      	blx	r3
        bytesOut = 1;
   b698a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b698c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b698e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6992:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6994:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6996:	689b      	ldr	r3, [r3, #8]
   b6998:	4798      	blx	r3
      bytesOut++;
   b699a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b699c:	e7e4      	b.n	b6968 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b699e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b69a0:	b118      	cbz	r0, b69aa <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b69a2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b69a6:	f001 f8ab 	bl	b7b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b69aa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b69ae:	2100      	movs	r1, #0
   b69b0:	b280      	uxth	r0, r0
   b69b2:	f001 ff22 	bl	b87fa <digitalWrite>
   b69b6:	e7b2      	b.n	b691e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b69b8:	f000 fe7f 	bl	b76ba <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b69bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b69be:	b378      	cbz	r0, b6a20 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b69c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b69c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b69c6:	f000 be37 	b.w	b7638 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b69ca:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b69ce:	2101      	movs	r1, #1
   b69d0:	b280      	uxth	r0, r0
   b69d2:	f001 ff12 	bl	b87fa <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b69d6:	42ae      	cmp	r6, r5
   b69d8:	d0f0      	beq.n	b69bc <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b69da:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b69dc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b69e0:	b118      	cbz	r0, b69ea <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b69e2:	4649      	mov	r1, r9
   b69e4:	f001 f8fa 	bl	b7bdc <_ZN8SPIClass8transferEh>
   b69e8:	e7f5      	b.n	b69d6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b69ea:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b69ec:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b69f0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b69f4:	ea09 0108 	and.w	r1, r9, r8
   b69f8:	b280      	uxth	r0, r0
   b69fa:	f001 fefe 	bl	b87fa <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b69fe:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6a02:	2101      	movs	r1, #1
   b6a04:	b280      	uxth	r0, r0
   b6a06:	f001 fef8 	bl	b87fa <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6a0a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6a0e:	2100      	movs	r1, #0
   b6a10:	b280      	uxth	r0, r0
   b6a12:	f001 fef2 	bl	b87fa <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6a16:	3f01      	subs	r7, #1
   b6a18:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6a1c:	d1e8      	bne.n	b69f0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6a1e:	e7da      	b.n	b69d6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6a20:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6a24:	2101      	movs	r1, #1
   b6a26:	b280      	uxth	r0, r0
   b6a28:	f001 fee7 	bl	b87fa <digitalWrite>
   b6a2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6a2e:	b118      	cbz	r0, b6a38 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6a30:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6a34:	f001 b84a 	b.w	b7acc <_ZN8SPIClass14endTransactionEv>
}
   b6a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6a3c:	000babdc 	.word	0x000babdc

000b6a40 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6a40:	2100      	movs	r1, #0
   b6a42:	220a      	movs	r2, #10
   b6a44:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6a48:	4770      	bx	lr

000b6a4a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b6a4a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b6a4c:	b510      	push	{r4, lr}
   b6a4e:	4604      	mov	r4, r0
    this->pin = pin;
   b6a50:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6a52:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6a54:	b288      	uxth	r0, r1
   b6a56:	f001 fee9 	bl	b882c <digitalRead>
   b6a5a:	b108      	cbz	r0, b6a60 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b6a5c:	2303      	movs	r3, #3
   b6a5e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6a60:	f000 fa86 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6a64:	6020      	str	r0, [r4, #0]
#endif
}
   b6a66:	bd10      	pop	{r4, pc}

000b6a68 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6a68:	b538      	push	{r3, r4, r5, lr}
   b6a6a:	460c      	mov	r4, r1
   b6a6c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b6a6e:	4611      	mov	r1, r2
   b6a70:	b2a0      	uxth	r0, r4
   b6a72:	f001 feb1 	bl	b87d8 <pinMode>
  
  this->attach(pin);
   b6a76:	4621      	mov	r1, r4
   b6a78:	4628      	mov	r0, r5
}
   b6a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b6a7e:	f7ff bfe4 	b.w	b6a4a <_ZN8Debounce6attachEi>

000b6a82 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6a82:	b538      	push	{r3, r4, r5, lr}
   b6a84:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6a86:	79c0      	ldrb	r0, [r0, #7]
   b6a88:	f001 fed0 	bl	b882c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b6a8c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b6a8e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6a90:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6a94:	bf18      	it	ne
   b6a96:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6a98:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b6a9c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b6a9e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6aa0:	d00a      	beq.n	b6ab8 <_ZN8Debounce6updateEv+0x36>
   b6aa2:	f000 fa65 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6aa6:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6aa8:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b6aaa:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b6aae:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6ab0:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6ab2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6ab6:	bd38      	pop	{r3, r4, r5, pc}
   b6ab8:	f000 fa5a 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b6abc:	6823      	ldr	r3, [r4, #0]
   b6abe:	1ac0      	subs	r0, r0, r3
   b6ac0:	88a3      	ldrh	r3, [r4, #4]
   b6ac2:	4298      	cmp	r0, r3
   b6ac4:	d3f4      	bcc.n	b6ab0 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b6ac6:	79a3      	ldrb	r3, [r4, #6]
   b6ac8:	f003 0301 	and.w	r3, r3, #1
   b6acc:	42ab      	cmp	r3, r5
   b6ace:	d0ef      	beq.n	b6ab0 <_ZN8Debounce6updateEv+0x2e>
   b6ad0:	f000 fa4e 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b6ad4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b6ad6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b6ad8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b6adc:	f043 0308 	orr.w	r3, r3, #8
   b6ae0:	e7e5      	b.n	b6aae <_ZN8Debounce6updateEv+0x2c>

000b6ae2 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b6ae2:	7980      	ldrb	r0, [r0, #6]
   b6ae4:	f000 0009 	and.w	r0, r0, #9
   b6ae8:	f1a0 0308 	sub.w	r3, r0, #8
   b6aec:	4258      	negs	r0, r3
   b6aee:	4158      	adcs	r0, r3
   b6af0:	4770      	bx	lr

000b6af2 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b6af2:	4770      	bx	lr

000b6af4 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b6af4:	b510      	push	{r4, lr}
   b6af6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b6af8:	2160      	movs	r1, #96	; 0x60
   b6afa:	6800      	ldr	r0, [r0, #0]
   b6afc:	f000 fdd2 	bl	b76a4 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b6b00:	6820      	ldr	r0, [r4, #0]
   b6b02:	f000 fdda 	bl	b76ba <_ZN7TwoWire15endTransmissionEv>
}
   b6b06:	fab0 f080 	clz	r0, r0
   b6b0a:	0940      	lsrs	r0, r0, #5
   b6b0c:	bd10      	pop	{r4, pc}

000b6b0e <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b6b0e:	b538      	push	{r3, r4, r5, lr}
   b6b10:	4605      	mov	r5, r0
   b6b12:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b6b14:	6800      	ldr	r0, [r0, #0]
   b6b16:	2160      	movs	r1, #96	; 0x60
   b6b18:	f000 fdc4 	bl	b76a4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b6b1c:	6828      	ldr	r0, [r5, #0]
   b6b1e:	6803      	ldr	r3, [r0, #0]
   b6b20:	4621      	mov	r1, r4
   b6b22:	689b      	ldr	r3, [r3, #8]
   b6b24:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b6b26:	6828      	ldr	r0, [r5, #0]
   b6b28:	2100      	movs	r1, #0
   b6b2a:	f000 fdc2 	bl	b76b2 <_ZN7TwoWire15endTransmissionEh>
   b6b2e:	b108      	cbz	r0, b6b34 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b6b30:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b6b32:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b6b34:	6828      	ldr	r0, [r5, #0]
   b6b36:	2202      	movs	r2, #2
   b6b38:	2160      	movs	r1, #96	; 0x60
   b6b3a:	f000 fdb0 	bl	b769e <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b6b3e:	6828      	ldr	r0, [r5, #0]
   b6b40:	6803      	ldr	r3, [r0, #0]
   b6b42:	691b      	ldr	r3, [r3, #16]
   b6b44:	4798      	blx	r3
   b6b46:	2800      	cmp	r0, #0
   b6b48:	d0f2      	beq.n	b6b30 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b6b4a:	6828      	ldr	r0, [r5, #0]
   b6b4c:	6803      	ldr	r3, [r0, #0]
   b6b4e:	695b      	ldr	r3, [r3, #20]
   b6b50:	4798      	blx	r3
   b6b52:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b6b54:	6828      	ldr	r0, [r5, #0]
   b6b56:	6803      	ldr	r3, [r0, #0]
   b6b58:	695b      	ldr	r3, [r3, #20]
   b6b5a:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b6b5c:	b2e4      	uxtb	r4, r4
   b6b5e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b6b62:	b280      	uxth	r0, r0
   b6b64:	e7e5      	b.n	b6b32 <_ZN8VCNL404011readCommandEh+0x24>

000b6b66 <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   b6b66:	2108      	movs	r1, #8
   b6b68:	f7ff bfd1 	b.w	b6b0e <_ZN8VCNL404011readCommandEh>

000b6b6c <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   b6b6c:	2109      	movs	r1, #9
   b6b6e:	f7ff bfce 	b.w	b6b0e <_ZN8VCNL404011readCommandEh>

000b6b72 <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b6b72:	210c      	movs	r1, #12
   b6b74:	f7ff bfcb 	b.w	b6b0e <_ZN8VCNL404011readCommandEh>

000b6b78 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b6b78:	b570      	push	{r4, r5, r6, lr}
   b6b7a:	4604      	mov	r4, r0
   b6b7c:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b6b7e:	6800      	ldr	r0, [r0, #0]
   b6b80:	2160      	movs	r1, #96	; 0x60
{
   b6b82:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b6b84:	f000 fd8e 	bl	b76a4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b6b88:	6820      	ldr	r0, [r4, #0]
   b6b8a:	6803      	ldr	r3, [r0, #0]
   b6b8c:	4631      	mov	r1, r6
   b6b8e:	689b      	ldr	r3, [r3, #8]
   b6b90:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b6b92:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b6b94:	6803      	ldr	r3, [r0, #0]
   b6b96:	b2e9      	uxtb	r1, r5
   b6b98:	689b      	ldr	r3, [r3, #8]
   b6b9a:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b6b9c:	6820      	ldr	r0, [r4, #0]
   b6b9e:	6803      	ldr	r3, [r0, #0]
   b6ba0:	0a29      	lsrs	r1, r5, #8
   b6ba2:	689b      	ldr	r3, [r3, #8]
   b6ba4:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b6ba6:	6820      	ldr	r0, [r4, #0]
   b6ba8:	f000 fd87 	bl	b76ba <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b6bac:	fab0 f080 	clz	r0, r0
   b6bb0:	0940      	lsrs	r0, r0, #5
   b6bb2:	bd70      	pop	{r4, r5, r6, pc}

000b6bb4 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b6bb4:	b570      	push	{r4, r5, r6, lr}
   b6bb6:	4604      	mov	r4, r0
   b6bb8:	460d      	mov	r5, r1
   b6bba:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b6bbc:	f7ff ffa7 	bl	b6b0e <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b6bc0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b6bc4:	ea40 0206 	orr.w	r2, r0, r6
   b6bc8:	4629      	mov	r1, r5
   b6bca:	4620      	mov	r0, r4
}
   b6bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b6bd0:	f7ff bfd2 	b.w	b6b78 <_ZN8VCNL404012writeCommandEht>

000b6bd4 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b6bd4:	b570      	push	{r4, r5, r6, lr}
   b6bd6:	4604      	mov	r4, r0
   b6bd8:	460d      	mov	r5, r1
   b6bda:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b6bdc:	f7ff ff97 	bl	b6b0e <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b6be0:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b6be2:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b6be6:	4629      	mov	r1, r5
   b6be8:	4620      	mov	r0, r4
}
   b6bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b6bee:	f7ff bfc3 	b.w	b6b78 <_ZN8VCNL404012writeCommandEht>

000b6bf2 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b6bf2:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b6bf4:	f7ff ff8b 	bl	b6b0e <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b6bf8:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b6bfc:	bd08      	pop	{r3, pc}

000b6bfe <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b6bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c02:	4604      	mov	r4, r0
   b6c04:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b6c08:	460d      	mov	r5, r1
   b6c0a:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b6c0c:	4616      	mov	r6, r2
   b6c0e:	b16a      	cbz	r2, b6c2c <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b6c10:	f7ff ff7d 	bl	b6b0e <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b6c14:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b6c16:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b6c1a:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b6c1e:	4629      	mov	r1, r5
   b6c20:	4620      	mov	r0, r4
   b6c22:	b136      	cbz	r6, b6c32 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b6c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b6c28:	f7ff bfc4 	b.w	b6bb4 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b6c2c:	f7ff ffe1 	bl	b6bf2 <_ZN8VCNL404016readCommandUpperEh>
   b6c30:	e7f1      	b.n	b6c16 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b6c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b6c36:	f7ff bfcd 	b.w	b6bd4 <_ZN8VCNL404017writeCommandUpperEhh>

000b6c3a <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b6c3a:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b6c3e:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b6c40:	d20e      	bcs.n	b6c60 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b6c42:	299f      	cmp	r1, #159	; 0x9f
   b6c44:	d80e      	bhi.n	b6c64 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b6c46:	294f      	cmp	r1, #79	; 0x4f
   b6c48:	bf8c      	ite	hi
   b6c4a:	2340      	movhi	r3, #64	; 0x40
   b6c4c:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b6c4e:	9300      	str	r3, [sp, #0]
   b6c50:	2201      	movs	r2, #1
   b6c52:	233f      	movs	r3, #63	; 0x3f
   b6c54:	2103      	movs	r1, #3
   b6c56:	f7ff ffd2 	bl	b6bfe <_ZN8VCNL40407bitMaskEhbhh>
}
   b6c5a:	b003      	add	sp, #12
   b6c5c:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b6c60:	23c0      	movs	r3, #192	; 0xc0
   b6c62:	e7f4      	b.n	b6c4e <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b6c64:	2380      	movs	r3, #128	; 0x80
   b6c66:	e7f2      	b.n	b6c4e <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b6c68 <_ZN8VCNL404014powerOnAmbientEv>:
{
   b6c68:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   b6c6a:	2100      	movs	r1, #0
   b6c6c:	9100      	str	r1, [sp, #0]
   b6c6e:	23fe      	movs	r3, #254	; 0xfe
   b6c70:	2201      	movs	r2, #1
   b6c72:	f7ff ffc4 	bl	b6bfe <_ZN8VCNL40407bitMaskEhbhh>
}
   b6c76:	b003      	add	sp, #12
   b6c78:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c7c <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b6c7c:	2907      	cmp	r1, #7
{
   b6c7e:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b6c80:	d80f      	bhi.n	b6ca2 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b6c82:	2903      	cmp	r1, #3
   b6c84:	d80f      	bhi.n	b6ca6 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b6c86:	d010      	beq.n	b6caa <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b6c88:	2902      	cmp	r1, #2
   b6c8a:	bf0c      	ite	eq
   b6c8c:	2304      	moveq	r3, #4
   b6c8e:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b6c90:	9300      	str	r3, [sp, #0]
   b6c92:	2201      	movs	r2, #1
   b6c94:	23f1      	movs	r3, #241	; 0xf1
   b6c96:	2103      	movs	r1, #3
   b6c98:	f7ff ffb1 	bl	b6bfe <_ZN8VCNL40407bitMaskEhbhh>
}
   b6c9c:	b003      	add	sp, #12
   b6c9e:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b6ca2:	230e      	movs	r3, #14
   b6ca4:	e7f4      	b.n	b6c90 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b6ca6:	230c      	movs	r3, #12
   b6ca8:	e7f2      	b.n	b6c90 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b6caa:	2308      	movs	r3, #8
   b6cac:	e7f0      	b.n	b6c90 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b6cae <_ZN8VCNL404016powerOnProximityEv>:
{
   b6cae:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b6cb0:	2300      	movs	r3, #0
   b6cb2:	9300      	str	r3, [sp, #0]
   b6cb4:	2201      	movs	r2, #1
   b6cb6:	23fe      	movs	r3, #254	; 0xfe
   b6cb8:	2103      	movs	r1, #3
   b6cba:	f7ff ffa0 	bl	b6bfe <_ZN8VCNL40407bitMaskEhbhh>
}
   b6cbe:	b003      	add	sp, #12
   b6cc0:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cc4 <_ZN8VCNL404017setProxResolutionEh>:
{
   b6cc4:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b6cc6:	290f      	cmp	r1, #15
   b6cc8:	bf8c      	ite	hi
   b6cca:	2308      	movhi	r3, #8
   b6ccc:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b6cce:	9300      	str	r3, [sp, #0]
   b6cd0:	2200      	movs	r2, #0
   b6cd2:	23f7      	movs	r3, #247	; 0xf7
   b6cd4:	2103      	movs	r1, #3
   b6cd6:	f7ff ff92 	bl	b6bfe <_ZN8VCNL40407bitMaskEhbhh>
}
   b6cda:	b003      	add	sp, #12
   b6cdc:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ce0 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b6ce0:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b6ce2:	2302      	movs	r3, #2
   b6ce4:	9300      	str	r3, [sp, #0]
   b6ce6:	2201      	movs	r2, #1
   b6ce8:	23ef      	movs	r3, #239	; 0xef
   b6cea:	2104      	movs	r1, #4
   b6cec:	f7ff ff87 	bl	b6bfe <_ZN8VCNL40407bitMaskEhbhh>
}
   b6cf0:	b003      	add	sp, #12
   b6cf2:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cf6 <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b6cf6:	29c7      	cmp	r1, #199	; 0xc7
{
   b6cf8:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b6cfa:	d816      	bhi.n	b6d2a <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b6cfc:	29b3      	cmp	r1, #179	; 0xb3
   b6cfe:	d816      	bhi.n	b6d2e <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b6d00:	299f      	cmp	r1, #159	; 0x9f
   b6d02:	d816      	bhi.n	b6d32 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b6d04:	298b      	cmp	r1, #139	; 0x8b
   b6d06:	d816      	bhi.n	b6d36 <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b6d08:	2977      	cmp	r1, #119	; 0x77
   b6d0a:	d816      	bhi.n	b6d3a <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b6d0c:	2963      	cmp	r1, #99	; 0x63
   b6d0e:	d816      	bhi.n	b6d3e <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b6d10:	294a      	cmp	r1, #74	; 0x4a
   b6d12:	bf94      	ite	ls
   b6d14:	2100      	movls	r1, #0
   b6d16:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b6d18:	9100      	str	r1, [sp, #0]
   b6d1a:	23f8      	movs	r3, #248	; 0xf8
   b6d1c:	2200      	movs	r2, #0
   b6d1e:	2104      	movs	r1, #4
   b6d20:	f7ff ff6d 	bl	b6bfe <_ZN8VCNL40407bitMaskEhbhh>
}
   b6d24:	b003      	add	sp, #12
   b6d26:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b6d2a:	2107      	movs	r1, #7
   b6d2c:	e7f4      	b.n	b6d18 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b6d2e:	2106      	movs	r1, #6
   b6d30:	e7f2      	b.n	b6d18 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b6d32:	2105      	movs	r1, #5
   b6d34:	e7f0      	b.n	b6d18 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b6d36:	2104      	movs	r1, #4
   b6d38:	e7ee      	b.n	b6d18 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b6d3a:	2103      	movs	r1, #3
   b6d3c:	e7ec      	b.n	b6d18 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b6d3e:	2102      	movs	r1, #2
   b6d40:	e7ea      	b.n	b6d18 <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b6d42 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b6d42:	b538      	push	{r3, r4, r5, lr}
   b6d44:	4604      	mov	r4, r0
   b6d46:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b6d48:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b6d4a:	f000 fc79 	bl	b7640 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b6d4e:	4620      	mov	r0, r4
   b6d50:	f7ff fed0 	bl	b6af4 <_ZN8VCNL404011isConnectedEv>
   b6d54:	4605      	mov	r5, r0
   b6d56:	b910      	cbnz	r0, b6d5e <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b6d58:	2500      	movs	r5, #0
}
   b6d5a:	4628      	mov	r0, r5
   b6d5c:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b6d5e:	4620      	mov	r0, r4
   b6d60:	f7ff ff07 	bl	b6b72 <_ZN8VCNL40405getIDEv>
   b6d64:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b6d68:	d1f6      	bne.n	b6d58 <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	21c8      	movs	r1, #200	; 0xc8
   b6d6e:	f7ff ffc2 	bl	b6cf6 <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b6d72:	4620      	mov	r0, r4
   b6d74:	2128      	movs	r1, #40	; 0x28
   b6d76:	f7ff ff60 	bl	b6c3a <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b6d7a:	4620      	mov	r0, r4
   b6d7c:	2108      	movs	r1, #8
   b6d7e:	f7ff ff7d 	bl	b6c7c <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b6d82:	2110      	movs	r1, #16
   b6d84:	4620      	mov	r0, r4
   b6d86:	f7ff ff9d 	bl	b6cc4 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b6d8a:	4620      	mov	r0, r4
   b6d8c:	f7ff ffa8 	bl	b6ce0 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b6d90:	4620      	mov	r0, r4
   b6d92:	f7ff ff8c 	bl	b6cae <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b6d96:	e7e0      	b.n	b6d5a <_ZN8VCNL40405beginER7TwoWire+0x18>

000b6d98 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6d98:	f000 bbba 	b.w	b7510 <delay>

000b6d9c <_Z11BlynkMillisv>:
   b6d9c:	f000 b8e8 	b.w	b6f70 <HAL_Timer_Get_Milli_Seconds>

000b6da0 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6da0:	4770      	bx	lr

000b6da2 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6da2:	4770      	bx	lr

000b6da4 <BlynkNoOpCbk>:
{}
   b6da4:	4770      	bx	lr
	...

000b6da8 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6da8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6daa:	bf5a      	itte	pl
   b6dac:	4b02      	ldrpl	r3, [pc, #8]	; (b6db8 <GetReadHandler+0x10>)
   b6dae:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6db2:	2000      	movmi	r0, #0
#endif
}
   b6db4:	4770      	bx	lr
   b6db6:	bf00      	nop
   b6db8:	000babe4 	.word	0x000babe4

000b6dbc <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6dbc:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6dbe:	bf5a      	itte	pl
   b6dc0:	4b02      	ldrpl	r3, [pc, #8]	; (b6dcc <GetWriteHandler+0x10>)
   b6dc2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6dc6:	2000      	movmi	r0, #0
#endif
}
   b6dc8:	4770      	bx	lr
   b6dca:	bf00      	nop
   b6dcc:	000bade4 	.word	0x000bade4

000b6dd0 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b6dd0:	b510      	push	{r4, lr}
   b6dd2:	4b06      	ldr	r3, [pc, #24]	; (b6dec <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6dd4:	6003      	str	r3, [r0, #0]
   b6dd6:	4604      	mov	r4, r0
	if (mutex) {
   b6dd8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6dda:	b108      	cbz	r0, b6de0 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6ddc:	f000 f8a8 	bl	b6f30 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b6de0:	4620      	mov	r0, r4
   b6de2:	f7ff f9b3 	bl	b614c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6de6:	4620      	mov	r0, r4
   b6de8:	bd10      	pop	{r4, pc}
   b6dea:	bf00      	nop
   b6dec:	000bafec 	.word	0x000bafec

000b6df0 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6df0:	b510      	push	{r4, lr}
   b6df2:	4604      	mov	r4, r0
}
   b6df4:	f7ff ffec 	bl	b6dd0 <_ZN16OledWingAdafruitD1Ev>
   b6df8:	4620      	mov	r0, r4
   b6dfa:	2170      	movs	r1, #112	; 0x70
   b6dfc:	f7fd fdf5 	bl	b49ea <_ZdlPvj>
   b6e00:	4620      	mov	r0, r4
   b6e02:	bd10      	pop	{r4, pc}

000b6e04 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6e04:	b530      	push	{r4, r5, lr}
   b6e06:	b085      	sub	sp, #20
   b6e08:	4604      	mov	r4, r0
   b6e0a:	460d      	mov	r5, r1
   b6e0c:	f001 fd7a 	bl	b8904 <_Z19__fetch_global_Wirev>
   b6e10:	4a10      	ldr	r2, [pc, #64]	; (b6e54 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b6e12:	4911      	ldr	r1, [pc, #68]	; (b6e58 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6e14:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6e1c:	2180      	movs	r1, #128	; 0x80
   b6e1e:	4603      	mov	r3, r0
   b6e20:	9200      	str	r2, [sp, #0]
   b6e22:	4620      	mov	r0, r4
   b6e24:	2220      	movs	r2, #32
   b6e26:	f7ff fa09 	bl	b623c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6e2a:	4b0c      	ldr	r3, [pc, #48]	; (b6e5c <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6e2c:	6023      	str	r3, [r4, #0]
   b6e2e:	2300      	movs	r3, #0
   b6e30:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6e34:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6e38:	f7ff fe02 	bl	b6a40 <_ZN8DebounceC1Ev>
   b6e3c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6e40:	f7ff fdfe 	bl	b6a40 <_ZN8DebounceC1Ev>
   b6e44:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6e48:	f7ff fdfa 	bl	b6a40 <_ZN8DebounceC1Ev>
}
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	b005      	add	sp, #20
   b6e50:	bd30      	pop	{r4, r5, pc}
   b6e52:	bf00      	nop
   b6e54:	00061a80 	.word	0x00061a80
   b6e58:	000186a0 	.word	0x000186a0
   b6e5c:	000bafec 	.word	0x000bafec

000b6e60 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6e60:	b513      	push	{r0, r1, r4, lr}
   b6e62:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6e64:	3050      	adds	r0, #80	; 0x50
   b6e66:	f000 f85b 	bl	b6f20 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6e6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6e6c:	07d9      	lsls	r1, r3, #31
   b6e6e:	d505      	bpl.n	b6e7c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6e70:	2202      	movs	r2, #2
   b6e72:	2104      	movs	r1, #4
   b6e74:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6e78:	f7ff fdf6 	bl	b6a68 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6e7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6e7e:	079a      	lsls	r2, r3, #30
   b6e80:	d505      	bpl.n	b6e8e <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b6e82:	2200      	movs	r2, #0
   b6e84:	2103      	movs	r1, #3
   b6e86:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6e8a:	f7ff fded 	bl	b6a68 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b6e8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6e90:	075b      	lsls	r3, r3, #29
   b6e92:	d505      	bpl.n	b6ea0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6e94:	2202      	movs	r2, #2
   b6e96:	4611      	mov	r1, r2
   b6e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6e9c:	f7ff fde4 	bl	b6a68 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6ea0:	2301      	movs	r3, #1
   b6ea2:	9300      	str	r3, [sp, #0]
   b6ea4:	223c      	movs	r2, #60	; 0x3c
   b6ea6:	2102      	movs	r1, #2
   b6ea8:	4620      	mov	r0, r4
   b6eaa:	f7ff facf 	bl	b644c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b6eae:	b002      	add	sp, #8
   b6eb0:	bd10      	pop	{r4, pc}

000b6eb2 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b6eb2:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6eb4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6eb6:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6eb8:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b6eba:	d502      	bpl.n	b6ec2 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b6ebc:	3058      	adds	r0, #88	; 0x58
   b6ebe:	f7ff fde0 	bl	b6a82 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b6ec2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6ec4:	079a      	lsls	r2, r3, #30
   b6ec6:	d503      	bpl.n	b6ed0 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6ec8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6ecc:	f7ff fdd9 	bl	b6a82 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b6ed0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6ed2:	075b      	lsls	r3, r3, #29
   b6ed4:	d505      	bpl.n	b6ee2 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6ed6:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b6ede:	f7ff bdd0 	b.w	b6a82 <_ZN8Debounce6updateEv>
}
   b6ee2:	bd10      	pop	{r4, pc}

000b6ee4 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6ee4:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b6ee6:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6ee8:	f013 0001 	ands.w	r0, r3, #1
   b6eec:	d003      	beq.n	b6ef6 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b6eee:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b6ef2:	f7ff bdf6 	b.w	b6ae2 <_ZN8Debounce4fellEv>
}
   b6ef6:	4770      	bx	lr

000b6ef8 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b6ef8:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b6efa:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b6efc:	f013 0002 	ands.w	r0, r3, #2
   b6f00:	d003      	beq.n	b6f0a <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b6f02:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b6f06:	f7ff bdec 	b.w	b6ae2 <_ZN8Debounce4fellEv>
}
   b6f0a:	4770      	bx	lr

000b6f0c <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b6f0c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b6f0e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b6f10:	f013 0004 	ands.w	r0, r3, #4
   b6f14:	d003      	beq.n	b6f1e <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b6f16:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b6f1a:	f7ff bde2 	b.w	b6ae2 <_ZN8Debounce4fellEv>
}
   b6f1e:	4770      	bx	lr

000b6f20 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6f20:	b508      	push	{r3, lr}
   b6f22:	4b02      	ldr	r3, [pc, #8]	; (b6f2c <os_mutex_create+0xc>)
   b6f24:	681b      	ldr	r3, [r3, #0]
   b6f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f28:	9301      	str	r3, [sp, #4]
   b6f2a:	bd08      	pop	{r3, pc}
   b6f2c:	00030248 	.word	0x00030248

000b6f30 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6f30:	b508      	push	{r3, lr}
   b6f32:	4b02      	ldr	r3, [pc, #8]	; (b6f3c <os_mutex_destroy+0xc>)
   b6f34:	681b      	ldr	r3, [r3, #0]
   b6f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f38:	9301      	str	r3, [sp, #4]
   b6f3a:	bd08      	pop	{r3, pc}
   b6f3c:	00030248 	.word	0x00030248

000b6f40 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6f40:	b508      	push	{r3, lr}
   b6f42:	4b02      	ldr	r3, [pc, #8]	; (b6f4c <os_mutex_recursive_create+0xc>)
   b6f44:	681b      	ldr	r3, [r3, #0]
   b6f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f48:	9301      	str	r3, [sp, #4]
   b6f4a:	bd08      	pop	{r3, pc}
   b6f4c:	00030248 	.word	0x00030248

000b6f50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6f50:	b508      	push	{r3, lr}
   b6f52:	4b02      	ldr	r3, [pc, #8]	; (b6f5c <HAL_RNG_GetRandomNumber+0xc>)
   b6f54:	681b      	ldr	r3, [r3, #0]
   b6f56:	685b      	ldr	r3, [r3, #4]
   b6f58:	9301      	str	r3, [sp, #4]
   b6f5a:	bd08      	pop	{r3, pc}
   b6f5c:	00030218 	.word	0x00030218

000b6f60 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6f60:	b508      	push	{r3, lr}
   b6f62:	4b02      	ldr	r3, [pc, #8]	; (b6f6c <HAL_Delay_Microseconds+0xc>)
   b6f64:	681b      	ldr	r3, [r3, #0]
   b6f66:	68db      	ldr	r3, [r3, #12]
   b6f68:	9301      	str	r3, [sp, #4]
   b6f6a:	bd08      	pop	{r3, pc}
   b6f6c:	00030218 	.word	0x00030218

000b6f70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6f70:	b508      	push	{r3, lr}
   b6f72:	4b02      	ldr	r3, [pc, #8]	; (b6f7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6f74:	681b      	ldr	r3, [r3, #0]
   b6f76:	695b      	ldr	r3, [r3, #20]
   b6f78:	9301      	str	r3, [sp, #4]
   b6f7a:	bd08      	pop	{r3, pc}
   b6f7c:	00030218 	.word	0x00030218

000b6f80 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6f80:	b508      	push	{r3, lr}
   b6f82:	4b02      	ldr	r3, [pc, #8]	; (b6f8c <hal_pin_validate_function+0xc>)
   b6f84:	681b      	ldr	r3, [r3, #0]
   b6f86:	685b      	ldr	r3, [r3, #4]
   b6f88:	9301      	str	r3, [sp, #4]
   b6f8a:	bd08      	pop	{r3, pc}
   b6f8c:	0003022c 	.word	0x0003022c

000b6f90 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6f90:	b508      	push	{r3, lr}
   b6f92:	4b02      	ldr	r3, [pc, #8]	; (b6f9c <hal_gpio_mode+0xc>)
   b6f94:	681b      	ldr	r3, [r3, #0]
   b6f96:	689b      	ldr	r3, [r3, #8]
   b6f98:	9301      	str	r3, [sp, #4]
   b6f9a:	bd08      	pop	{r3, pc}
   b6f9c:	0003022c 	.word	0x0003022c

000b6fa0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6fa0:	b508      	push	{r3, lr}
   b6fa2:	4b02      	ldr	r3, [pc, #8]	; (b6fac <hal_gpio_get_mode+0xc>)
   b6fa4:	681b      	ldr	r3, [r3, #0]
   b6fa6:	68db      	ldr	r3, [r3, #12]
   b6fa8:	9301      	str	r3, [sp, #4]
   b6faa:	bd08      	pop	{r3, pc}
   b6fac:	0003022c 	.word	0x0003022c

000b6fb0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6fb0:	b508      	push	{r3, lr}
   b6fb2:	4b02      	ldr	r3, [pc, #8]	; (b6fbc <hal_gpio_write+0xc>)
   b6fb4:	681b      	ldr	r3, [r3, #0]
   b6fb6:	691b      	ldr	r3, [r3, #16]
   b6fb8:	9301      	str	r3, [sp, #4]
   b6fba:	bd08      	pop	{r3, pc}
   b6fbc:	0003022c 	.word	0x0003022c

000b6fc0 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6fc0:	b508      	push	{r3, lr}
   b6fc2:	4b02      	ldr	r3, [pc, #8]	; (b6fcc <hal_gpio_read+0xc>)
   b6fc4:	681b      	ldr	r3, [r3, #0]
   b6fc6:	695b      	ldr	r3, [r3, #20]
   b6fc8:	9301      	str	r3, [sp, #4]
   b6fca:	bd08      	pop	{r3, pc}
   b6fcc:	0003022c 	.word	0x0003022c

000b6fd0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b6fd0:	b508      	push	{r3, lr}
   b6fd2:	4b02      	ldr	r3, [pc, #8]	; (b6fdc <HAL_DAC_Write+0xc>)
   b6fd4:	681b      	ldr	r3, [r3, #0]
   b6fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fd8:	9301      	str	r3, [sp, #4]
   b6fda:	bd08      	pop	{r3, pc}
   b6fdc:	0003022c 	.word	0x0003022c

000b6fe0 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6fe0:	b508      	push	{r3, lr}
   b6fe2:	4b02      	ldr	r3, [pc, #8]	; (b6fec <hal_adc_read+0xc>)
   b6fe4:	681b      	ldr	r3, [r3, #0]
   b6fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6fe8:	9301      	str	r3, [sp, #4]
   b6fea:	bd08      	pop	{r3, pc}
   b6fec:	0003022c 	.word	0x0003022c

000b6ff0 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6ff0:	b508      	push	{r3, lr}
   b6ff2:	4b02      	ldr	r3, [pc, #8]	; (b6ffc <hal_pwm_write_ext+0xc>)
   b6ff4:	681b      	ldr	r3, [r3, #0]
   b6ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6ff8:	9301      	str	r3, [sp, #4]
   b6ffa:	bd08      	pop	{r3, pc}
   b6ffc:	0003022c 	.word	0x0003022c

000b7000 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7000:	b508      	push	{r3, lr}
   b7002:	4b02      	ldr	r3, [pc, #8]	; (b700c <hal_i2c_set_speed+0xc>)
   b7004:	681b      	ldr	r3, [r3, #0]
   b7006:	681b      	ldr	r3, [r3, #0]
   b7008:	9301      	str	r3, [sp, #4]
   b700a:	bd08      	pop	{r3, pc}
   b700c:	00030228 	.word	0x00030228

000b7010 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7010:	b508      	push	{r3, lr}
   b7012:	4b02      	ldr	r3, [pc, #8]	; (b701c <hal_i2c_begin+0xc>)
   b7014:	681b      	ldr	r3, [r3, #0]
   b7016:	68db      	ldr	r3, [r3, #12]
   b7018:	9301      	str	r3, [sp, #4]
   b701a:	bd08      	pop	{r3, pc}
   b701c:	00030228 	.word	0x00030228

000b7020 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7020:	b508      	push	{r3, lr}
   b7022:	4b02      	ldr	r3, [pc, #8]	; (b702c <hal_i2c_begin_transmission+0xc>)
   b7024:	681b      	ldr	r3, [r3, #0]
   b7026:	699b      	ldr	r3, [r3, #24]
   b7028:	9301      	str	r3, [sp, #4]
   b702a:	bd08      	pop	{r3, pc}
   b702c:	00030228 	.word	0x00030228

000b7030 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7030:	b508      	push	{r3, lr}
   b7032:	4b02      	ldr	r3, [pc, #8]	; (b703c <hal_i2c_end_transmission+0xc>)
   b7034:	681b      	ldr	r3, [r3, #0]
   b7036:	69db      	ldr	r3, [r3, #28]
   b7038:	9301      	str	r3, [sp, #4]
   b703a:	bd08      	pop	{r3, pc}
   b703c:	00030228 	.word	0x00030228

000b7040 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7040:	b508      	push	{r3, lr}
   b7042:	4b02      	ldr	r3, [pc, #8]	; (b704c <hal_i2c_write+0xc>)
   b7044:	681b      	ldr	r3, [r3, #0]
   b7046:	6a1b      	ldr	r3, [r3, #32]
   b7048:	9301      	str	r3, [sp, #4]
   b704a:	bd08      	pop	{r3, pc}
   b704c:	00030228 	.word	0x00030228

000b7050 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7050:	b508      	push	{r3, lr}
   b7052:	4b02      	ldr	r3, [pc, #8]	; (b705c <hal_i2c_available+0xc>)
   b7054:	681b      	ldr	r3, [r3, #0]
   b7056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7058:	9301      	str	r3, [sp, #4]
   b705a:	bd08      	pop	{r3, pc}
   b705c:	00030228 	.word	0x00030228

000b7060 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7060:	b508      	push	{r3, lr}
   b7062:	4b02      	ldr	r3, [pc, #8]	; (b706c <hal_i2c_read+0xc>)
   b7064:	681b      	ldr	r3, [r3, #0]
   b7066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7068:	9301      	str	r3, [sp, #4]
   b706a:	bd08      	pop	{r3, pc}
   b706c:	00030228 	.word	0x00030228

000b7070 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7070:	b508      	push	{r3, lr}
   b7072:	4b02      	ldr	r3, [pc, #8]	; (b707c <hal_i2c_peek+0xc>)
   b7074:	681b      	ldr	r3, [r3, #0]
   b7076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7078:	9301      	str	r3, [sp, #4]
   b707a:	bd08      	pop	{r3, pc}
   b707c:	00030228 	.word	0x00030228

000b7080 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7080:	b508      	push	{r3, lr}
   b7082:	4b02      	ldr	r3, [pc, #8]	; (b708c <hal_i2c_flush+0xc>)
   b7084:	681b      	ldr	r3, [r3, #0]
   b7086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7088:	9301      	str	r3, [sp, #4]
   b708a:	bd08      	pop	{r3, pc}
   b708c:	00030228 	.word	0x00030228

000b7090 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7090:	b508      	push	{r3, lr}
   b7092:	4b02      	ldr	r3, [pc, #8]	; (b709c <hal_i2c_is_enabled+0xc>)
   b7094:	681b      	ldr	r3, [r3, #0]
   b7096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7098:	9301      	str	r3, [sp, #4]
   b709a:	bd08      	pop	{r3, pc}
   b709c:	00030228 	.word	0x00030228

000b70a0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b70a0:	b508      	push	{r3, lr}
   b70a2:	4b02      	ldr	r3, [pc, #8]	; (b70ac <hal_i2c_init+0xc>)
   b70a4:	681b      	ldr	r3, [r3, #0]
   b70a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70a8:	9301      	str	r3, [sp, #4]
   b70aa:	bd08      	pop	{r3, pc}
   b70ac:	00030228 	.word	0x00030228

000b70b0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b70b0:	b508      	push	{r3, lr}
   b70b2:	4b02      	ldr	r3, [pc, #8]	; (b70bc <hal_i2c_request_ex+0xc>)
   b70b4:	681b      	ldr	r3, [r3, #0]
   b70b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b70b8:	9301      	str	r3, [sp, #4]
   b70ba:	bd08      	pop	{r3, pc}
   b70bc:	00030228 	.word	0x00030228

000b70c0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b70c0:	b508      	push	{r3, lr}
   b70c2:	4b02      	ldr	r3, [pc, #8]	; (b70cc <if_index_to_name+0xc>)
   b70c4:	681b      	ldr	r3, [r3, #0]
   b70c6:	695b      	ldr	r3, [r3, #20]
   b70c8:	9301      	str	r3, [sp, #4]
   b70ca:	bd08      	pop	{r3, pc}
   b70cc:	0003026c 	.word	0x0003026c

000b70d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b70d0:	b508      	push	{r3, lr}
   b70d2:	4b02      	ldr	r3, [pc, #8]	; (b70dc <inet_inet_ntop+0xc>)
   b70d4:	681b      	ldr	r3, [r3, #0]
   b70d6:	695b      	ldr	r3, [r3, #20]
   b70d8:	9301      	str	r3, [sp, #4]
   b70da:	bd08      	pop	{r3, pc}
   b70dc:	00030264 	.word	0x00030264

000b70e0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b70e0:	b508      	push	{r3, lr}
   b70e2:	4b02      	ldr	r3, [pc, #8]	; (b70ec <inet_htonl+0xc>)
   b70e4:	681b      	ldr	r3, [r3, #0]
   b70e6:	6a1b      	ldr	r3, [r3, #32]
   b70e8:	9301      	str	r3, [sp, #4]
   b70ea:	bd08      	pop	{r3, pc}
   b70ec:	00030264 	.word	0x00030264

000b70f0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b70f0:	b508      	push	{r3, lr}
   b70f2:	4b02      	ldr	r3, [pc, #8]	; (b70fc <inet_ntohs+0xc>)
   b70f4:	681b      	ldr	r3, [r3, #0]
   b70f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70f8:	9301      	str	r3, [sp, #4]
   b70fa:	bd08      	pop	{r3, pc}
   b70fc:	00030264 	.word	0x00030264

000b7100 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7100:	b508      	push	{r3, lr}
   b7102:	4b02      	ldr	r3, [pc, #8]	; (b710c <inet_htons+0xc>)
   b7104:	681b      	ldr	r3, [r3, #0]
   b7106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7108:	9301      	str	r3, [sp, #4]
   b710a:	bd08      	pop	{r3, pc}
   b710c:	00030264 	.word	0x00030264

000b7110 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7110:	b508      	push	{r3, lr}
   b7112:	4b02      	ldr	r3, [pc, #8]	; (b711c <netdb_freeaddrinfo+0xc>)
   b7114:	681b      	ldr	r3, [r3, #0]
   b7116:	689b      	ldr	r3, [r3, #8]
   b7118:	9301      	str	r3, [sp, #4]
   b711a:	bd08      	pop	{r3, pc}
   b711c:	00030268 	.word	0x00030268

000b7120 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7120:	b508      	push	{r3, lr}
   b7122:	4b02      	ldr	r3, [pc, #8]	; (b712c <netdb_getaddrinfo+0xc>)
   b7124:	681b      	ldr	r3, [r3, #0]
   b7126:	68db      	ldr	r3, [r3, #12]
   b7128:	9301      	str	r3, [sp, #4]
   b712a:	bd08      	pop	{r3, pc}
   b712c:	00030268 	.word	0x00030268

000b7130 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7130:	b508      	push	{r3, lr}
   b7132:	4b02      	ldr	r3, [pc, #8]	; (b713c <sock_setsockopt+0xc>)
   b7134:	681b      	ldr	r3, [r3, #0]
   b7136:	699b      	ldr	r3, [r3, #24]
   b7138:	9301      	str	r3, [sp, #4]
   b713a:	bd08      	pop	{r3, pc}
   b713c:	00030238 	.word	0x00030238

000b7140 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7140:	b508      	push	{r3, lr}
   b7142:	4b02      	ldr	r3, [pc, #8]	; (b714c <sock_close+0xc>)
   b7144:	681b      	ldr	r3, [r3, #0]
   b7146:	69db      	ldr	r3, [r3, #28]
   b7148:	9301      	str	r3, [sp, #4]
   b714a:	bd08      	pop	{r3, pc}
   b714c:	00030238 	.word	0x00030238

000b7150 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7150:	b508      	push	{r3, lr}
   b7152:	4b02      	ldr	r3, [pc, #8]	; (b715c <sock_connect+0xc>)
   b7154:	681b      	ldr	r3, [r3, #0]
   b7156:	6a1b      	ldr	r3, [r3, #32]
   b7158:	9301      	str	r3, [sp, #4]
   b715a:	bd08      	pop	{r3, pc}
   b715c:	00030238 	.word	0x00030238

000b7160 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7160:	b508      	push	{r3, lr}
   b7162:	4b02      	ldr	r3, [pc, #8]	; (b716c <sock_recv+0xc>)
   b7164:	681b      	ldr	r3, [r3, #0]
   b7166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7168:	9301      	str	r3, [sp, #4]
   b716a:	bd08      	pop	{r3, pc}
   b716c:	00030238 	.word	0x00030238

000b7170 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7170:	b508      	push	{r3, lr}
   b7172:	4b02      	ldr	r3, [pc, #8]	; (b717c <sock_send+0xc>)
   b7174:	681b      	ldr	r3, [r3, #0]
   b7176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7178:	9301      	str	r3, [sp, #4]
   b717a:	bd08      	pop	{r3, pc}
   b717c:	00030238 	.word	0x00030238

000b7180 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7180:	b508      	push	{r3, lr}
   b7182:	4b02      	ldr	r3, [pc, #8]	; (b718c <sock_socket+0xc>)
   b7184:	681b      	ldr	r3, [r3, #0]
   b7186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7188:	9301      	str	r3, [sp, #4]
   b718a:	bd08      	pop	{r3, pc}
   b718c:	00030238 	.word	0x00030238

000b7190 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7190:	b508      	push	{r3, lr}
   b7192:	4b02      	ldr	r3, [pc, #8]	; (b719c <hal_spi_begin+0xc>)
   b7194:	681b      	ldr	r3, [r3, #0]
   b7196:	681b      	ldr	r3, [r3, #0]
   b7198:	9301      	str	r3, [sp, #4]
   b719a:	bd08      	pop	{r3, pc}
   b719c:	00030230 	.word	0x00030230

000b71a0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b71a0:	b508      	push	{r3, lr}
   b71a2:	4b02      	ldr	r3, [pc, #8]	; (b71ac <hal_spi_transfer+0xc>)
   b71a4:	681b      	ldr	r3, [r3, #0]
   b71a6:	695b      	ldr	r3, [r3, #20]
   b71a8:	9301      	str	r3, [sp, #4]
   b71aa:	bd08      	pop	{r3, pc}
   b71ac:	00030230 	.word	0x00030230

000b71b0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b71b0:	b508      	push	{r3, lr}
   b71b2:	4b02      	ldr	r3, [pc, #8]	; (b71bc <hal_spi_init+0xc>)
   b71b4:	681b      	ldr	r3, [r3, #0]
   b71b6:	69db      	ldr	r3, [r3, #28]
   b71b8:	9301      	str	r3, [sp, #4]
   b71ba:	bd08      	pop	{r3, pc}
   b71bc:	00030230 	.word	0x00030230

000b71c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b71c0:	b508      	push	{r3, lr}
   b71c2:	4b02      	ldr	r3, [pc, #8]	; (b71cc <hal_spi_is_enabled+0xc>)
   b71c4:	681b      	ldr	r3, [r3, #0]
   b71c6:	6a1b      	ldr	r3, [r3, #32]
   b71c8:	9301      	str	r3, [sp, #4]
   b71ca:	bd08      	pop	{r3, pc}
   b71cc:	00030230 	.word	0x00030230

000b71d0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b71d0:	b508      	push	{r3, lr}
   b71d2:	4b02      	ldr	r3, [pc, #8]	; (b71dc <hal_spi_info+0xc>)
   b71d4:	681b      	ldr	r3, [r3, #0]
   b71d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71d8:	9301      	str	r3, [sp, #4]
   b71da:	bd08      	pop	{r3, pc}
   b71dc:	00030230 	.word	0x00030230

000b71e0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b71e0:	b508      	push	{r3, lr}
   b71e2:	4b02      	ldr	r3, [pc, #8]	; (b71ec <hal_spi_set_settings+0xc>)
   b71e4:	681b      	ldr	r3, [r3, #0]
   b71e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71e8:	9301      	str	r3, [sp, #4]
   b71ea:	bd08      	pop	{r3, pc}
   b71ec:	00030230 	.word	0x00030230

000b71f0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b71f0:	b508      	push	{r3, lr}
   b71f2:	4b02      	ldr	r3, [pc, #8]	; (b71fc <hal_spi_acquire+0xc>)
   b71f4:	681b      	ldr	r3, [r3, #0]
   b71f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71f8:	9301      	str	r3, [sp, #4]
   b71fa:	bd08      	pop	{r3, pc}
   b71fc:	00030230 	.word	0x00030230

000b7200 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7200:	b508      	push	{r3, lr}
   b7202:	4b02      	ldr	r3, [pc, #8]	; (b720c <hal_spi_release+0xc>)
   b7204:	681b      	ldr	r3, [r3, #0]
   b7206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7208:	9301      	str	r3, [sp, #4]
   b720a:	bd08      	pop	{r3, pc}
   b720c:	00030230 	.word	0x00030230

000b7210 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b02      	ldr	r3, [pc, #8]	; (b721c <hal_usart_write+0xc>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	68db      	ldr	r3, [r3, #12]
   b7218:	9301      	str	r3, [sp, #4]
   b721a:	bd08      	pop	{r3, pc}
   b721c:	0003023c 	.word	0x0003023c

000b7220 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b02      	ldr	r3, [pc, #8]	; (b722c <hal_usart_available+0xc>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	691b      	ldr	r3, [r3, #16]
   b7228:	9301      	str	r3, [sp, #4]
   b722a:	bd08      	pop	{r3, pc}
   b722c:	0003023c 	.word	0x0003023c

000b7230 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7230:	b508      	push	{r3, lr}
   b7232:	4b02      	ldr	r3, [pc, #8]	; (b723c <hal_usart_read+0xc>)
   b7234:	681b      	ldr	r3, [r3, #0]
   b7236:	695b      	ldr	r3, [r3, #20]
   b7238:	9301      	str	r3, [sp, #4]
   b723a:	bd08      	pop	{r3, pc}
   b723c:	0003023c 	.word	0x0003023c

000b7240 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7240:	b508      	push	{r3, lr}
   b7242:	4b02      	ldr	r3, [pc, #8]	; (b724c <hal_usart_peek+0xc>)
   b7244:	681b      	ldr	r3, [r3, #0]
   b7246:	699b      	ldr	r3, [r3, #24]
   b7248:	9301      	str	r3, [sp, #4]
   b724a:	bd08      	pop	{r3, pc}
   b724c:	0003023c 	.word	0x0003023c

000b7250 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7250:	b508      	push	{r3, lr}
   b7252:	4b02      	ldr	r3, [pc, #8]	; (b725c <hal_usart_flush+0xc>)
   b7254:	681b      	ldr	r3, [r3, #0]
   b7256:	69db      	ldr	r3, [r3, #28]
   b7258:	9301      	str	r3, [sp, #4]
   b725a:	bd08      	pop	{r3, pc}
   b725c:	0003023c 	.word	0x0003023c

000b7260 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b02      	ldr	r3, [pc, #8]	; (b726c <hal_usart_is_enabled+0xc>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	6a1b      	ldr	r3, [r3, #32]
   b7268:	9301      	str	r3, [sp, #4]
   b726a:	bd08      	pop	{r3, pc}
   b726c:	0003023c 	.word	0x0003023c

000b7270 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b02      	ldr	r3, [pc, #8]	; (b727c <hal_usart_available_data_for_write+0xc>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7278:	9301      	str	r3, [sp, #4]
   b727a:	bd08      	pop	{r3, pc}
   b727c:	0003023c 	.word	0x0003023c

000b7280 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7280:	b508      	push	{r3, lr}
   b7282:	4b02      	ldr	r3, [pc, #8]	; (b728c <hal_usart_init_ex+0xc>)
   b7284:	681b      	ldr	r3, [r3, #0]
   b7286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7288:	9301      	str	r3, [sp, #4]
   b728a:	bd08      	pop	{r3, pc}
   b728c:	0003023c 	.word	0x0003023c

000b7290 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7290:	b508      	push	{r3, lr}
   b7292:	4b02      	ldr	r3, [pc, #8]	; (b729c <HAL_USB_USART_Init+0xc>)
   b7294:	681b      	ldr	r3, [r3, #0]
   b7296:	681b      	ldr	r3, [r3, #0]
   b7298:	9301      	str	r3, [sp, #4]
   b729a:	bd08      	pop	{r3, pc}
   b729c:	0003024c 	.word	0x0003024c

000b72a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b72a0:	b508      	push	{r3, lr}
   b72a2:	4b02      	ldr	r3, [pc, #8]	; (b72ac <HAL_USB_USART_Begin+0xc>)
   b72a4:	681b      	ldr	r3, [r3, #0]
   b72a6:	685b      	ldr	r3, [r3, #4]
   b72a8:	9301      	str	r3, [sp, #4]
   b72aa:	bd08      	pop	{r3, pc}
   b72ac:	0003024c 	.word	0x0003024c

000b72b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b72b0:	b508      	push	{r3, lr}
   b72b2:	4b02      	ldr	r3, [pc, #8]	; (b72bc <HAL_USB_USART_Available_Data+0xc>)
   b72b4:	681b      	ldr	r3, [r3, #0]
   b72b6:	691b      	ldr	r3, [r3, #16]
   b72b8:	9301      	str	r3, [sp, #4]
   b72ba:	bd08      	pop	{r3, pc}
   b72bc:	0003024c 	.word	0x0003024c

000b72c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	695b      	ldr	r3, [r3, #20]
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	0003024c 	.word	0x0003024c

000b72d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <HAL_USB_USART_Receive_Data+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	699b      	ldr	r3, [r3, #24]
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	0003024c 	.word	0x0003024c

000b72e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <HAL_USB_USART_Send_Data+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	69db      	ldr	r3, [r3, #28]
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	0003024c 	.word	0x0003024c

000b72f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <HAL_USB_USART_Flush_Data+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6a1b      	ldr	r3, [r3, #32]
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	0003024c 	.word	0x0003024c

000b7300 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <HAL_USB_USART_Is_Connected+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	0003024c 	.word	0x0003024c

000b7310 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <panic_+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030260 	.word	0x00030260

000b7320 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <log_message+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030260 	.word	0x00030260

000b7330 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <set_system_mode+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	685b      	ldr	r3, [r3, #4]
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	00030220 	.word	0x00030220

000b7340 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <system_delay_ms+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	695b      	ldr	r3, [r3, #20]
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	00030220 	.word	0x00030220

000b7350 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <system_thread_set_state+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	00030220 	.word	0x00030220

000b7360 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b03      	ldr	r3, [pc, #12]	; (b7370 <system_ctrl_set_app_request_handler+0x10>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b736a:	9301      	str	r3, [sp, #4]
   b736c:	bd08      	pop	{r3, pc}
   b736e:	0000      	.short	0x0000
   b7370:	00030220 	.word	0x00030220

000b7374 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b03      	ldr	r3, [pc, #12]	; (b7384 <system_ctrl_set_result+0x10>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b737e:	9301      	str	r3, [sp, #4]
   b7380:	bd08      	pop	{r3, pc}
   b7382:	0000      	.short	0x0000
   b7384:	00030220 	.word	0x00030220

000b7388 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7388:	b508      	push	{r3, lr}
   b738a:	4b02      	ldr	r3, [pc, #8]	; (b7394 <spark_process+0xc>)
   b738c:	681b      	ldr	r3, [r3, #0]
   b738e:	689b      	ldr	r3, [r3, #8]
   b7390:	9301      	str	r3, [sp, #4]
   b7392:	bd08      	pop	{r3, pc}
   b7394:	00030244 	.word	0x00030244

000b7398 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7398:	b508      	push	{r3, lr}
   b739a:	4b02      	ldr	r3, [pc, #8]	; (b73a4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b739c:	681b      	ldr	r3, [r3, #0]
   b739e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b73a0:	9301      	str	r3, [sp, #4]
   b73a2:	bd08      	pop	{r3, pc}
   b73a4:	00030244 	.word	0x00030244

000b73a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b73a8:	b508      	push	{r3, lr}
   b73aa:	4b02      	ldr	r3, [pc, #8]	; (b73b4 <network_connect+0xc>)
   b73ac:	681b      	ldr	r3, [r3, #0]
   b73ae:	685b      	ldr	r3, [r3, #4]
   b73b0:	9301      	str	r3, [sp, #4]
   b73b2:	bd08      	pop	{r3, pc}
   b73b4:	00030240 	.word	0x00030240

000b73b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b73b8:	b508      	push	{r3, lr}
   b73ba:	4b02      	ldr	r3, [pc, #8]	; (b73c4 <network_connecting+0xc>)
   b73bc:	681b      	ldr	r3, [r3, #0]
   b73be:	689b      	ldr	r3, [r3, #8]
   b73c0:	9301      	str	r3, [sp, #4]
   b73c2:	bd08      	pop	{r3, pc}
   b73c4:	00030240 	.word	0x00030240

000b73c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b73c8:	b508      	push	{r3, lr}
   b73ca:	4b02      	ldr	r3, [pc, #8]	; (b73d4 <network_disconnect+0xc>)
   b73cc:	681b      	ldr	r3, [r3, #0]
   b73ce:	68db      	ldr	r3, [r3, #12]
   b73d0:	9301      	str	r3, [sp, #4]
   b73d2:	bd08      	pop	{r3, pc}
   b73d4:	00030240 	.word	0x00030240

000b73d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b73d8:	b508      	push	{r3, lr}
   b73da:	4b02      	ldr	r3, [pc, #8]	; (b73e4 <network_ready+0xc>)
   b73dc:	681b      	ldr	r3, [r3, #0]
   b73de:	691b      	ldr	r3, [r3, #16]
   b73e0:	9301      	str	r3, [sp, #4]
   b73e2:	bd08      	pop	{r3, pc}
   b73e4:	00030240 	.word	0x00030240

000b73e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b73e8:	b508      	push	{r3, lr}
   b73ea:	4b02      	ldr	r3, [pc, #8]	; (b73f4 <network_on+0xc>)
   b73ec:	681b      	ldr	r3, [r3, #0]
   b73ee:	695b      	ldr	r3, [r3, #20]
   b73f0:	9301      	str	r3, [sp, #4]
   b73f2:	bd08      	pop	{r3, pc}
   b73f4:	00030240 	.word	0x00030240

000b73f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b73f8:	b508      	push	{r3, lr}
   b73fa:	4b02      	ldr	r3, [pc, #8]	; (b7404 <network_off+0xc>)
   b73fc:	681b      	ldr	r3, [r3, #0]
   b73fe:	699b      	ldr	r3, [r3, #24]
   b7400:	9301      	str	r3, [sp, #4]
   b7402:	bd08      	pop	{r3, pc}
   b7404:	00030240 	.word	0x00030240

000b7408 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7408:	b508      	push	{r3, lr}
   b740a:	4b02      	ldr	r3, [pc, #8]	; (b7414 <network_listen+0xc>)
   b740c:	681b      	ldr	r3, [r3, #0]
   b740e:	69db      	ldr	r3, [r3, #28]
   b7410:	9301      	str	r3, [sp, #4]
   b7412:	bd08      	pop	{r3, pc}
   b7414:	00030240 	.word	0x00030240

000b7418 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7418:	b508      	push	{r3, lr}
   b741a:	4b02      	ldr	r3, [pc, #8]	; (b7424 <network_listening+0xc>)
   b741c:	681b      	ldr	r3, [r3, #0]
   b741e:	6a1b      	ldr	r3, [r3, #32]
   b7420:	9301      	str	r3, [sp, #4]
   b7422:	bd08      	pop	{r3, pc}
   b7424:	00030240 	.word	0x00030240

000b7428 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7428:	b508      	push	{r3, lr}
   b742a:	4b02      	ldr	r3, [pc, #8]	; (b7434 <network_set_listen_timeout+0xc>)
   b742c:	681b      	ldr	r3, [r3, #0]
   b742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7430:	9301      	str	r3, [sp, #4]
   b7432:	bd08      	pop	{r3, pc}
   b7434:	00030240 	.word	0x00030240

000b7438 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7438:	b508      	push	{r3, lr}
   b743a:	4b02      	ldr	r3, [pc, #8]	; (b7444 <network_get_listen_timeout+0xc>)
   b743c:	681b      	ldr	r3, [r3, #0]
   b743e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7440:	9301      	str	r3, [sp, #4]
   b7442:	bd08      	pop	{r3, pc}
   b7444:	00030240 	.word	0x00030240

000b7448 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7448:	b508      	push	{r3, lr}
   b744a:	4b02      	ldr	r3, [pc, #8]	; (b7454 <network_is_on+0xc>)
   b744c:	681b      	ldr	r3, [r3, #0]
   b744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7450:	9301      	str	r3, [sp, #4]
   b7452:	bd08      	pop	{r3, pc}
   b7454:	00030240 	.word	0x00030240

000b7458 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7458:	b508      	push	{r3, lr}
   b745a:	4b02      	ldr	r3, [pc, #8]	; (b7464 <network_is_off+0xc>)
   b745c:	681b      	ldr	r3, [r3, #0]
   b745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7460:	9301      	str	r3, [sp, #4]
   b7462:	bd08      	pop	{r3, pc}
   b7464:	00030240 	.word	0x00030240

000b7468 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7468:	b508      	push	{r3, lr}
   b746a:	4b02      	ldr	r3, [pc, #8]	; (b7474 <malloc+0xc>)
   b746c:	681b      	ldr	r3, [r3, #0]
   b746e:	681b      	ldr	r3, [r3, #0]
   b7470:	9301      	str	r3, [sp, #4]
   b7472:	bd08      	pop	{r3, pc}
   b7474:	0003021c 	.word	0x0003021c

000b7478 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7478:	b508      	push	{r3, lr}
   b747a:	4b02      	ldr	r3, [pc, #8]	; (b7484 <free+0xc>)
   b747c:	681b      	ldr	r3, [r3, #0]
   b747e:	685b      	ldr	r3, [r3, #4]
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	bd08      	pop	{r3, pc}
   b7484:	0003021c 	.word	0x0003021c

000b7488 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <realloc+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	689b      	ldr	r3, [r3, #8]
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	0003021c 	.word	0x0003021c

000b7498 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <snprintf+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	69db      	ldr	r3, [r3, #28]
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	0003021c 	.word	0x0003021c

000b74a8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <vsnprintf+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	0003021c 	.word	0x0003021c

000b74b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b02      	ldr	r3, [pc, #8]	; (b74c4 <abort+0xc>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b74c0:	9301      	str	r3, [sp, #4]
   b74c2:	bd08      	pop	{r3, pc}
   b74c4:	0003021c 	.word	0x0003021c

000b74c8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b74c8:	b508      	push	{r3, lr}
   b74ca:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <__errno+0xc>)
   b74cc:	681b      	ldr	r3, [r3, #0]
   b74ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b74d0:	9301      	str	r3, [sp, #4]
   b74d2:	bd08      	pop	{r3, pc}
   b74d4:	0003021c 	.word	0x0003021c

000b74d8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b74d8:	b508      	push	{r3, lr}
   b74da:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <__assert_func+0xc>)
   b74dc:	681b      	ldr	r3, [r3, #0]
   b74de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b74e0:	9301      	str	r3, [sp, #4]
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	0003021c 	.word	0x0003021c

000b74e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <newlib_impure_ptr_callback+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	0003021c 	.word	0x0003021c

000b74f8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b74f8:	428a      	cmp	r2, r1
{
   b74fa:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b74fc:	d007      	beq.n	b750e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b74fe:	1a44      	subs	r4, r0, r1
   b7500:	9802      	ldr	r0, [sp, #8]
   b7502:	1ac0      	subs	r0, r0, r3
   b7504:	4344      	muls	r4, r0
   b7506:	1a50      	subs	r0, r2, r1
   b7508:	fb94 f0f0 	sdiv	r0, r4, r0
   b750c:	4418      	add	r0, r3
}
   b750e:	bd10      	pop	{r4, pc}

000b7510 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7510:	2100      	movs	r1, #0
   b7512:	f7ff bf15 	b.w	b7340 <system_delay_ms>
	...

000b7518 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7518:	4802      	ldr	r0, [pc, #8]	; (b7524 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b751a:	2300      	movs	r3, #0
   b751c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b751e:	f7ff bd0f 	b.w	b6f40 <os_mutex_recursive_create>
   b7522:	bf00      	nop
   b7524:	2003e6c4 	.word	0x2003e6c4

000b7528 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7528:	2200      	movs	r2, #0
   b752a:	6840      	ldr	r0, [r0, #4]
   b752c:	4611      	mov	r1, r2
   b752e:	f7ff bf73 	b.w	b7418 <network_listening>

000b7532 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7532:	2200      	movs	r2, #0
   b7534:	6840      	ldr	r0, [r0, #4]
   b7536:	4611      	mov	r1, r2
   b7538:	f7ff bf7e 	b.w	b7438 <network_get_listen_timeout>

000b753c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b753c:	6840      	ldr	r0, [r0, #4]
   b753e:	2200      	movs	r2, #0
   b7540:	f7ff bf72 	b.w	b7428 <network_set_listen_timeout>

000b7544 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7544:	6840      	ldr	r0, [r0, #4]
   b7546:	2200      	movs	r2, #0
   b7548:	f081 0101 	eor.w	r1, r1, #1
   b754c:	f7ff bf5c 	b.w	b7408 <network_listen>

000b7550 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7550:	2300      	movs	r3, #0
   b7552:	6840      	ldr	r0, [r0, #4]
   b7554:	461a      	mov	r2, r3
   b7556:	4619      	mov	r1, r3
   b7558:	f7ff bf4e 	b.w	b73f8 <network_off>

000b755c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b755c:	2300      	movs	r3, #0
   b755e:	6840      	ldr	r0, [r0, #4]
   b7560:	461a      	mov	r2, r3
   b7562:	4619      	mov	r1, r3
   b7564:	f7ff bf40 	b.w	b73e8 <network_on>

000b7568 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7568:	2200      	movs	r2, #0
   b756a:	6840      	ldr	r0, [r0, #4]
   b756c:	4611      	mov	r1, r2
   b756e:	f7ff bf33 	b.w	b73d8 <network_ready>

000b7572 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7572:	2200      	movs	r2, #0
   b7574:	6840      	ldr	r0, [r0, #4]
   b7576:	4611      	mov	r1, r2
   b7578:	f7ff bf1e 	b.w	b73b8 <network_connecting>

000b757c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b757c:	6840      	ldr	r0, [r0, #4]
   b757e:	2200      	movs	r2, #0
   b7580:	2102      	movs	r1, #2
   b7582:	f7ff bf21 	b.w	b73c8 <network_disconnect>

000b7586 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7586:	2300      	movs	r3, #0
   b7588:	6840      	ldr	r0, [r0, #4]
   b758a:	461a      	mov	r2, r3
   b758c:	f7ff bf0c 	b.w	b73a8 <network_connect>

000b7590 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7590:	4b02      	ldr	r3, [pc, #8]	; (b759c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7592:	2203      	movs	r2, #3
   b7594:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7596:	4a02      	ldr	r2, [pc, #8]	; (b75a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7598:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b759a:	4770      	bx	lr
   b759c:	2003e6c8 	.word	0x2003e6c8
   b75a0:	000bb04c 	.word	0x000bb04c

000b75a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b75a4:	4770      	bx	lr

000b75a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b75a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75a8:	4606      	mov	r6, r0
   b75aa:	4615      	mov	r5, r2
   b75ac:	460c      	mov	r4, r1
   b75ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b75b0:	42bc      	cmp	r4, r7
   b75b2:	d006      	beq.n	b75c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b75b4:	6833      	ldr	r3, [r6, #0]
   b75b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b75ba:	689b      	ldr	r3, [r3, #8]
   b75bc:	4630      	mov	r0, r6
   b75be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b75c0:	e7f6      	b.n	b75b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b75c2:	4628      	mov	r0, r5
   b75c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b75c6:	7c00      	ldrb	r0, [r0, #16]
   b75c8:	2200      	movs	r2, #0
   b75ca:	f7ff bd39 	b.w	b7040 <hal_i2c_write>

000b75ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b75ce:	7c00      	ldrb	r0, [r0, #16]
   b75d0:	2100      	movs	r1, #0
   b75d2:	f7ff bd3d 	b.w	b7050 <hal_i2c_available>

000b75d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b75d6:	7c00      	ldrb	r0, [r0, #16]
   b75d8:	2100      	movs	r1, #0
   b75da:	f7ff bd41 	b.w	b7060 <hal_i2c_read>

000b75de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b75de:	7c00      	ldrb	r0, [r0, #16]
   b75e0:	2100      	movs	r1, #0
   b75e2:	f7ff bd45 	b.w	b7070 <hal_i2c_peek>

000b75e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b75e6:	7c00      	ldrb	r0, [r0, #16]
   b75e8:	2100      	movs	r1, #0
   b75ea:	f7ff bd49 	b.w	b7080 <hal_i2c_flush>

000b75ee <_ZN7TwoWireD0Ev>:
   b75ee:	b510      	push	{r4, lr}
   b75f0:	2114      	movs	r1, #20
   b75f2:	4604      	mov	r4, r0
   b75f4:	f7fd f9f9 	bl	b49ea <_ZdlPvj>
   b75f8:	4620      	mov	r0, r4
   b75fa:	bd10      	pop	{r4, pc}

000b75fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b75fc:	b538      	push	{r3, r4, r5, lr}
   b75fe:	4604      	mov	r4, r0
   b7600:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7606:	2200      	movs	r2, #0
   b7608:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b760c:	4b09      	ldr	r3, [pc, #36]	; (b7634 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b760e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7610:	4608      	mov	r0, r1
   b7612:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7614:	4629      	mov	r1, r5
   b7616:	f7ff fd43 	bl	b70a0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b761a:	30bf      	adds	r0, #191	; 0xbf
   b761c:	d108      	bne.n	b7630 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b761e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7620:	07db      	lsls	r3, r3, #31
   b7622:	d505      	bpl.n	b7630 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7624:	6868      	ldr	r0, [r5, #4]
   b7626:	f7ff ff27 	bl	b7478 <free>
    free(conf.tx_buffer);
   b762a:	68e8      	ldr	r0, [r5, #12]
   b762c:	f7ff ff24 	bl	b7478 <free>
}
   b7630:	4620      	mov	r0, r4
   b7632:	bd38      	pop	{r3, r4, r5, pc}
   b7634:	000bb088 	.word	0x000bb088

000b7638 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7638:	7c00      	ldrb	r0, [r0, #16]
   b763a:	2200      	movs	r2, #0
   b763c:	f7ff bce0 	b.w	b7000 <hal_i2c_set_speed>

000b7640 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7640:	2300      	movs	r3, #0
   b7642:	7c00      	ldrb	r0, [r0, #16]
   b7644:	461a      	mov	r2, r3
   b7646:	4619      	mov	r1, r3
   b7648:	f7ff bce2 	b.w	b7010 <hal_i2c_begin>

000b764c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b764c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b764e:	2200      	movs	r2, #0
   b7650:	2314      	movs	r3, #20
   b7652:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7656:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b765a:	780b      	ldrb	r3, [r1, #0]
   b765c:	f88d 3008 	strb.w	r3, [sp, #8]
   b7660:	684b      	ldr	r3, [r1, #4]
   b7662:	9303      	str	r3, [sp, #12]
   b7664:	68cb      	ldr	r3, [r1, #12]
   b7666:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7668:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b766a:	7a0b      	ldrb	r3, [r1, #8]
   b766c:	9305      	str	r3, [sp, #20]
   b766e:	a901      	add	r1, sp, #4
   b7670:	f7ff fd1e 	bl	b70b0 <hal_i2c_request_ex>
}
   b7674:	b007      	add	sp, #28
   b7676:	f85d fb04 	ldr.w	pc, [sp], #4

000b767a <_ZN7TwoWire11requestFromEhjh>:
{
   b767a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b767c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b767e:	f88d 1000 	strb.w	r1, [sp]
   b7682:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7686:	9103      	str	r1, [sp, #12]
   b7688:	bf18      	it	ne
   b768a:	2301      	movne	r3, #1
   b768c:	4669      	mov	r1, sp
    size_ = size;
   b768e:	9201      	str	r2, [sp, #4]
   b7690:	f88d 3008 	strb.w	r3, [sp, #8]
   b7694:	f7ff ffda 	bl	b764c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7698:	b005      	add	sp, #20
   b769a:	f85d fb04 	ldr.w	pc, [sp], #4

000b769e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b769e:	2301      	movs	r3, #1
   b76a0:	f7ff bfeb 	b.w	b767a <_ZN7TwoWire11requestFromEhjh>

000b76a4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b76a4:	7c00      	ldrb	r0, [r0, #16]
   b76a6:	2200      	movs	r2, #0
   b76a8:	f7ff bcba 	b.w	b7020 <hal_i2c_begin_transmission>

000b76ac <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b76ac:	b2c9      	uxtb	r1, r1
   b76ae:	f7ff bff9 	b.w	b76a4 <_ZN7TwoWire17beginTransmissionEh>

000b76b2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b76b2:	7c00      	ldrb	r0, [r0, #16]
   b76b4:	2200      	movs	r2, #0
   b76b6:	f7ff bcbb 	b.w	b7030 <hal_i2c_end_transmission>

000b76ba <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b76ba:	2101      	movs	r1, #1
   b76bc:	f7ff bff9 	b.w	b76b2 <_ZN7TwoWire15endTransmissionEh>

000b76c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b76c0:	4770      	bx	lr

000b76c2 <_ZN9IPAddressD0Ev>:
   b76c2:	b510      	push	{r4, lr}
   b76c4:	2118      	movs	r1, #24
   b76c6:	4604      	mov	r4, r0
   b76c8:	f7fd f98f 	bl	b49ea <_ZdlPvj>
   b76cc:	4620      	mov	r0, r4
   b76ce:	bd10      	pop	{r4, pc}

000b76d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b76d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b76d2:	7d03      	ldrb	r3, [r0, #20]
   b76d4:	2b06      	cmp	r3, #6
{
   b76d6:	b08d      	sub	sp, #52	; 0x34
   b76d8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b76da:	f100 0704 	add.w	r7, r0, #4
   b76de:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b76e2:	d012      	beq.n	b770a <_ZNK9IPAddress7printToER5Print+0x3a>
   b76e4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b76e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b76ec:	220a      	movs	r2, #10
   b76ee:	4630      	mov	r0, r6
   b76f0:	f000 f973 	bl	b79da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b76f4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b76f6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b76f8:	d019      	beq.n	b772e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b76fa:	2c00      	cmp	r4, #0
   b76fc:	d0f4      	beq.n	b76e8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b76fe:	212e      	movs	r1, #46	; 0x2e
   b7700:	4630      	mov	r0, r6
   b7702:	f000 f951 	bl	b79a8 <_ZN5Print5printEc>
   b7706:	4404      	add	r4, r0
   b7708:	e7ee      	b.n	b76e8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b770a:	232f      	movs	r3, #47	; 0x2f
   b770c:	466a      	mov	r2, sp
   b770e:	4639      	mov	r1, r7
   b7710:	200a      	movs	r0, #10
		buf[0] = 0;
   b7712:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7716:	f7ff fcdb 	bl	b70d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b771a:	4668      	mov	r0, sp
   b771c:	f7fd f91e 	bl	b495c <strlen>
   b7720:	6833      	ldr	r3, [r6, #0]
   b7722:	4602      	mov	r2, r0
   b7724:	68db      	ldr	r3, [r3, #12]
   b7726:	4669      	mov	r1, sp
   b7728:	4630      	mov	r0, r6
   b772a:	4798      	blx	r3
   b772c:	4604      	mov	r4, r0
    }
    return n;
}
   b772e:	4620      	mov	r0, r4
   b7730:	b00d      	add	sp, #52	; 0x34
   b7732:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7734 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7734:	b510      	push	{r4, lr}
   b7736:	4b05      	ldr	r3, [pc, #20]	; (b774c <_ZN9IPAddressC1Ev+0x18>)
   b7738:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b773a:	2211      	movs	r2, #17
   b773c:	f840 3b04 	str.w	r3, [r0], #4
   b7740:	2100      	movs	r1, #0
   b7742:	f002 faff 	bl	b9d44 <memset>
}
   b7746:	4620      	mov	r0, r4
   b7748:	bd10      	pop	{r4, pc}
   b774a:	bf00      	nop
   b774c:	000bb0b0 	.word	0x000bb0b0

000b7750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7750:	4603      	mov	r3, r0
   b7752:	4a07      	ldr	r2, [pc, #28]	; (b7770 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7754:	b510      	push	{r4, lr}
   b7756:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b775a:	f101 0210 	add.w	r2, r1, #16
   b775e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7762:	f843 4b04 	str.w	r4, [r3], #4
   b7766:	4291      	cmp	r1, r2
   b7768:	d1f9      	bne.n	b775e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b776a:	780a      	ldrb	r2, [r1, #0]
   b776c:	701a      	strb	r2, [r3, #0]
}
   b776e:	bd10      	pop	{r4, pc}
   b7770:	000bb0b0 	.word	0x000bb0b0

000b7774 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7774:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7776:	2b04      	cmp	r3, #4
   b7778:	d104      	bne.n	b7784 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b777a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b777c:	3800      	subs	r0, #0
   b777e:	bf18      	it	ne
   b7780:	2001      	movne	r0, #1
   b7782:	4770      	bx	lr
    } else if (version() == 6) {
   b7784:	2b06      	cmp	r3, #6
   b7786:	d107      	bne.n	b7798 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7788:	6843      	ldr	r3, [r0, #4]
   b778a:	b93b      	cbnz	r3, b779c <_ZNK9IPAddresscvbEv+0x28>
   b778c:	6883      	ldr	r3, [r0, #8]
   b778e:	b92b      	cbnz	r3, b779c <_ZNK9IPAddresscvbEv+0x28>
   b7790:	68c3      	ldr	r3, [r0, #12]
   b7792:	b91b      	cbnz	r3, b779c <_ZNK9IPAddresscvbEv+0x28>
   b7794:	6900      	ldr	r0, [r0, #16]
   b7796:	e7f1      	b.n	b777c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7798:	2000      	movs	r0, #0
   b779a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b779c:	2001      	movs	r0, #1
}
   b779e:	4770      	bx	lr

000b77a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b77a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b77a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b77a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b77aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b77ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b77b2:	2304      	movs	r3, #4
   b77b4:	6041      	str	r1, [r0, #4]
   b77b6:	7503      	strb	r3, [r0, #20]
}
   b77b8:	bd10      	pop	{r4, pc}
	...

000b77bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b77bc:	b507      	push	{r0, r1, r2, lr}
   b77be:	4b06      	ldr	r3, [pc, #24]	; (b77d8 <_ZN9IPAddressC1EPKh+0x1c>)
   b77c0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b77c2:	78cb      	ldrb	r3, [r1, #3]
   b77c4:	9300      	str	r3, [sp, #0]
   b77c6:	788b      	ldrb	r3, [r1, #2]
   b77c8:	784a      	ldrb	r2, [r1, #1]
   b77ca:	7809      	ldrb	r1, [r1, #0]
   b77cc:	f7ff ffe8 	bl	b77a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b77d0:	b003      	add	sp, #12
   b77d2:	f85d fb04 	ldr.w	pc, [sp], #4
   b77d6:	bf00      	nop
   b77d8:	000bb0b0 	.word	0x000bb0b0

000b77dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b77dc:	4b01      	ldr	r3, [pc, #4]	; (b77e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b77de:	4a02      	ldr	r2, [pc, #8]	; (b77e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b77e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b77e2:	4770      	bx	lr
   b77e4:	2003e6d0 	.word	0x2003e6d0
   b77e8:	000ba042 	.word	0x000ba042

000b77ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b77ec:	2300      	movs	r3, #0
   b77ee:	6840      	ldr	r0, [r0, #4]
   b77f0:	461a      	mov	r2, r3
   b77f2:	f7ff bdd9 	b.w	b73a8 <network_connect>

000b77f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b77f6:	6840      	ldr	r0, [r0, #4]
   b77f8:	2200      	movs	r2, #0
   b77fa:	2102      	movs	r1, #2
   b77fc:	f7ff bde4 	b.w	b73c8 <network_disconnect>

000b7800 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7800:	2200      	movs	r2, #0
   b7802:	6840      	ldr	r0, [r0, #4]
   b7804:	4611      	mov	r1, r2
   b7806:	f7ff bdd7 	b.w	b73b8 <network_connecting>

000b780a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b780a:	2200      	movs	r2, #0
   b780c:	6840      	ldr	r0, [r0, #4]
   b780e:	4611      	mov	r1, r2
   b7810:	f7ff bde2 	b.w	b73d8 <network_ready>

000b7814 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7814:	2300      	movs	r3, #0
   b7816:	6840      	ldr	r0, [r0, #4]
   b7818:	461a      	mov	r2, r3
   b781a:	4619      	mov	r1, r3
   b781c:	f7ff bde4 	b.w	b73e8 <network_on>

000b7820 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7820:	2300      	movs	r3, #0
   b7822:	6840      	ldr	r0, [r0, #4]
   b7824:	461a      	mov	r2, r3
   b7826:	4619      	mov	r1, r3
   b7828:	f7ff bde6 	b.w	b73f8 <network_off>

000b782c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b782c:	6840      	ldr	r0, [r0, #4]
   b782e:	2100      	movs	r1, #0
   b7830:	f7ff be0a 	b.w	b7448 <network_is_on>

000b7834 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7834:	6840      	ldr	r0, [r0, #4]
   b7836:	2100      	movs	r1, #0
   b7838:	f7ff be0e 	b.w	b7458 <network_is_off>

000b783c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b783c:	6840      	ldr	r0, [r0, #4]
   b783e:	2200      	movs	r2, #0
   b7840:	f081 0101 	eor.w	r1, r1, #1
   b7844:	f7ff bde0 	b.w	b7408 <network_listen>

000b7848 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7848:	6840      	ldr	r0, [r0, #4]
   b784a:	2200      	movs	r2, #0
   b784c:	f7ff bdec 	b.w	b7428 <network_set_listen_timeout>

000b7850 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7850:	2200      	movs	r2, #0
   b7852:	6840      	ldr	r0, [r0, #4]
   b7854:	4611      	mov	r1, r2
   b7856:	f7ff bdef 	b.w	b7438 <network_get_listen_timeout>

000b785a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b785a:	2200      	movs	r2, #0
   b785c:	6840      	ldr	r0, [r0, #4]
   b785e:	4611      	mov	r1, r2
   b7860:	f7ff bdda 	b.w	b7418 <network_listening>

000b7864 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7868:	b095      	sub	sp, #84	; 0x54
   b786a:	4614      	mov	r4, r2
   b786c:	460d      	mov	r5, r1
   b786e:	4607      	mov	r7, r0
    IPAddress addr;
   b7870:	f7ff ff60 	bl	b7734 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7874:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7876:	221c      	movs	r2, #28
   b7878:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b787a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b787c:	f002 fa62 	bl	b9d44 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7880:	2340      	movs	r3, #64	; 0x40
   b7882:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7884:	4620      	mov	r0, r4
   b7886:	466b      	mov	r3, sp
   b7888:	aa0c      	add	r2, sp, #48	; 0x30
   b788a:	2100      	movs	r1, #0
   b788c:	f7ff fc48 	bl	b7120 <netdb_getaddrinfo>
    if (!r) {
   b7890:	4604      	mov	r4, r0
   b7892:	2800      	cmp	r0, #0
   b7894:	d14b      	bne.n	b792e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7896:	4602      	mov	r2, r0
   b7898:	2101      	movs	r1, #1
   b789a:	6868      	ldr	r0, [r5, #4]
   b789c:	f7ff fd9c 	bl	b73d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b78a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b78a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b78a4:	4622      	mov	r2, r4
   b78a6:	6868      	ldr	r0, [r5, #4]
   b78a8:	f7ff fd96 	bl	b73d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b78ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b78ae:	4681      	mov	r9, r0
        bool ok = false;
   b78b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b78b2:	2e00      	cmp	r6, #0
   b78b4:	d03b      	beq.n	b792e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b78b6:	2900      	cmp	r1, #0
   b78b8:	d139      	bne.n	b792e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b78ba:	6873      	ldr	r3, [r6, #4]
   b78bc:	2b02      	cmp	r3, #2
   b78be:	d003      	beq.n	b78c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b78c0:	2b0a      	cmp	r3, #10
   b78c2:	d011      	beq.n	b78e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b78c4:	69f6      	ldr	r6, [r6, #28]
   b78c6:	e7f4      	b.n	b78b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b78c8:	f1b8 0f00 	cmp.w	r8, #0
   b78cc:	d0fa      	beq.n	b78c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b78ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b78d0:	a806      	add	r0, sp, #24
   b78d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b78d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b78d6:	f7ff ff71 	bl	b77bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b78da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78dc:	1d3c      	adds	r4, r7, #4
   b78de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78e0:	682b      	ldr	r3, [r5, #0]
   b78e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b78e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b78e6:	e7ed      	b.n	b78c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b78e8:	f1b9 0f00 	cmp.w	r9, #0
   b78ec:	d0ea      	beq.n	b78c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b78ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b78f0:	2210      	movs	r2, #16
   b78f2:	a801      	add	r0, sp, #4
   b78f4:	f002 fa26 	bl	b9d44 <memset>
                    a.v = 6;
   b78f8:	2306      	movs	r3, #6
   b78fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b78fe:	ad01      	add	r5, sp, #4
   b7900:	f104 0308 	add.w	r3, r4, #8
   b7904:	3418      	adds	r4, #24
   b7906:	6818      	ldr	r0, [r3, #0]
   b7908:	6859      	ldr	r1, [r3, #4]
   b790a:	462a      	mov	r2, r5
   b790c:	c203      	stmia	r2!, {r0, r1}
   b790e:	3308      	adds	r3, #8
   b7910:	42a3      	cmp	r3, r4
   b7912:	4615      	mov	r5, r2
   b7914:	d1f7      	bne.n	b7906 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7916:	a901      	add	r1, sp, #4
   b7918:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b791a:	ad07      	add	r5, sp, #28
   b791c:	f7ff ff18 	bl	b7750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7922:	1d3c      	adds	r4, r7, #4
   b7924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7926:	682b      	ldr	r3, [r5, #0]
   b7928:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b792a:	4649      	mov	r1, r9
   b792c:	e7ca      	b.n	b78c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b792e:	9800      	ldr	r0, [sp, #0]
   b7930:	f7ff fbee 	bl	b7110 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7934:	4638      	mov	r0, r7
   b7936:	b015      	add	sp, #84	; 0x54
   b7938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b793c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b793c:	4b02      	ldr	r3, [pc, #8]	; (b7948 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b793e:	4a03      	ldr	r2, [pc, #12]	; (b794c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7940:	601a      	str	r2, [r3, #0]
   b7942:	2200      	movs	r2, #0
   b7944:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7946:	4770      	bx	lr
   b7948:	2003e6d4 	.word	0x2003e6d4
   b794c:	000bb0c4 	.word	0x000bb0c4

000b7950 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7952:	4606      	mov	r6, r0
   b7954:	460d      	mov	r5, r1
  size_t n = 0;
   b7956:	188f      	adds	r7, r1, r2
   b7958:	2400      	movs	r4, #0
  while (size--) {
   b795a:	42bd      	cmp	r5, r7
   b795c:	d00c      	beq.n	b7978 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b795e:	6833      	ldr	r3, [r6, #0]
   b7960:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7964:	689b      	ldr	r3, [r3, #8]
   b7966:	4630      	mov	r0, r6
   b7968:	4798      	blx	r3
     if (chunk>=0)
   b796a:	1e03      	subs	r3, r0, #0
   b796c:	db01      	blt.n	b7972 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b796e:	441c      	add	r4, r3
  while (size--) {
   b7970:	e7f3      	b.n	b795a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7972:	2c00      	cmp	r4, #0
   b7974:	bf08      	it	eq
   b7976:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7978:	4620      	mov	r0, r4
   b797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b797c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b797c:	b513      	push	{r0, r1, r4, lr}
   b797e:	4604      	mov	r4, r0
    }
   b7980:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7982:	b159      	cbz	r1, b799c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7984:	9101      	str	r1, [sp, #4]
   b7986:	f7fc ffe9 	bl	b495c <strlen>
   b798a:	6823      	ldr	r3, [r4, #0]
   b798c:	9901      	ldr	r1, [sp, #4]
   b798e:	68db      	ldr	r3, [r3, #12]
   b7990:	4602      	mov	r2, r0
   b7992:	4620      	mov	r0, r4
    }
   b7994:	b002      	add	sp, #8
   b7996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b799a:	4718      	bx	r3
    }
   b799c:	b002      	add	sp, #8
   b799e:	bd10      	pop	{r4, pc}

000b79a0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b79a0:	b508      	push	{r3, lr}
  return write(str);
   b79a2:	f7ff ffeb 	bl	b797c <_ZN5Print5writeEPKc>
}
   b79a6:	bd08      	pop	{r3, pc}

000b79a8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b79a8:	6803      	ldr	r3, [r0, #0]
   b79aa:	689b      	ldr	r3, [r3, #8]
   b79ac:	4718      	bx	r3

000b79ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b79ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b79b0:	210d      	movs	r1, #13
{
   b79b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b79b4:	f7ff fff8 	bl	b79a8 <_ZN5Print5printEc>
  n += print('\n');
   b79b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b79ba:	4604      	mov	r4, r0
  n += print('\n');
   b79bc:	4628      	mov	r0, r5
   b79be:	f7ff fff3 	bl	b79a8 <_ZN5Print5printEc>
  return n;
}
   b79c2:	4420      	add	r0, r4
   b79c4:	bd38      	pop	{r3, r4, r5, pc}

000b79c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b79c6:	b538      	push	{r3, r4, r5, lr}
   b79c8:	4605      	mov	r5, r0
  return write(str);
   b79ca:	f7ff ffd7 	bl	b797c <_ZN5Print5writeEPKc>
   b79ce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b79d0:	4628      	mov	r0, r5
   b79d2:	f7ff ffec 	bl	b79ae <_ZN5Print7printlnEv>
  return n;
}
   b79d6:	4420      	add	r0, r4
   b79d8:	bd38      	pop	{r3, r4, r5, pc}

000b79da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b79da:	b530      	push	{r4, r5, lr}
   b79dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b79de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b79e0:	2a01      	cmp	r2, #1
  *str = '\0';
   b79e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b79e6:	bf98      	it	ls
   b79e8:	220a      	movls	r2, #10
   b79ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b79ec:	460d      	mov	r5, r1
   b79ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b79f2:	fb01 5312 	mls	r3, r1, r2, r5
   b79f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b79fa:	2b09      	cmp	r3, #9
   b79fc:	bf94      	ite	ls
   b79fe:	3330      	addls	r3, #48	; 0x30
   b7a00:	3337      	addhi	r3, #55	; 0x37
   b7a02:	b2db      	uxtb	r3, r3
  } while(n);
   b7a04:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7a06:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7a0a:	d9ef      	bls.n	b79ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7a0c:	4621      	mov	r1, r4
   b7a0e:	f7ff ffb5 	bl	b797c <_ZN5Print5writeEPKc>
}
   b7a12:	b00b      	add	sp, #44	; 0x2c
   b7a14:	bd30      	pop	{r4, r5, pc}

000b7a16 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a1a:	b086      	sub	sp, #24
   b7a1c:	af00      	add	r7, sp, #0
   b7a1e:	4605      	mov	r5, r0
   b7a20:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7a22:	1d38      	adds	r0, r7, #4
   b7a24:	2114      	movs	r1, #20
{
   b7a26:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7a28:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7a2a:	f7ff fd3d 	bl	b74a8 <vsnprintf>

    if (n<bufsize)
   b7a2e:	2813      	cmp	r0, #19
   b7a30:	d80e      	bhi.n	b7a50 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7a32:	1d39      	adds	r1, r7, #4
   b7a34:	4628      	mov	r0, r5
   b7a36:	f7ff ffa1 	bl	b797c <_ZN5Print5writeEPKc>
   b7a3a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7a3c:	b11e      	cbz	r6, b7a46 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7a3e:	4628      	mov	r0, r5
   b7a40:	f7ff ffb5 	bl	b79ae <_ZN5Print7printlnEv>
   b7a44:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7a46:	4620      	mov	r0, r4
   b7a48:	3718      	adds	r7, #24
   b7a4a:	46bd      	mov	sp, r7
   b7a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7a50:	f100 0308 	add.w	r3, r0, #8
   b7a54:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7a58:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7a5a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7a5e:	4622      	mov	r2, r4
   b7a60:	1c41      	adds	r1, r0, #1
   b7a62:	683b      	ldr	r3, [r7, #0]
   b7a64:	4668      	mov	r0, sp
   b7a66:	f7ff fd1f 	bl	b74a8 <vsnprintf>
  return write(str);
   b7a6a:	4669      	mov	r1, sp
   b7a6c:	4628      	mov	r0, r5
   b7a6e:	f7ff ff85 	bl	b797c <_ZN5Print5writeEPKc>
   b7a72:	4604      	mov	r4, r0
   b7a74:	46c5      	mov	sp, r8
   b7a76:	e7e1      	b.n	b7a3c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7a78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7a78:	4b01      	ldr	r3, [pc, #4]	; (b7a80 <_GLOBAL__sub_I_RGB+0x8>)
   b7a7a:	2200      	movs	r2, #0
   b7a7c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7a7e:	4770      	bx	lr
   b7a80:	2003e6dc 	.word	0x2003e6dc

000b7a84 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7a84:	2100      	movs	r1, #0
   b7a86:	f7ff bbbb 	b.w	b7200 <hal_spi_release>

000b7a8a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7a8a:	2100      	movs	r1, #0
   b7a8c:	f7ff bbb0 	b.w	b71f0 <hal_spi_acquire>

000b7a90 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7a90:	b510      	push	{r4, lr}
   b7a92:	4604      	mov	r4, r0
   b7a94:	4608      	mov	r0, r1
{
    _spi = spi;
   b7a96:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7a98:	f7ff fb8a 	bl	b71b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7a9c:	2300      	movs	r3, #0
   b7a9e:	6063      	str	r3, [r4, #4]
}
   b7aa0:	4620      	mov	r0, r4
   b7aa2:	bd10      	pop	{r4, pc}

000b7aa4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7aa4:	b513      	push	{r0, r1, r4, lr}
   b7aa6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7aa8:	7800      	ldrb	r0, [r0, #0]
   b7aaa:	f7ff ffee 	bl	b7a8a <_ZN8SPIClass4lockEv.isra.0>
   b7aae:	b958      	cbnz	r0, b7ac8 <_ZN8SPIClass5beginEv+0x24>
   b7ab0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7ab2:	9001      	str	r0, [sp, #4]
   b7ab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7ab8:	f7ff fb6a 	bl	b7190 <hal_spi_begin>
        unlock();
   b7abc:	9801      	ldr	r0, [sp, #4]
    }
}
   b7abe:	b002      	add	sp, #8
   b7ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7ac4:	f7ff bfde 	b.w	b7a84 <_ZN8SPIClass6unlockEv.isra.0>
   b7ac8:	b002      	add	sp, #8
   b7aca:	bd10      	pop	{r4, pc}

000b7acc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7acc:	7800      	ldrb	r0, [r0, #0]
   b7ace:	f7ff bfd9 	b.w	b7a84 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7ad4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7ad4:	0840      	lsrs	r0, r0, #1
{
   b7ad6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7ad8:	6018      	str	r0, [r3, #0]
   b7ada:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7adc:	6818      	ldr	r0, [r3, #0]
   b7ade:	4288      	cmp	r0, r1
   b7ae0:	b2e5      	uxtb	r5, r4
   b7ae2:	d906      	bls.n	b7af2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7ae4:	3401      	adds	r4, #1
   b7ae6:	2c08      	cmp	r4, #8
   b7ae8:	d002      	beq.n	b7af0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7aea:	0840      	lsrs	r0, r0, #1
   b7aec:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7aee:	e7f5      	b.n	b7adc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7af0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7af2:	4b02      	ldr	r3, [pc, #8]	; (b7afc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7af4:	5d5b      	ldrb	r3, [r3, r5]
   b7af6:	7013      	strb	r3, [r2, #0]
}
   b7af8:	bd30      	pop	{r4, r5, pc}
   b7afa:	bf00      	nop
   b7afc:	000bb0f8 	.word	0x000bb0f8

000b7b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7b04:	4606      	mov	r6, r0
   b7b06:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7b08:	7800      	ldrb	r0, [r0, #0]
{
   b7b0a:	460c      	mov	r4, r1
    CHECK(lock());
   b7b0c:	f7ff ffbd 	bl	b7a8a <_ZN8SPIClass4lockEv.isra.0>
   b7b10:	2800      	cmp	r0, #0
   b7b12:	db1b      	blt.n	b7b4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7b14:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7b16:	2214      	movs	r2, #20
   b7b18:	2100      	movs	r1, #0
   b7b1a:	a809      	add	r0, sp, #36	; 0x24
   b7b1c:	f002 f912 	bl	b9d44 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7b20:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7b22:	2200      	movs	r2, #0
   b7b24:	a909      	add	r1, sp, #36	; 0x24
   b7b26:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7b28:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7b2c:	f7ff fb50 	bl	b71d0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7b30:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7b34:	b113      	cbz	r3, b7b3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7b36:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7b3a:	b155      	cbz	r5, b7b52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7b3c:	2700      	movs	r7, #0
   b7b3e:	46b9      	mov	r9, r7
   b7b40:	46b8      	mov	r8, r7
   b7b42:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7b44:	7923      	ldrb	r3, [r4, #4]
   b7b46:	b15d      	cbz	r5, b7b60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7b48:	b1c3      	cbz	r3, b7b7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7b4a:	2000      	movs	r0, #0
}
   b7b4c:	b00f      	add	sp, #60	; 0x3c
   b7b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7b52:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7b56:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7b5a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7b5e:	e7f1      	b.n	b7b44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7b60:	2b00      	cmp	r3, #0
   b7b62:	d135      	bne.n	b7bd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7b64:	68a3      	ldr	r3, [r4, #8]
   b7b66:	4543      	cmp	r3, r8
   b7b68:	d108      	bne.n	b7b7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7b6a:	f88d 9020 	strb.w	r9, [sp, #32]
   b7b6e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7b72:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7b76:	89a3      	ldrh	r3, [r4, #12]
   b7b78:	429a      	cmp	r2, r3
   b7b7a:	d0e6      	beq.n	b7b4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7b7c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7b7e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7b80:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7b84:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7b86:	ab04      	add	r3, sp, #16
   b7b88:	f10d 020f 	add.w	r2, sp, #15
   b7b8c:	f7ff ffa2 	bl	b7ad4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7b90:	7921      	ldrb	r1, [r4, #4]
   b7b92:	b985      	cbnz	r5, b7bb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7b94:	b989      	cbnz	r1, b7bba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7b96:	68a3      	ldr	r3, [r4, #8]
   b7b98:	4543      	cmp	r3, r8
   b7b9a:	d30e      	bcc.n	b7bba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7b9c:	f88d 9020 	strb.w	r9, [sp, #32]
   b7ba0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7ba4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7ba8:	89a3      	ldrh	r3, [r4, #12]
   b7baa:	429a      	cmp	r2, r3
   b7bac:	d105      	bne.n	b7bba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7bae:	9b04      	ldr	r3, [sp, #16]
   b7bb0:	4543      	cmp	r3, r8
   b7bb2:	d102      	bne.n	b7bba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7bb4:	e7c9      	b.n	b7b4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7bb6:	2900      	cmp	r1, #0
   b7bb8:	d1f9      	bne.n	b7bae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7bba:	2300      	movs	r3, #0
   b7bbc:	9301      	str	r3, [sp, #4]
   b7bbe:	7b63      	ldrb	r3, [r4, #13]
   b7bc0:	9300      	str	r3, [sp, #0]
   b7bc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7bc6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7bc8:	7830      	ldrb	r0, [r6, #0]
   b7bca:	f7ff fb09 	bl	b71e0 <hal_spi_set_settings>
   b7bce:	e7bc      	b.n	b7b4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7bd0:	e9cd 5500 	strd	r5, r5, [sp]
   b7bd4:	462b      	mov	r3, r5
   b7bd6:	462a      	mov	r2, r5
   b7bd8:	2101      	movs	r1, #1
   b7bda:	e7f5      	b.n	b7bc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7bdc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7bdc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7bde:	7800      	ldrb	r0, [r0, #0]
   b7be0:	f7ff fade 	bl	b71a0 <hal_spi_transfer>
}
   b7be4:	b2c0      	uxtb	r0, r0
   b7be6:	bd08      	pop	{r3, pc}

000b7be8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7be8:	b510      	push	{r4, lr}
   b7bea:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7bec:	f7ff f9c0 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7bf0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7bf2:	6823      	ldr	r3, [r4, #0]
   b7bf4:	4620      	mov	r0, r4
   b7bf6:	695b      	ldr	r3, [r3, #20]
   b7bf8:	4798      	blx	r3
    if (c >= 0) return c;
   b7bfa:	2800      	cmp	r0, #0
   b7bfc:	da08      	bge.n	b7c10 <_ZN6Stream9timedReadEv+0x28>
   b7bfe:	f7ff f9b7 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7c02:	68e3      	ldr	r3, [r4, #12]
   b7c04:	1ac0      	subs	r0, r0, r3
   b7c06:	68a3      	ldr	r3, [r4, #8]
   b7c08:	4298      	cmp	r0, r3
   b7c0a:	d3f2      	bcc.n	b7bf2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b7c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7c10:	bd10      	pop	{r4, pc}

000b7c12 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b7c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c16:	4607      	mov	r7, r0
   b7c18:	460c      	mov	r4, r1
   b7c1a:	188e      	adds	r6, r1, r2
   b7c1c:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b7c1e:	42b5      	cmp	r5, r6
   b7c20:	eba5 0804 	sub.w	r8, r5, r4
   b7c24:	d007      	beq.n	b7c36 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b7c26:	4638      	mov	r0, r7
   b7c28:	f7ff ffde 	bl	b7be8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b7c2c:	1e03      	subs	r3, r0, #0
   b7c2e:	db02      	blt.n	b7c36 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7c30:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7c34:	e7f3      	b.n	b7c1e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b7c36:	4640      	mov	r0, r8
   b7c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7c3c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7c3c:	b510      	push	{r4, lr}
   b7c3e:	4604      	mov	r4, r0
{
	free(buffer);
   b7c40:	6800      	ldr	r0, [r0, #0]
   b7c42:	f7ff fc19 	bl	b7478 <free>
}
   b7c46:	4620      	mov	r0, r4
   b7c48:	bd10      	pop	{r4, pc}

000b7c4a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7c4a:	b510      	push	{r4, lr}
   b7c4c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7c4e:	6800      	ldr	r0, [r0, #0]
   b7c50:	b108      	cbz	r0, b7c56 <_ZN6String10invalidateEv+0xc>
   b7c52:	f7ff fc11 	bl	b7478 <free>
	buffer = NULL;
   b7c56:	2300      	movs	r3, #0
	capacity = len = 0;
   b7c58:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7c5c:	6023      	str	r3, [r4, #0]
}
   b7c5e:	bd10      	pop	{r4, pc}

000b7c60 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7c60:	b538      	push	{r3, r4, r5, lr}
   b7c62:	4604      	mov	r4, r0
   b7c64:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7c66:	6800      	ldr	r0, [r0, #0]
   b7c68:	3101      	adds	r1, #1
   b7c6a:	f7ff fc0d 	bl	b7488 <realloc>
	if (newbuffer) {
   b7c6e:	b110      	cbz	r0, b7c76 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7c70:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7c74:	2001      	movs	r0, #1
	}
	return 0;
}
   b7c76:	bd38      	pop	{r3, r4, r5, pc}

000b7c78 <_ZN6String7reserveEj>:
{
   b7c78:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7c7a:	6803      	ldr	r3, [r0, #0]
{
   b7c7c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7c7e:	b123      	cbz	r3, b7c8a <_ZN6String7reserveEj+0x12>
   b7c80:	6843      	ldr	r3, [r0, #4]
   b7c82:	428b      	cmp	r3, r1
   b7c84:	d301      	bcc.n	b7c8a <_ZN6String7reserveEj+0x12>
   b7c86:	2001      	movs	r0, #1
}
   b7c88:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7c8a:	4620      	mov	r0, r4
   b7c8c:	f7ff ffe8 	bl	b7c60 <_ZN6String12changeBufferEj>
   b7c90:	2800      	cmp	r0, #0
   b7c92:	d0f9      	beq.n	b7c88 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7c94:	68a3      	ldr	r3, [r4, #8]
   b7c96:	2b00      	cmp	r3, #0
   b7c98:	d1f5      	bne.n	b7c86 <_ZN6String7reserveEj+0xe>
   b7c9a:	6822      	ldr	r2, [r4, #0]
   b7c9c:	7013      	strb	r3, [r2, #0]
   b7c9e:	e7f2      	b.n	b7c86 <_ZN6String7reserveEj+0xe>

000b7ca0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ca2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7ca4:	4611      	mov	r1, r2
   b7ca6:	9201      	str	r2, [sp, #4]
{
   b7ca8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7caa:	f7ff ffe5 	bl	b7c78 <_ZN6String7reserveEj>
   b7cae:	9a01      	ldr	r2, [sp, #4]
   b7cb0:	b928      	cbnz	r0, b7cbe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7cb2:	4620      	mov	r0, r4
   b7cb4:	f7ff ffc9 	bl	b7c4a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7cb8:	4620      	mov	r0, r4
   b7cba:	b003      	add	sp, #12
   b7cbc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7cbe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7cc0:	4629      	mov	r1, r5
   b7cc2:	6820      	ldr	r0, [r4, #0]
   b7cc4:	f002 f830 	bl	b9d28 <memcpy>
	buffer[len] = 0;
   b7cc8:	6822      	ldr	r2, [r4, #0]
   b7cca:	68a3      	ldr	r3, [r4, #8]
   b7ccc:	2100      	movs	r1, #0
   b7cce:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7cd0:	e7f2      	b.n	b7cb8 <_ZN6String4copyEPKcj+0x18>

000b7cd2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7cd2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7cd4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7cd6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7cda:	4604      	mov	r4, r0
	len = 0;
   b7cdc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7cde:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7ce0:	b141      	cbz	r1, b7cf4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7ce2:	4608      	mov	r0, r1
   b7ce4:	9101      	str	r1, [sp, #4]
   b7ce6:	f7fc fe39 	bl	b495c <strlen>
   b7cea:	9901      	ldr	r1, [sp, #4]
   b7cec:	4602      	mov	r2, r0
   b7cee:	4620      	mov	r0, r4
   b7cf0:	f7ff ffd6 	bl	b7ca0 <_ZN6String4copyEPKcj>
}
   b7cf4:	4620      	mov	r0, r4
   b7cf6:	b002      	add	sp, #8
   b7cf8:	bd10      	pop	{r4, pc}

000b7cfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7cfa:	b513      	push	{r0, r1, r4, lr}
   b7cfc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7cfe:	b159      	cbz	r1, b7d18 <_ZN6StringaSEPKc+0x1e>
   b7d00:	4608      	mov	r0, r1
   b7d02:	9101      	str	r1, [sp, #4]
   b7d04:	f7fc fe2a 	bl	b495c <strlen>
   b7d08:	9901      	ldr	r1, [sp, #4]
   b7d0a:	4602      	mov	r2, r0
   b7d0c:	4620      	mov	r0, r4
   b7d0e:	f7ff ffc7 	bl	b7ca0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7d12:	4620      	mov	r0, r4
   b7d14:	b002      	add	sp, #8
   b7d16:	bd10      	pop	{r4, pc}
	else invalidate();
   b7d18:	f7ff ff97 	bl	b7c4a <_ZN6String10invalidateEv>
   b7d1c:	e7f9      	b.n	b7d12 <_ZN6StringaSEPKc+0x18>

000b7d1e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7d1e:	b510      	push	{r4, lr}
   b7d20:	4604      	mov	r4, r0
   b7d22:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7d24:	2300      	movs	r3, #0
	capacity = 0;
   b7d26:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7d2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7d2c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b7d2e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7d30:	a901      	add	r1, sp, #4
   b7d32:	f000 fc61 	bl	b85f8 <itoa>
	*this = buf;
   b7d36:	a901      	add	r1, sp, #4
   b7d38:	4620      	mov	r0, r4
   b7d3a:	f7ff ffde 	bl	b7cfa <_ZN6StringaSEPKc>
}
   b7d3e:	4620      	mov	r0, r4
   b7d40:	b00a      	add	sp, #40	; 0x28
   b7d42:	bd10      	pop	{r4, pc}

000b7d44 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7d44:	4b05      	ldr	r3, [pc, #20]	; (b7d5c <_GLOBAL__sub_I_System+0x18>)
   b7d46:	2202      	movs	r2, #2
   b7d48:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7d4a:	4b05      	ldr	r3, [pc, #20]	; (b7d60 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7d4c:	4a05      	ldr	r2, [pc, #20]	; (b7d64 <_GLOBAL__sub_I_System+0x20>)
   b7d4e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7d50:	2000      	movs	r0, #0
   b7d52:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7d56:	f7ff baeb 	b.w	b7330 <set_system_mode>
   b7d5a:	bf00      	nop
   b7d5c:	2003e6f8 	.word	0x2003e6f8
   b7d60:	2003e6ec 	.word	0x2003e6ec
   b7d64:	ffff0000 	.word	0xffff0000

000b7d68 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7d68:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7d6a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7d6c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7d70:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7d72:	2201      	movs	r2, #1
   b7d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7d78:	f10d 0107 	add.w	r1, sp, #7
   b7d7c:	47a0      	blx	r4
}
   b7d7e:	b002      	add	sp, #8
   b7d80:	bd10      	pop	{r4, pc}

000b7d82 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7d82:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7d84:	6803      	ldr	r3, [r0, #0]
   b7d86:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7d8c:	46a4      	mov	ip, r4
}
   b7d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7d92:	4760      	bx	ip

000b7d94 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7d94:	b513      	push	{r0, r1, r4, lr}
   b7d96:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7d98:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7d9a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7d9e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7da0:	f10d 0107 	add.w	r1, sp, #7
   b7da4:	2201      	movs	r2, #1
   b7da6:	47a0      	blx	r4
}
   b7da8:	b002      	add	sp, #8
   b7daa:	bd10      	pop	{r4, pc}

000b7dac <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7dac:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7dae:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7db0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7db4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7db8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7dba:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7dbc:	d008      	beq.n	b7dd0 <_ZN9TCPClient4readEv+0x24>
   b7dbe:	6963      	ldr	r3, [r4, #20]
   b7dc0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7dc4:	1c51      	adds	r1, r2, #1
   b7dc6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7dca:	4413      	add	r3, r2
   b7dcc:	7918      	ldrb	r0, [r3, #4]
}
   b7dce:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7dd0:	6803      	ldr	r3, [r0, #0]
   b7dd2:	691b      	ldr	r3, [r3, #16]
   b7dd4:	4798      	blx	r3
   b7dd6:	2800      	cmp	r0, #0
   b7dd8:	d1f1      	bne.n	b7dbe <_ZN9TCPClient4readEv+0x12>
   b7dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7dde:	e7f6      	b.n	b7dce <_ZN9TCPClient4readEv+0x22>

000b7de0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7de0:	4770      	bx	lr

000b7de2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7de2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7de4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7de6:	43c0      	mvns	r0, r0
   b7de8:	0fc0      	lsrs	r0, r0, #31
   b7dea:	4770      	bx	lr

000b7dec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7dec:	4770      	bx	lr
	...

000b7df0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7df0:	4b06      	ldr	r3, [pc, #24]	; (b7e0c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7df2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7df4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7df6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7dfa:	d005      	beq.n	b7e08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7dfc:	4608      	mov	r0, r1
   b7dfe:	f000 fded 	bl	b89dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7e02:	2800      	cmp	r0, #0
   b7e04:	bf08      	it	eq
   b7e06:	2400      	moveq	r4, #0
      }
   b7e08:	4620      	mov	r0, r4
   b7e0a:	bd10      	pop	{r4, pc}
   b7e0c:	000bb03c 	.word	0x000bb03c

000b7e10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7e10:	b510      	push	{r4, lr}
   b7e12:	21ac      	movs	r1, #172	; 0xac
   b7e14:	4604      	mov	r4, r0
   b7e16:	f7fc fde8 	bl	b49ea <_ZdlPvj>
   b7e1a:	4620      	mov	r0, r4
   b7e1c:	bd10      	pop	{r4, pc}

000b7e1e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7e1e:	21ac      	movs	r1, #172	; 0xac
   b7e20:	f7fc bde3 	b.w	b49ea <_ZdlPvj>

000b7e24 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7e28:	f04f 0800 	mov.w	r8, #0
   b7e2c:	b086      	sub	sp, #24
   b7e2e:	461c      	mov	r4, r3
   b7e30:	f8c0 8004 	str.w	r8, [r0, #4]
   b7e34:	4605      	mov	r5, r0
   b7e36:	460e      	mov	r6, r1
   b7e38:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7e3a:	4641      	mov	r1, r8
   b7e3c:	2210      	movs	r2, #16
   b7e3e:	a802      	add	r0, sp, #8
   b7e40:	f001 ff80 	bl	b9d44 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7e44:	1c63      	adds	r3, r4, #1
   b7e46:	d009      	beq.n	b7e5c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e4c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7e50:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7e54:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7e58:	435c      	muls	r4, r3
   b7e5a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7e5c:	6968      	ldr	r0, [r5, #20]
   b7e5e:	2310      	movs	r3, #16
   b7e60:	9300      	str	r3, [sp, #0]
   b7e62:	6800      	ldr	r0, [r0, #0]
   b7e64:	ab02      	add	r3, sp, #8
   b7e66:	f241 0205 	movw	r2, #4101	; 0x1005
   b7e6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7e6e:	f7ff f95f 	bl	b7130 <sock_setsockopt>
    if (ret < 0) {
   b7e72:	2800      	cmp	r0, #0
   b7e74:	da07      	bge.n	b7e86 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7e76:	f7ff fb27 	bl	b74c8 <__errno>
   b7e7a:	6803      	ldr	r3, [r0, #0]
   b7e7c:	606b      	str	r3, [r5, #4]
        return 0;
   b7e7e:	2000      	movs	r0, #0
}
   b7e80:	b006      	add	sp, #24
   b7e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7e86:	6968      	ldr	r0, [r5, #20]
   b7e88:	2300      	movs	r3, #0
   b7e8a:	6800      	ldr	r0, [r0, #0]
   b7e8c:	463a      	mov	r2, r7
   b7e8e:	4631      	mov	r1, r6
   b7e90:	f7ff f96e 	bl	b7170 <sock_send>
    if (ret < 0) {
   b7e94:	1e03      	subs	r3, r0, #0
   b7e96:	dbee      	blt.n	b7e76 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7e98:	4618      	mov	r0, r3
   b7e9a:	e7f1      	b.n	b7e80 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7e9c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7e9c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7e9e:	6984      	ldr	r4, [r0, #24]
   b7ea0:	4b0a      	ldr	r3, [pc, #40]	; (b7ecc <_ZN9TCPClientD1Ev+0x30>)
   b7ea2:	6003      	str	r3, [r0, #0]
   b7ea4:	4605      	mov	r5, r0
   b7ea6:	b17c      	cbz	r4, b7ec8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7ea8:	6863      	ldr	r3, [r4, #4]
   b7eaa:	3b01      	subs	r3, #1
   b7eac:	6063      	str	r3, [r4, #4]
   b7eae:	b95b      	cbnz	r3, b7ec8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7eb0:	6823      	ldr	r3, [r4, #0]
   b7eb2:	4620      	mov	r0, r4
   b7eb4:	689b      	ldr	r3, [r3, #8]
   b7eb6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7eb8:	68a3      	ldr	r3, [r4, #8]
   b7eba:	3b01      	subs	r3, #1
   b7ebc:	60a3      	str	r3, [r4, #8]
   b7ebe:	b91b      	cbnz	r3, b7ec8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7ec0:	6823      	ldr	r3, [r4, #0]
   b7ec2:	4620      	mov	r0, r4
   b7ec4:	68db      	ldr	r3, [r3, #12]
   b7ec6:	4798      	blx	r3
   b7ec8:	4628      	mov	r0, r5
   b7eca:	bd38      	pop	{r3, r4, r5, pc}
   b7ecc:	000bb13c 	.word	0x000bb13c

000b7ed0 <_ZN9TCPClientD0Ev>:
   b7ed0:	b510      	push	{r4, lr}
   b7ed2:	4604      	mov	r4, r0
   b7ed4:	f7ff ffe2 	bl	b7e9c <_ZN9TCPClientD1Ev>
   b7ed8:	4620      	mov	r0, r4
   b7eda:	211c      	movs	r1, #28
   b7edc:	f7fc fd85 	bl	b49ea <_ZdlPvj>
   b7ee0:	4620      	mov	r0, r4
   b7ee2:	bd10      	pop	{r4, pc}

000b7ee4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7ee4:	b530      	push	{r4, r5, lr}
   b7ee6:	b087      	sub	sp, #28
   b7ee8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7eea:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7eec:	4668      	mov	r0, sp
   b7eee:	f7ff fc65 	bl	b77bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7ef4:	3404      	adds	r4, #4
   b7ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ef8:	682b      	ldr	r3, [r5, #0]
   b7efa:	7023      	strb	r3, [r4, #0]
    }
   b7efc:	b007      	add	sp, #28
   b7efe:	bd30      	pop	{r4, r5, pc}

000b7f00 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7f00:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7f02:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7f04:	4b05      	ldr	r3, [pc, #20]	; (b7f1c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7f06:	4604      	mov	r4, r0
   b7f08:	358c      	adds	r5, #140	; 0x8c
   b7f0a:	f844 3b04 	str.w	r3, [r4], #4
   b7f0e:	4606      	mov	r6, r0
   b7f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7f14:	682b      	ldr	r3, [r5, #0]
   b7f16:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7f18:	4630      	mov	r0, r6
   b7f1a:	bd70      	pop	{r4, r5, r6, pc}
   b7f1c:	000bb0b0 	.word	0x000bb0b0

000b7f20 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7f24:	4698      	mov	r8, r3
    stop();
   b7f26:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7f28:	b093      	sub	sp, #76	; 0x4c
   b7f2a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7f2c:	2400      	movs	r4, #0
    stop();
   b7f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7f30:	4606      	mov	r6, r0
   b7f32:	4617      	mov	r7, r2
    stop();
   b7f34:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7f36:	4628      	mov	r0, r5
   b7f38:	466b      	mov	r3, sp
   b7f3a:	4622      	mov	r2, r4
   b7f3c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7f3e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7f40:	f7ff f8ee 	bl	b7120 <netdb_getaddrinfo>
   b7f44:	4605      	mov	r5, r0
   b7f46:	2800      	cmp	r0, #0
   b7f48:	d163      	bne.n	b8012 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7f4a:	9b00      	ldr	r3, [sp, #0]
   b7f4c:	2b00      	cmp	r3, #0
   b7f4e:	d04b      	beq.n	b7fe8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7f50:	695b      	ldr	r3, [r3, #20]
   b7f52:	2b00      	cmp	r3, #0
   b7f54:	d048      	beq.n	b7fe8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7f56:	a806      	add	r0, sp, #24
   b7f58:	f7ff fbec 	bl	b7734 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7f5c:	9b00      	ldr	r3, [sp, #0]
   b7f5e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7f60:	7863      	ldrb	r3, [r4, #1]
   b7f62:	2b02      	cmp	r3, #2
   b7f64:	d104      	bne.n	b7f70 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7f66:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7f68:	a806      	add	r0, sp, #24
   b7f6a:	f7ff ffbb 	bl	b7ee4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7f6e:	e026      	b.n	b7fbe <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7f70:	2b0a      	cmp	r3, #10
   b7f72:	d124      	bne.n	b7fbe <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7f74:	2211      	movs	r2, #17
   b7f76:	4629      	mov	r1, r5
   b7f78:	a801      	add	r0, sp, #4
   b7f7a:	f001 fee3 	bl	b9d44 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7f7e:	68a3      	ldr	r3, [r4, #8]
   b7f80:	2b00      	cmp	r3, #0
   b7f82:	d038      	beq.n	b7ff6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7f84:	f104 0308 	add.w	r3, r4, #8
   b7f88:	f10d 0c04 	add.w	ip, sp, #4
   b7f8c:	3418      	adds	r4, #24
   b7f8e:	6818      	ldr	r0, [r3, #0]
   b7f90:	6859      	ldr	r1, [r3, #4]
   b7f92:	4662      	mov	r2, ip
   b7f94:	c203      	stmia	r2!, {r0, r1}
   b7f96:	3308      	adds	r3, #8
   b7f98:	42a3      	cmp	r3, r4
   b7f9a:	4694      	mov	ip, r2
   b7f9c:	d1f7      	bne.n	b7f8e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7f9e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7fa0:	a901      	add	r1, sp, #4
   b7fa2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7fa4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7fa8:	f7ff fbd2 	bl	b7750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7fac:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7fb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7fb4:	ac07      	add	r4, sp, #28
   b7fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7fb8:	f8dc 3000 	ldr.w	r3, [ip]
   b7fbc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7fbe:	a806      	add	r0, sp, #24
   b7fc0:	f7ff fbd8 	bl	b7774 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7fc4:	b180      	cbz	r0, b7fe8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7fc6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7fc8:	ad07      	add	r5, sp, #28
   b7fca:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7fce:	4b12      	ldr	r3, [pc, #72]	; (b8018 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7fd0:	930c      	str	r3, [sp, #48]	; 0x30
   b7fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7fd4:	ac0d      	add	r4, sp, #52	; 0x34
   b7fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7fd8:	682b      	ldr	r3, [r5, #0]
   b7fda:	7023      	strb	r3, [r4, #0]
   b7fdc:	463a      	mov	r2, r7
   b7fde:	4643      	mov	r3, r8
   b7fe0:	a90c      	add	r1, sp, #48	; 0x30
   b7fe2:	4630      	mov	r0, r6
   b7fe4:	47c8      	blx	r9
   b7fe6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7fe8:	9800      	ldr	r0, [sp, #0]
   b7fea:	f7ff f891 	bl	b7110 <netdb_freeaddrinfo>
}
   b7fee:	4628      	mov	r0, r5
   b7ff0:	b013      	add	sp, #76	; 0x4c
   b7ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7ff6:	68e3      	ldr	r3, [r4, #12]
   b7ff8:	2b00      	cmp	r3, #0
   b7ffa:	d1c3      	bne.n	b7f84 <_ZN9TCPClient7connectEPKctm+0x64>
   b7ffc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8000:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8004:	f7ff f86c 	bl	b70e0 <inet_htonl>
   b8008:	4581      	cmp	r9, r0
   b800a:	d1bb      	bne.n	b7f84 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b800c:	f104 0114 	add.w	r1, r4, #20
   b8010:	e7aa      	b.n	b7f68 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8012:	4625      	mov	r5, r4
   b8014:	e7e8      	b.n	b7fe8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8016:	bf00      	nop
   b8018:	000bb0b0 	.word	0x000bb0b0

000b801c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b801c:	b538      	push	{r3, r4, r5, lr}
   b801e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8020:	681a      	ldr	r2, [r3, #0]
   b8022:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8024:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8026:	da10      	bge.n	b804a <_ZN9TCPClient9connectedEv+0x2e>
   b8028:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b802c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8030:	429a      	cmp	r2, r3
   b8032:	d10a      	bne.n	b804a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8034:	6803      	ldr	r3, [r0, #0]
   b8036:	691b      	ldr	r3, [r3, #16]
   b8038:	4798      	blx	r3
        if (!rv) {
   b803a:	4604      	mov	r4, r0
   b803c:	b928      	cbnz	r0, b804a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b803e:	682b      	ldr	r3, [r5, #0]
   b8040:	4628      	mov	r0, r5
   b8042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8044:	4798      	blx	r3
        rv = available();
   b8046:	4620      	mov	r0, r4
}
   b8048:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b804a:	2001      	movs	r0, #1
   b804c:	e7fc      	b.n	b8048 <_ZN9TCPClient9connectedEv+0x2c>

000b804e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b804e:	b510      	push	{r4, lr}
   b8050:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8052:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8056:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b805a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b805c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b805e:	d005      	beq.n	b806c <_ZN9TCPClient4peekEv+0x1e>
   b8060:	6963      	ldr	r3, [r4, #20]
   b8062:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8066:	4413      	add	r3, r2
   b8068:	7918      	ldrb	r0, [r3, #4]
}
   b806a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b806c:	6803      	ldr	r3, [r0, #0]
   b806e:	691b      	ldr	r3, [r3, #16]
   b8070:	4798      	blx	r3
   b8072:	2800      	cmp	r0, #0
   b8074:	d1f4      	bne.n	b8060 <_ZN9TCPClient4peekEv+0x12>
   b8076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b807a:	e7f6      	b.n	b806a <_ZN9TCPClient4peekEv+0x1c>

000b807c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b807e:	6943      	ldr	r3, [r0, #20]
   b8080:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8082:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8086:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b808a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b808c:	4605      	mov	r5, r0
   b808e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8090:	d016      	beq.n	b80c0 <_ZN9TCPClient4readEPhj+0x44>
   b8092:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8094:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8098:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b809c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b809e:	42bc      	cmp	r4, r7
   b80a0:	bf28      	it	cs
   b80a2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b80a4:	3304      	adds	r3, #4
   b80a6:	4622      	mov	r2, r4
   b80a8:	4419      	add	r1, r3
   b80aa:	4630      	mov	r0, r6
   b80ac:	f001 fe3c 	bl	b9d28 <memcpy>
   b80b0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b80b2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b80b6:	4423      	add	r3, r4
   b80b8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b80bc:	4620      	mov	r0, r4
   b80be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b80c0:	6803      	ldr	r3, [r0, #0]
   b80c2:	691b      	ldr	r3, [r3, #16]
   b80c4:	4798      	blx	r3
   b80c6:	2800      	cmp	r0, #0
   b80c8:	d1e3      	bne.n	b8092 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b80ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b80ce:	e7f5      	b.n	b80bc <_ZN9TCPClient4readEPhj+0x40>

000b80d0 <_ZN9TCPClient12flush_bufferEv>:
   b80d0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b80d2:	2300      	movs	r3, #0
   b80d4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b80d8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b80da:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b80de:	4770      	bx	lr

000b80e0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b80e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b80e4:	461f      	mov	r7, r3
    stop();
   b80e6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b80e8:	460c      	mov	r4, r1
    stop();
   b80ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b80ec:	b08a      	sub	sp, #40	; 0x28
   b80ee:	4605      	mov	r5, r0
   b80f0:	4616      	mov	r6, r2
    stop();
   b80f2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b80f4:	7d23      	ldrb	r3, [r4, #20]
   b80f6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b80fa:	2b04      	cmp	r3, #4
   b80fc:	bf0c      	ite	eq
   b80fe:	2002      	moveq	r0, #2
   b8100:	200a      	movne	r0, #10
   b8102:	2206      	movs	r2, #6
   b8104:	2101      	movs	r1, #1
   b8106:	f7ff f83b 	bl	b7180 <sock_socket>
   b810a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b810e:	696b      	ldr	r3, [r5, #20]
   b8110:	681b      	ldr	r3, [r3, #0]
   b8112:	2b00      	cmp	r3, #0
   b8114:	da08      	bge.n	b8128 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8116:	682b      	ldr	r3, [r5, #0]
   b8118:	4628      	mov	r0, r5
   b811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b811c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b811e:	4798      	blx	r3
}
   b8120:	4620      	mov	r0, r4
   b8122:	b00a      	add	sp, #40	; 0x28
   b8124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8128:	4628      	mov	r0, r5
   b812a:	f7ff ffd1 	bl	b80d0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b812e:	b1b7      	cbz	r7, b815e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8130:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8132:	a903      	add	r1, sp, #12
   b8134:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8136:	9303      	str	r3, [sp, #12]
   b8138:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b813c:	f7fe ffc0 	bl	b70c0 <if_index_to_name>
   b8140:	2800      	cmp	r0, #0
   b8142:	d1e8      	bne.n	b8116 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8144:	6968      	ldr	r0, [r5, #20]
   b8146:	2306      	movs	r3, #6
   b8148:	9300      	str	r3, [sp, #0]
   b814a:	6800      	ldr	r0, [r0, #0]
   b814c:	ab03      	add	r3, sp, #12
   b814e:	f241 020b 	movw	r2, #4107	; 0x100b
   b8152:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8156:	f7fe ffeb 	bl	b7130 <sock_setsockopt>
   b815a:	2800      	cmp	r0, #0
   b815c:	d1db      	bne.n	b8116 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b815e:	221c      	movs	r2, #28
   b8160:	2100      	movs	r1, #0
   b8162:	a803      	add	r0, sp, #12
   b8164:	f001 fdee 	bl	b9d44 <memset>
    if (ip.version() == 4) {
   b8168:	7d23      	ldrb	r3, [r4, #20]
   b816a:	2b04      	cmp	r3, #4
   b816c:	d11d      	bne.n	b81aa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b816e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8172:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8174:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8178:	f7fe ffc2 	bl	b7100 <inet_htons>
   b817c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8180:	6860      	ldr	r0, [r4, #4]
   b8182:	f7fe ffad 	bl	b70e0 <inet_htonl>
   b8186:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8188:	696b      	ldr	r3, [r5, #20]
   b818a:	221c      	movs	r2, #28
   b818c:	6818      	ldr	r0, [r3, #0]
   b818e:	a903      	add	r1, sp, #12
   b8190:	f7fe ffde 	bl	b7150 <sock_connect>
   b8194:	2800      	cmp	r0, #0
   b8196:	d1be      	bne.n	b8116 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8198:	3404      	adds	r4, #4
   b819a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b819c:	696d      	ldr	r5, [r5, #20]
   b819e:	358c      	adds	r5, #140	; 0x8c
   b81a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b81a2:	6823      	ldr	r3, [r4, #0]
   b81a4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b81a6:	2401      	movs	r4, #1
   b81a8:	e7ba      	b.n	b8120 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b81aa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b81ae:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b81b0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b81b4:	f7fe ffa4 	bl	b7100 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b81b8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b81ba:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b81be:	1d23      	adds	r3, r4, #4
   b81c0:	f104 0714 	add.w	r7, r4, #20
   b81c4:	6818      	ldr	r0, [r3, #0]
   b81c6:	6859      	ldr	r1, [r3, #4]
   b81c8:	4632      	mov	r2, r6
   b81ca:	c203      	stmia	r2!, {r0, r1}
   b81cc:	3308      	adds	r3, #8
   b81ce:	42bb      	cmp	r3, r7
   b81d0:	4616      	mov	r6, r2
   b81d2:	d1f7      	bne.n	b81c4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b81d4:	e7d8      	b.n	b8188 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b81d8 <_ZN9TCPClient9availableEv>:
{
   b81d8:	b530      	push	{r4, r5, lr}
   b81da:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b81dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b81e0:	b08b      	sub	sp, #44	; 0x2c
   b81e2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b81e4:	b12b      	cbz	r3, b81f2 <_ZN9TCPClient9availableEv+0x1a>
   b81e6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b81ea:	429a      	cmp	r2, r3
   b81ec:	d101      	bne.n	b81f2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b81ee:	f7ff ff6f 	bl	b80d0 <_ZN9TCPClient12flush_bufferEv>
   b81f2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b81f4:	6808      	ldr	r0, [r1, #0]
   b81f6:	2800      	cmp	r0, #0
   b81f8:	db18      	blt.n	b822c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b81fa:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b81fe:	2d7f      	cmp	r5, #127	; 0x7f
   b8200:	d814      	bhi.n	b822c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8202:	3104      	adds	r1, #4
   b8204:	2308      	movs	r3, #8
   b8206:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b820a:	4429      	add	r1, r5
   b820c:	f7fe ffa8 	bl	b7160 <sock_recv>
            if (ret > 0) {
   b8210:	2800      	cmp	r0, #0
   b8212:	dd13      	ble.n	b823c <_ZN9TCPClient9availableEv+0x64>
   b8214:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8216:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b821a:	b90a      	cbnz	r2, b8220 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b821c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8220:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8222:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8226:	4410      	add	r0, r2
   b8228:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b822c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b822e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8232:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8236:	1ac0      	subs	r0, r0, r3
   b8238:	b00b      	add	sp, #44	; 0x2c
   b823a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b823c:	f7ff f944 	bl	b74c8 <__errno>
   b8240:	6803      	ldr	r3, [r0, #0]
   b8242:	2b0b      	cmp	r3, #11
   b8244:	d0f2      	beq.n	b822c <_ZN9TCPClient9availableEv+0x54>
   b8246:	f7ff f93f 	bl	b74c8 <__errno>
   b824a:	6803      	ldr	r3, [r0, #0]
   b824c:	2b0b      	cmp	r3, #11
   b824e:	d0ed      	beq.n	b822c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8250:	2320      	movs	r3, #32
   b8252:	2500      	movs	r5, #0
   b8254:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8258:	f7ff f936 	bl	b74c8 <__errno>
   b825c:	6803      	ldr	r3, [r0, #0]
   b825e:	9301      	str	r3, [sp, #4]
   b8260:	4b08      	ldr	r3, [pc, #32]	; (b8284 <_ZN9TCPClient9availableEv+0xac>)
   b8262:	4909      	ldr	r1, [pc, #36]	; (b8288 <_ZN9TCPClient9availableEv+0xb0>)
   b8264:	9300      	str	r3, [sp, #0]
   b8266:	aa02      	add	r2, sp, #8
   b8268:	462b      	mov	r3, r5
   b826a:	2032      	movs	r0, #50	; 0x32
   b826c:	f7ff f858 	bl	b7320 <log_message>
                    sock_close(d_->sock);
   b8270:	6963      	ldr	r3, [r4, #20]
   b8272:	6818      	ldr	r0, [r3, #0]
   b8274:	f7fe ff64 	bl	b7140 <sock_close>
   b8278:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b827a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b827e:	601a      	str	r2, [r3, #0]
   b8280:	e7d4      	b.n	b822c <_ZN9TCPClient9availableEv+0x54>
   b8282:	bf00      	nop
   b8284:	000bb107 	.word	0x000bb107
   b8288:	000bb100 	.word	0x000bb100

000b828c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b828c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b828e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8290:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8292:	6818      	ldr	r0, [r3, #0]
   b8294:	2800      	cmp	r0, #0
   b8296:	db01      	blt.n	b829c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8298:	f7fe ff52 	bl	b7140 <sock_close>
   b829c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b829e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b82a2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b82a4:	6960      	ldr	r0, [r4, #20]
   b82a6:	2211      	movs	r2, #17
   b82a8:	2100      	movs	r1, #0
   b82aa:	308c      	adds	r0, #140	; 0x8c
   b82ac:	f001 fd4a 	bl	b9d44 <memset>
    flush_buffer();
   b82b0:	4620      	mov	r0, r4
}
   b82b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b82b6:	f7ff bf0b 	b.w	b80d0 <_ZN9TCPClient12flush_bufferEv>

000b82ba <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b82ba:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b82bc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b82be:	4604      	mov	r4, r0
          total(0) {
   b82c0:	6001      	str	r1, [r0, #0]
   b82c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b82c6:	3088      	adds	r0, #136	; 0x88
   b82c8:	f7ff fa34 	bl	b7734 <_ZN9IPAddressC1Ev>
}
   b82cc:	4620      	mov	r0, r4
   b82ce:	bd10      	pop	{r4, pc}

000b82d0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b82d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b82d2:	2300      	movs	r3, #0
   b82d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b82d8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b82dc:	4a0e      	ldr	r2, [pc, #56]	; (b8318 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b82de:	6103      	str	r3, [r0, #16]
   b82e0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b82e2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b82e4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b82e6:	20ac      	movs	r0, #172	; 0xac
   b82e8:	9101      	str	r1, [sp, #4]
   b82ea:	f7fc fb7a 	bl	b49e2 <_Znwj>
	  auto __pi = ::new (__mem)
   b82ee:	1e05      	subs	r5, r0, #0
   b82f0:	f105 060c 	add.w	r6, r5, #12
   b82f4:	d008      	beq.n	b8308 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b82f6:	2301      	movs	r3, #1
   b82f8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b82fc:	4b07      	ldr	r3, [pc, #28]	; (b831c <_ZN9TCPClientC1Ei+0x4c>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b82fe:	9901      	ldr	r1, [sp, #4]
   b8300:	602b      	str	r3, [r5, #0]
   b8302:	4630      	mov	r0, r6
   b8304:	f7ff ffd9 	bl	b82ba <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8308:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b830a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b830e:	f7ff fedf 	bl	b80d0 <_ZN9TCPClient12flush_bufferEv>
}
   b8312:	b002      	add	sp, #8
   b8314:	bd70      	pop	{r4, r5, r6, pc}
   b8316:	bf00      	nop
   b8318:	000bb13c 	.word	0x000bb13c
   b831c:	000bb120 	.word	0x000bb120

000b8320 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8320:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8322:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8326:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8328:	f7ff ffd2 	bl	b82d0 <_ZN9TCPClientC1Ei>
}
   b832c:	4620      	mov	r0, r4
   b832e:	bd10      	pop	{r4, pc}

000b8330 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8330:	b510      	push	{r4, lr}
   b8332:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8334:	6800      	ldr	r0, [r0, #0]
   b8336:	2800      	cmp	r0, #0
   b8338:	db01      	blt.n	b833e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b833a:	f7fe ff01 	bl	b7140 <sock_close>
    }
}
   b833e:	4620      	mov	r0, r4
   b8340:	bd10      	pop	{r4, pc}

000b8342 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8342:	300c      	adds	r0, #12
   b8344:	f7ff bff4 	b.w	b8330 <_ZN9TCPClient4DataD1Ev>

000b8348 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8348:	4b02      	ldr	r3, [pc, #8]	; (b8354 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b834a:	681a      	ldr	r2, [r3, #0]
   b834c:	4b02      	ldr	r3, [pc, #8]	; (b8358 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b834e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8350:	4770      	bx	lr
   b8352:	bf00      	nop
   b8354:	2003e548 	.word	0x2003e548
   b8358:	2003e6fc 	.word	0x2003e6fc

000b835c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b835c:	4770      	bx	lr

000b835e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b835e:	7441      	strb	r1, [r0, #17]
}
   b8360:	4770      	bx	lr

000b8362 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8362:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8364:	7c00      	ldrb	r0, [r0, #16]
   b8366:	f7fe ff83 	bl	b7270 <hal_usart_available_data_for_write>
}
   b836a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b836e:	bd08      	pop	{r3, pc}

000b8370 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8370:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8372:	7c00      	ldrb	r0, [r0, #16]
   b8374:	f7fe ff54 	bl	b7220 <hal_usart_available>
}
   b8378:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b837c:	bd08      	pop	{r3, pc}

000b837e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b837e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8380:	7c00      	ldrb	r0, [r0, #16]
   b8382:	f7fe ff5d 	bl	b7240 <hal_usart_peek>
}
   b8386:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b838a:	bd08      	pop	{r3, pc}

000b838c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b838c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b838e:	7c00      	ldrb	r0, [r0, #16]
   b8390:	f7fe ff4e 	bl	b7230 <hal_usart_read>
}
   b8394:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8398:	bd08      	pop	{r3, pc}

000b839a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b839a:	7c00      	ldrb	r0, [r0, #16]
   b839c:	f7fe bf58 	b.w	b7250 <hal_usart_flush>

000b83a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b83a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83a2:	7c45      	ldrb	r5, [r0, #17]
{
   b83a4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83a6:	b12d      	cbz	r5, b83b4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b83a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b83aa:	b003      	add	sp, #12
   b83ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b83b0:	f7fe bf2e 	b.w	b7210 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83b4:	7c00      	ldrb	r0, [r0, #16]
   b83b6:	9101      	str	r1, [sp, #4]
   b83b8:	f7fe ff5a 	bl	b7270 <hal_usart_available_data_for_write>
   b83bc:	2800      	cmp	r0, #0
   b83be:	9901      	ldr	r1, [sp, #4]
   b83c0:	dcf2      	bgt.n	b83a8 <_ZN11USARTSerial5writeEh+0x8>
}
   b83c2:	4628      	mov	r0, r5
   b83c4:	b003      	add	sp, #12
   b83c6:	bd30      	pop	{r4, r5, pc}

000b83c8 <_ZN11USARTSerialD0Ev>:
   b83c8:	b510      	push	{r4, lr}
   b83ca:	2114      	movs	r1, #20
   b83cc:	4604      	mov	r4, r0
   b83ce:	f7fc fb0c 	bl	b49ea <_ZdlPvj>
   b83d2:	4620      	mov	r0, r4
   b83d4:	bd10      	pop	{r4, pc}
	...

000b83d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b83d8:	b510      	push	{r4, lr}
   b83da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b83de:	4604      	mov	r4, r0
   b83e0:	4608      	mov	r0, r1
   b83e2:	4611      	mov	r1, r2
   b83e4:	2200      	movs	r2, #0
   b83e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b83ea:	4b04      	ldr	r3, [pc, #16]	; (b83fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b83ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b83ee:	2301      	movs	r3, #1
  _serial = serial;
   b83f0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b83f2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b83f4:	f7fe ff44 	bl	b7280 <hal_usart_init_ex>
}
   b83f8:	4620      	mov	r0, r4
   b83fa:	bd10      	pop	{r4, pc}
   b83fc:	000bb1a4 	.word	0x000bb1a4

000b8400 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8400:	7441      	strb	r1, [r0, #17]
}
   b8402:	4770      	bx	lr

000b8404 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8404:	4770      	bx	lr

000b8406 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8406:	4770      	bx	lr

000b8408 <_ZN9USBSerial4readEv>:
{
   b8408:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b840a:	2100      	movs	r1, #0
   b840c:	7c00      	ldrb	r0, [r0, #16]
   b840e:	f7fe ff5f 	bl	b72d0 <HAL_USB_USART_Receive_Data>
}
   b8412:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8416:	bd08      	pop	{r3, pc}

000b8418 <_ZN9USBSerial4peekEv>:
{
   b8418:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b841a:	2101      	movs	r1, #1
   b841c:	7c00      	ldrb	r0, [r0, #16]
   b841e:	f7fe ff57 	bl	b72d0 <HAL_USB_USART_Receive_Data>
}
   b8422:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8426:	bd08      	pop	{r3, pc}

000b8428 <_ZN9USBSerial17availableForWriteEv>:
{
   b8428:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b842a:	7c00      	ldrb	r0, [r0, #16]
   b842c:	f7fe ff48 	bl	b72c0 <HAL_USB_USART_Available_Data_For_Write>
}
   b8430:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8434:	bd08      	pop	{r3, pc}

000b8436 <_ZN9USBSerial9availableEv>:
{
   b8436:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8438:	7c00      	ldrb	r0, [r0, #16]
   b843a:	f7fe ff39 	bl	b72b0 <HAL_USB_USART_Available_Data>
}
   b843e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8442:	bd08      	pop	{r3, pc}

000b8444 <_ZN9USBSerial5writeEh>:
{
   b8444:	b513      	push	{r0, r1, r4, lr}
   b8446:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8448:	7c00      	ldrb	r0, [r0, #16]
{
   b844a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b844c:	f7fe ff38 	bl	b72c0 <HAL_USB_USART_Available_Data_For_Write>
   b8450:	2800      	cmp	r0, #0
   b8452:	9901      	ldr	r1, [sp, #4]
   b8454:	dc01      	bgt.n	b845a <_ZN9USBSerial5writeEh+0x16>
   b8456:	7c60      	ldrb	r0, [r4, #17]
   b8458:	b120      	cbz	r0, b8464 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b845a:	7c20      	ldrb	r0, [r4, #16]
   b845c:	f7fe ff40 	bl	b72e0 <HAL_USB_USART_Send_Data>
   b8460:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8464:	b002      	add	sp, #8
   b8466:	bd10      	pop	{r4, pc}

000b8468 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8468:	7c00      	ldrb	r0, [r0, #16]
   b846a:	f7fe bf41 	b.w	b72f0 <HAL_USB_USART_Flush_Data>

000b846e <_ZN9USBSerialD0Ev>:
   b846e:	b510      	push	{r4, lr}
   b8470:	2114      	movs	r1, #20
   b8472:	4604      	mov	r4, r0
   b8474:	f7fc fab9 	bl	b49ea <_ZdlPvj>
   b8478:	4620      	mov	r0, r4
   b847a:	bd10      	pop	{r4, pc}

000b847c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b847c:	b510      	push	{r4, lr}
   b847e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8482:	4604      	mov	r4, r0
   b8484:	4608      	mov	r0, r1
   b8486:	2100      	movs	r1, #0
   b8488:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b848c:	4b04      	ldr	r3, [pc, #16]	; (b84a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b848e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8490:	2301      	movs	r3, #1
  _serial = serial;
   b8492:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8494:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8496:	4611      	mov	r1, r2
   b8498:	f7fe fefa 	bl	b7290 <HAL_USB_USART_Init>
}
   b849c:	4620      	mov	r0, r4
   b849e:	bd10      	pop	{r4, pc}
   b84a0:	000bb1d4 	.word	0x000bb1d4

000b84a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b84a4:	7c00      	ldrb	r0, [r0, #16]
   b84a6:	2200      	movs	r2, #0
   b84a8:	f7fe befa 	b.w	b72a0 <HAL_USB_USART_Begin>

000b84ac <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b84ac:	7c00      	ldrb	r0, [r0, #16]
   b84ae:	f7fe bf27 	b.w	b7300 <HAL_USB_USART_Is_Connected>

000b84b2 <_Z19acquireSerialBufferv>:
{
   b84b2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b84b4:	2214      	movs	r2, #20
{
   b84b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b84b8:	2100      	movs	r1, #0
   b84ba:	f001 fc43 	bl	b9d44 <memset>
}
   b84be:	4620      	mov	r0, r4
   b84c0:	bd10      	pop	{r4, pc}
	...

000b84c4 <_Z16_fetch_usbserialv>:
{
   b84c4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84c6:	4c0f      	ldr	r4, [pc, #60]	; (b8504 <_Z16_fetch_usbserialv+0x40>)
{
   b84c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b84ca:	a803      	add	r0, sp, #12
   b84cc:	f7ff fff1 	bl	b84b2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b84d0:	7821      	ldrb	r1, [r4, #0]
   b84d2:	f3bf 8f5b 	dmb	ish
   b84d6:	f011 0101 	ands.w	r1, r1, #1
   b84da:	d10f      	bne.n	b84fc <_Z16_fetch_usbserialv+0x38>
   b84dc:	4620      	mov	r0, r4
   b84de:	9101      	str	r1, [sp, #4]
   b84e0:	f7fc fa92 	bl	b4a08 <__cxa_guard_acquire>
   b84e4:	9901      	ldr	r1, [sp, #4]
   b84e6:	b148      	cbz	r0, b84fc <_Z16_fetch_usbserialv+0x38>
   b84e8:	aa03      	add	r2, sp, #12
   b84ea:	4807      	ldr	r0, [pc, #28]	; (b8508 <_Z16_fetch_usbserialv+0x44>)
   b84ec:	f7ff ffc6 	bl	b847c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b84f0:	4620      	mov	r0, r4
   b84f2:	f7fc fa8e 	bl	b4a12 <__cxa_guard_release>
   b84f6:	4805      	ldr	r0, [pc, #20]	; (b850c <_Z16_fetch_usbserialv+0x48>)
   b84f8:	f001 fc08 	bl	b9d0c <atexit>
	return _usbserial;
}
   b84fc:	4802      	ldr	r0, [pc, #8]	; (b8508 <_Z16_fetch_usbserialv+0x44>)
   b84fe:	b008      	add	sp, #32
   b8500:	bd10      	pop	{r4, pc}
   b8502:	bf00      	nop
   b8504:	2003e700 	.word	0x2003e700
   b8508:	2003e704 	.word	0x2003e704
   b850c:	000b8405 	.word	0x000b8405

000b8510 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8510:	2200      	movs	r2, #0
   b8512:	6840      	ldr	r0, [r0, #4]
   b8514:	4611      	mov	r1, r2
   b8516:	f7fe bf5f 	b.w	b73d8 <network_ready>

000b851a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b851a:	2200      	movs	r2, #0
   b851c:	6840      	ldr	r0, [r0, #4]
   b851e:	4611      	mov	r1, r2
   b8520:	f7fe bf7a 	b.w	b7418 <network_listening>

000b8524 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8524:	2200      	movs	r2, #0
   b8526:	6840      	ldr	r0, [r0, #4]
   b8528:	4611      	mov	r1, r2
   b852a:	f7fe bf85 	b.w	b7438 <network_get_listen_timeout>

000b852e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b852e:	6840      	ldr	r0, [r0, #4]
   b8530:	2200      	movs	r2, #0
   b8532:	f7fe bf79 	b.w	b7428 <network_set_listen_timeout>

000b8536 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8536:	6840      	ldr	r0, [r0, #4]
   b8538:	2200      	movs	r2, #0
   b853a:	f081 0101 	eor.w	r1, r1, #1
   b853e:	f7fe bf63 	b.w	b7408 <network_listen>

000b8542 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8542:	2300      	movs	r3, #0
   b8544:	6840      	ldr	r0, [r0, #4]
   b8546:	461a      	mov	r2, r3
   b8548:	4619      	mov	r1, r3
   b854a:	f7fe bf55 	b.w	b73f8 <network_off>

000b854e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b854e:	2300      	movs	r3, #0
   b8550:	6840      	ldr	r0, [r0, #4]
   b8552:	461a      	mov	r2, r3
   b8554:	4619      	mov	r1, r3
   b8556:	f7fe bf47 	b.w	b73e8 <network_on>

000b855a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b855a:	2200      	movs	r2, #0
   b855c:	6840      	ldr	r0, [r0, #4]
   b855e:	4611      	mov	r1, r2
   b8560:	f7fe bf2a 	b.w	b73b8 <network_connecting>

000b8564 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8564:	6840      	ldr	r0, [r0, #4]
   b8566:	2200      	movs	r2, #0
   b8568:	2102      	movs	r1, #2
   b856a:	f7fe bf2d 	b.w	b73c8 <network_disconnect>

000b856e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b856e:	2300      	movs	r3, #0
   b8570:	6840      	ldr	r0, [r0, #4]
   b8572:	461a      	mov	r2, r3
   b8574:	f7fe bf18 	b.w	b73a8 <network_connect>

000b8578 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8578:	4b02      	ldr	r3, [pc, #8]	; (b8584 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b857a:	2204      	movs	r2, #4
   b857c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b857e:	4a02      	ldr	r2, [pc, #8]	; (b8588 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8580:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8582:	4770      	bx	lr
   b8584:	2003e718 	.word	0x2003e718
   b8588:	000bb204 	.word	0x000bb204

000b858c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b858c:	b510      	push	{r4, lr}
   b858e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8590:	f7fc f9e4 	bl	b495c <strlen>
   b8594:	3801      	subs	r0, #1
   b8596:	1823      	adds	r3, r4, r0
   b8598:	4620      	mov	r0, r4
	while(i<j){
   b859a:	4283      	cmp	r3, r0
   b859c:	d906      	bls.n	b85ac <_Z11str_reversePc+0x20>
		c = *i;
   b859e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b85a0:	7819      	ldrb	r1, [r3, #0]
   b85a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b85a6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b85aa:	e7f6      	b.n	b859a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b85ac:	bd10      	pop	{r4, pc}

000b85ae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b85ae:	b570      	push	{r4, r5, r6, lr}
   b85b0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b85b2:	1e91      	subs	r1, r2, #2
   b85b4:	2922      	cmp	r1, #34	; 0x22
   b85b6:	d81d      	bhi.n	b85f4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b85b8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b85ba:	b930      	cbnz	r0, b85ca <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b85bc:	4423      	add	r3, r4
            *ptr++ = '0';
   b85be:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b85c0:	429d      	cmp	r5, r3
   b85c2:	d210      	bcs.n	b85e6 <ultoa+0x38>
            *ptr++ = '0';
   b85c4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b85c8:	e7fa      	b.n	b85c0 <ultoa+0x12>
            result.quot = a/radix;
   b85ca:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b85ce:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b85d2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b85d4:	2809      	cmp	r0, #9
                *ptr += '0';
   b85d6:	bf94      	ite	ls
   b85d8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b85da:	3157      	addhi	r1, #87	; 0x57
   b85dc:	b2c9      	uxtb	r1, r1
   b85de:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b85e2:	4630      	mov	r0, r6
	while(a){
   b85e4:	e7e9      	b.n	b85ba <ultoa+0xc>

	*ptr = '\0';
   b85e6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b85e8:	4620      	mov	r0, r4
	*ptr = '\0';
   b85ea:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b85ec:	f7ff ffce 	bl	b858c <_Z11str_reversePc>
	return buffer;
   b85f0:	4620      	mov	r0, r4
}
   b85f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b85f4:	2000      	movs	r0, #0
   b85f6:	e7fc      	b.n	b85f2 <ultoa+0x44>

000b85f8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b85f8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b85fa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b85fc:	460c      	mov	r4, r1
   b85fe:	4615      	mov	r5, r2
	if(a<0){
   b8600:	da0e      	bge.n	b8620 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8606:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b860a:	bf14      	ite	ne
   b860c:	4258      	negne	r0, r3
   b860e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8610:	2301      	movs	r3, #1
		*buffer = '-';
   b8612:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8614:	462a      	mov	r2, r5
   b8616:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8618:	f7ff ffc9 	bl	b85ae <ultoa>
	}
	return buffer;
}
   b861c:	4620      	mov	r0, r4
   b861e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8620:	2301      	movs	r3, #1
   b8622:	e7f9      	b.n	b8618 <itoa+0x20>

000b8624 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8624:	4b01      	ldr	r3, [pc, #4]	; (b862c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8626:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8628:	4770      	bx	lr
   b862a:	bf00      	nop
   b862c:	2003e550 	.word	0x2003e550

000b8630 <serialEventRun>:
{
   b8630:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8632:	4b0b      	ldr	r3, [pc, #44]	; (b8660 <serialEventRun+0x30>)
   b8634:	b143      	cbz	r3, b8648 <serialEventRun+0x18>
   b8636:	f7ff ff45 	bl	b84c4 <_Z16_fetch_usbserialv>
   b863a:	6803      	ldr	r3, [r0, #0]
   b863c:	691b      	ldr	r3, [r3, #16]
   b863e:	4798      	blx	r3
   b8640:	2800      	cmp	r0, #0
   b8642:	dd01      	ble.n	b8648 <serialEventRun+0x18>
        serialEvent();
   b8644:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8648:	4b06      	ldr	r3, [pc, #24]	; (b8664 <serialEventRun+0x34>)
   b864a:	b143      	cbz	r3, b865e <serialEventRun+0x2e>
   b864c:	f000 f99a 	bl	b8984 <_Z22__fetch_global_Serial1v>
   b8650:	6803      	ldr	r3, [r0, #0]
   b8652:	691b      	ldr	r3, [r3, #16]
   b8654:	4798      	blx	r3
   b8656:	2800      	cmp	r0, #0
   b8658:	dd01      	ble.n	b865e <serialEventRun+0x2e>
        serialEvent1();
   b865a:	f3af 8000 	nop.w
}
   b865e:	bd08      	pop	{r3, pc}
	...

000b8668 <_post_loop>:
{
   b8668:	b508      	push	{r3, lr}
	serialEventRun();
   b866a:	f7ff ffe1 	bl	b8630 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b866e:	f7fe fc7f 	bl	b6f70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8672:	4b01      	ldr	r3, [pc, #4]	; (b8678 <_post_loop+0x10>)
   b8674:	6018      	str	r0, [r3, #0]
}
   b8676:	bd08      	pop	{r3, pc}
   b8678:	2003e728 	.word	0x2003e728

000b867c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b867c:	4805      	ldr	r0, [pc, #20]	; (b8694 <_Z33system_initialize_user_backup_ramv+0x18>)
   b867e:	4a06      	ldr	r2, [pc, #24]	; (b8698 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8680:	4906      	ldr	r1, [pc, #24]	; (b869c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8682:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8684:	1a12      	subs	r2, r2, r0
   b8686:	f001 fb4f 	bl	b9d28 <memcpy>
    __backup_sram_signature = signature;
   b868a:	4b05      	ldr	r3, [pc, #20]	; (b86a0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b868c:	4a05      	ldr	r2, [pc, #20]	; (b86a4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b868e:	601a      	str	r2, [r3, #0]
}
   b8690:	bd08      	pop	{r3, pc}
   b8692:	bf00      	nop
   b8694:	2003f400 	.word	0x2003f400
   b8698:	2003f404 	.word	0x2003f404
   b869c:	000bb57c 	.word	0x000bb57c
   b86a0:	2003f400 	.word	0x2003f400
   b86a4:	9a271c1e 	.word	0x9a271c1e

000b86a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b86a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b86aa:	2300      	movs	r3, #0
   b86ac:	9300      	str	r3, [sp, #0]
   b86ae:	461a      	mov	r2, r3
   b86b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b86b4:	f7fe fe5e 	bl	b7374 <system_ctrl_set_result>
}
   b86b8:	b003      	add	sp, #12
   b86ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b86c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b86c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b86c2:	8843      	ldrh	r3, [r0, #2]
   b86c4:	2b0a      	cmp	r3, #10
   b86c6:	d008      	beq.n	b86da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b86c8:	2b50      	cmp	r3, #80	; 0x50
   b86ca:	d10b      	bne.n	b86e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b86cc:	4b09      	ldr	r3, [pc, #36]	; (b86f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b86ce:	681b      	ldr	r3, [r3, #0]
   b86d0:	b14b      	cbz	r3, b86e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b86d2:	b003      	add	sp, #12
   b86d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b86d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b86da:	f7ff ffe5 	bl	b86a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b86de:	b003      	add	sp, #12
   b86e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b86e4:	2300      	movs	r3, #0
   b86e6:	9300      	str	r3, [sp, #0]
   b86e8:	461a      	mov	r2, r3
   b86ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b86ee:	f7fe fe41 	bl	b7374 <system_ctrl_set_result>
}
   b86f2:	e7f4      	b.n	b86de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b86f4:	2003e724 	.word	0x2003e724

000b86f8 <module_user_init_hook>:
{
   b86f8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b86fa:	4812      	ldr	r0, [pc, #72]	; (b8744 <module_user_init_hook+0x4c>)
   b86fc:	2100      	movs	r1, #0
   b86fe:	f7fe fef3 	bl	b74e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8702:	4b11      	ldr	r3, [pc, #68]	; (b8748 <module_user_init_hook+0x50>)
   b8704:	681a      	ldr	r2, [r3, #0]
   b8706:	4b11      	ldr	r3, [pc, #68]	; (b874c <module_user_init_hook+0x54>)
   b8708:	429a      	cmp	r2, r3
   b870a:	4b11      	ldr	r3, [pc, #68]	; (b8750 <module_user_init_hook+0x58>)
   b870c:	bf0c      	ite	eq
   b870e:	2201      	moveq	r2, #1
   b8710:	2200      	movne	r2, #0
   b8712:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8714:	d001      	beq.n	b871a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8716:	f7ff ffb1 	bl	b867c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b871a:	f7fe fc19 	bl	b6f50 <HAL_RNG_GetRandomNumber>
   b871e:	4604      	mov	r4, r0
    srand(seed);
   b8720:	f001 fb18 	bl	b9d54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8724:	4b0b      	ldr	r3, [pc, #44]	; (b8754 <module_user_init_hook+0x5c>)
   b8726:	b113      	cbz	r3, b872e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8728:	4620      	mov	r0, r4
   b872a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b872e:	2100      	movs	r1, #0
   b8730:	4808      	ldr	r0, [pc, #32]	; (b8754 <module_user_init_hook+0x5c>)
   b8732:	f7fe fe31 	bl	b7398 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b873a:	4807      	ldr	r0, [pc, #28]	; (b8758 <module_user_init_hook+0x60>)
   b873c:	2100      	movs	r1, #0
   b873e:	f7fe be0f 	b.w	b7360 <system_ctrl_set_app_request_handler>
   b8742:	bf00      	nop
   b8744:	000b8625 	.word	0x000b8625
   b8748:	2003f400 	.word	0x2003f400
   b874c:	9a271c1e 	.word	0x9a271c1e
   b8750:	2003e720 	.word	0x2003e720
   b8754:	00000000 	.word	0x00000000
   b8758:	000b86c1 	.word	0x000b86c1

000b875c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b875c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b875e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8760:	d902      	bls.n	b8768 <pinAvailable+0xc>
    return false;
   b8762:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8764:	b002      	add	sp, #8
   b8766:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8768:	f1a0 030b 	sub.w	r3, r0, #11
   b876c:	2b02      	cmp	r3, #2
   b876e:	d81a      	bhi.n	b87a6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8770:	4c17      	ldr	r4, [pc, #92]	; (b87d0 <pinAvailable+0x74>)
   b8772:	7821      	ldrb	r1, [r4, #0]
   b8774:	f3bf 8f5b 	dmb	ish
   b8778:	f011 0101 	ands.w	r1, r1, #1
   b877c:	d10b      	bne.n	b8796 <pinAvailable+0x3a>
   b877e:	4620      	mov	r0, r4
   b8780:	9101      	str	r1, [sp, #4]
   b8782:	f7fc f941 	bl	b4a08 <__cxa_guard_acquire>
   b8786:	9901      	ldr	r1, [sp, #4]
   b8788:	b128      	cbz	r0, b8796 <pinAvailable+0x3a>
   b878a:	4812      	ldr	r0, [pc, #72]	; (b87d4 <pinAvailable+0x78>)
   b878c:	f7ff f980 	bl	b7a90 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8790:	4620      	mov	r0, r4
   b8792:	f7fc f93e 	bl	b4a12 <__cxa_guard_release>
   b8796:	4b0f      	ldr	r3, [pc, #60]	; (b87d4 <pinAvailable+0x78>)
   b8798:	7818      	ldrb	r0, [r3, #0]
   b879a:	f7fe fd11 	bl	b71c0 <hal_spi_is_enabled>
   b879e:	2800      	cmp	r0, #0
   b87a0:	d1df      	bne.n	b8762 <pinAvailable+0x6>
  return true; // 'pin' is available
   b87a2:	2001      	movs	r0, #1
   b87a4:	e7de      	b.n	b8764 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b87a6:	2801      	cmp	r0, #1
   b87a8:	d809      	bhi.n	b87be <pinAvailable+0x62>
   b87aa:	f000 f8ab 	bl	b8904 <_Z19__fetch_global_Wirev>
   b87ae:	2100      	movs	r1, #0
   b87b0:	7c00      	ldrb	r0, [r0, #16]
   b87b2:	f7fe fc6d 	bl	b7090 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b87b6:	f080 0001 	eor.w	r0, r0, #1
   b87ba:	b2c0      	uxtb	r0, r0
   b87bc:	e7d2      	b.n	b8764 <pinAvailable+0x8>
   b87be:	3809      	subs	r0, #9
   b87c0:	2801      	cmp	r0, #1
   b87c2:	d8ee      	bhi.n	b87a2 <pinAvailable+0x46>
   b87c4:	f000 f8de 	bl	b8984 <_Z22__fetch_global_Serial1v>
   b87c8:	7c00      	ldrb	r0, [r0, #16]
   b87ca:	f7fe fd49 	bl	b7260 <hal_usart_is_enabled>
   b87ce:	e7f2      	b.n	b87b6 <pinAvailable+0x5a>
   b87d0:	2003e6b8 	.word	0x2003e6b8
   b87d4:	2003e6bc 	.word	0x2003e6bc

000b87d8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b87d8:	2823      	cmp	r0, #35	; 0x23
{
   b87da:	b538      	push	{r3, r4, r5, lr}
   b87dc:	4604      	mov	r4, r0
   b87de:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b87e0:	d80a      	bhi.n	b87f8 <pinMode+0x20>
   b87e2:	29ff      	cmp	r1, #255	; 0xff
   b87e4:	d008      	beq.n	b87f8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b87e6:	f7ff ffb9 	bl	b875c <pinAvailable>
   b87ea:	b128      	cbz	r0, b87f8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b87ec:	4629      	mov	r1, r5
   b87ee:	4620      	mov	r0, r4
}
   b87f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b87f4:	f7fe bbcc 	b.w	b6f90 <hal_gpio_mode>
}
   b87f8:	bd38      	pop	{r3, r4, r5, pc}

000b87fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b87fa:	b538      	push	{r3, r4, r5, lr}
   b87fc:	4604      	mov	r4, r0
   b87fe:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8800:	f7fe fbce 	bl	b6fa0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8804:	28ff      	cmp	r0, #255	; 0xff
   b8806:	d010      	beq.n	b882a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8808:	2806      	cmp	r0, #6
   b880a:	d804      	bhi.n	b8816 <digitalWrite+0x1c>
   b880c:	234d      	movs	r3, #77	; 0x4d
   b880e:	fa23 f000 	lsr.w	r0, r3, r0
   b8812:	07c3      	lsls	r3, r0, #31
   b8814:	d409      	bmi.n	b882a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8816:	4620      	mov	r0, r4
   b8818:	f7ff ffa0 	bl	b875c <pinAvailable>
   b881c:	b128      	cbz	r0, b882a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b881e:	4629      	mov	r1, r5
   b8820:	4620      	mov	r0, r4
}
   b8822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8826:	f7fe bbc3 	b.w	b6fb0 <hal_gpio_write>
}
   b882a:	bd38      	pop	{r3, r4, r5, pc}

000b882c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b882c:	b510      	push	{r4, lr}
   b882e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8830:	f7fe fbb6 	bl	b6fa0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8834:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8836:	b2db      	uxtb	r3, r3
   b8838:	2b01      	cmp	r3, #1
   b883a:	d908      	bls.n	b884e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b883c:	4620      	mov	r0, r4
   b883e:	f7ff ff8d 	bl	b875c <pinAvailable>
   b8842:	b120      	cbz	r0, b884e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8844:	4620      	mov	r0, r4
}
   b8846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b884a:	f7fe bbb9 	b.w	b6fc0 <hal_gpio_read>
}
   b884e:	2000      	movs	r0, #0
   b8850:	bd10      	pop	{r4, pc}

000b8852 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8852:	280d      	cmp	r0, #13
{
   b8854:	b510      	push	{r4, lr}
   b8856:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8858:	bf9c      	itt	ls
   b885a:	340e      	addls	r4, #14
   b885c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b885e:	4620      	mov	r0, r4
   b8860:	f7ff ff7c 	bl	b875c <pinAvailable>
   b8864:	b150      	cbz	r0, b887c <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b8866:	2103      	movs	r1, #3
   b8868:	4620      	mov	r0, r4
   b886a:	f7fe fb89 	bl	b6f80 <hal_pin_validate_function>
   b886e:	2803      	cmp	r0, #3
   b8870:	d104      	bne.n	b887c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8872:	4620      	mov	r0, r4
}
   b8874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8878:	f7fe bbb2 	b.w	b6fe0 <hal_adc_read>
}
   b887c:	2000      	movs	r0, #0
   b887e:	bd10      	pop	{r4, pc}

000b8880 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b8880:	b538      	push	{r3, r4, r5, lr}
   b8882:	4604      	mov	r4, r0
   b8884:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b8886:	f7ff ff69 	bl	b875c <pinAvailable>
   b888a:	b1f0      	cbz	r0, b88ca <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b888c:	2104      	movs	r1, #4
   b888e:	4620      	mov	r0, r4
   b8890:	f7fe fb76 	bl	b6f80 <hal_pin_validate_function>
   b8894:	2804      	cmp	r0, #4
   b8896:	d105      	bne.n	b88a4 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b8898:	b2a9      	uxth	r1, r5
   b889a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b889c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b88a0:	f7fe bb96 	b.w	b6fd0 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b88a4:	2102      	movs	r1, #2
   b88a6:	4620      	mov	r0, r4
   b88a8:	f7fe fb6a 	bl	b6f80 <hal_pin_validate_function>
   b88ac:	2802      	cmp	r0, #2
   b88ae:	d10c      	bne.n	b88ca <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b88b0:	4620      	mov	r0, r4
   b88b2:	f7fe fb75 	bl	b6fa0 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b88b6:	2801      	cmp	r0, #1
   b88b8:	d001      	beq.n	b88be <_Z11analogWritetm+0x3e>
   b88ba:	2804      	cmp	r0, #4
   b88bc:	d105      	bne.n	b88ca <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b88be:	4629      	mov	r1, r5
   b88c0:	4620      	mov	r0, r4
}
   b88c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b88c6:	f7fe bb93 	b.w	b6ff0 <hal_pwm_write_ext>
}
   b88ca:	bd38      	pop	{r3, r4, r5, pc}

000b88cc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b88cc:	4770      	bx	lr
	...

000b88d0 <_Z17acquireWireBufferv>:
{
   b88d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b88d2:	4b0a      	ldr	r3, [pc, #40]	; (b88fc <_Z17acquireWireBufferv+0x2c>)
   b88d4:	6003      	str	r3, [r0, #0]
   b88d6:	2301      	movs	r3, #1
{
   b88d8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b88da:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b88dc:	4908      	ldr	r1, [pc, #32]	; (b8900 <_Z17acquireWireBufferv+0x30>)
   b88de:	2020      	movs	r0, #32
   b88e0:	f000 f874 	bl	b89cc <_ZnajRKSt9nothrow_t>
	};
   b88e4:	2520      	movs	r5, #32
   b88e6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b88e8:	4905      	ldr	r1, [pc, #20]	; (b8900 <_Z17acquireWireBufferv+0x30>)
	};
   b88ea:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b88ec:	4628      	mov	r0, r5
   b88ee:	f000 f86d 	bl	b89cc <_ZnajRKSt9nothrow_t>
	};
   b88f2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b88f6:	4620      	mov	r0, r4
   b88f8:	bd38      	pop	{r3, r4, r5, pc}
   b88fa:	bf00      	nop
   b88fc:	00010018 	.word	0x00010018
   b8900:	000bb238 	.word	0x000bb238

000b8904 <_Z19__fetch_global_Wirev>:
{
   b8904:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8906:	4d0e      	ldr	r5, [pc, #56]	; (b8940 <_Z19__fetch_global_Wirev+0x3c>)
   b8908:	7829      	ldrb	r1, [r5, #0]
   b890a:	f3bf 8f5b 	dmb	ish
   b890e:	f011 0401 	ands.w	r4, r1, #1
{
   b8912:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8914:	d111      	bne.n	b893a <_Z19__fetch_global_Wirev+0x36>
   b8916:	4628      	mov	r0, r5
   b8918:	f7fc f876 	bl	b4a08 <__cxa_guard_acquire>
   b891c:	b168      	cbz	r0, b893a <_Z19__fetch_global_Wirev+0x36>
   b891e:	4668      	mov	r0, sp
   b8920:	f7ff ffd6 	bl	b88d0 <_Z17acquireWireBufferv>
   b8924:	466a      	mov	r2, sp
   b8926:	4621      	mov	r1, r4
   b8928:	4806      	ldr	r0, [pc, #24]	; (b8944 <_Z19__fetch_global_Wirev+0x40>)
   b892a:	f7fe fe67 	bl	b75fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b892e:	4628      	mov	r0, r5
   b8930:	f7fc f86f 	bl	b4a12 <__cxa_guard_release>
   b8934:	4804      	ldr	r0, [pc, #16]	; (b8948 <_Z19__fetch_global_Wirev+0x44>)
   b8936:	f001 f9e9 	bl	b9d0c <atexit>
	return wire;
}
   b893a:	4802      	ldr	r0, [pc, #8]	; (b8944 <_Z19__fetch_global_Wirev+0x40>)
   b893c:	b007      	add	sp, #28
   b893e:	bd30      	pop	{r4, r5, pc}
   b8940:	2003e72c 	.word	0x2003e72c
   b8944:	2003e730 	.word	0x2003e730
   b8948:	000b88cd 	.word	0x000b88cd

000b894c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b894c:	4770      	bx	lr
	...

000b8950 <_Z20acquireSerial1Bufferv>:
{
   b8950:	b538      	push	{r3, r4, r5, lr}
   b8952:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8954:	2514      	movs	r5, #20
   b8956:	462a      	mov	r2, r5
   b8958:	2100      	movs	r1, #0
   b895a:	f001 f9f3 	bl	b9d44 <memset>
   b895e:	8025      	strh	r5, [r4, #0]
   b8960:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8962:	4907      	ldr	r1, [pc, #28]	; (b8980 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8964:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8966:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8968:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b896a:	f000 f82f 	bl	b89cc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b896e:	4904      	ldr	r1, [pc, #16]	; (b8980 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8970:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8972:	4628      	mov	r0, r5
   b8974:	f000 f82a 	bl	b89cc <_ZnajRKSt9nothrow_t>
    };
   b8978:	60e0      	str	r0, [r4, #12]
}
   b897a:	4620      	mov	r0, r4
   b897c:	bd38      	pop	{r3, r4, r5, pc}
   b897e:	bf00      	nop
   b8980:	000bb238 	.word	0x000bb238

000b8984 <_Z22__fetch_global_Serial1v>:
{
   b8984:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8986:	4d0e      	ldr	r5, [pc, #56]	; (b89c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b8988:	7829      	ldrb	r1, [r5, #0]
   b898a:	f3bf 8f5b 	dmb	ish
   b898e:	f011 0401 	ands.w	r4, r1, #1
{
   b8992:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8994:	d111      	bne.n	b89ba <_Z22__fetch_global_Serial1v+0x36>
   b8996:	4628      	mov	r0, r5
   b8998:	f7fc f836 	bl	b4a08 <__cxa_guard_acquire>
   b899c:	b168      	cbz	r0, b89ba <_Z22__fetch_global_Serial1v+0x36>
   b899e:	a801      	add	r0, sp, #4
   b89a0:	f7ff ffd6 	bl	b8950 <_Z20acquireSerial1Bufferv>
   b89a4:	aa01      	add	r2, sp, #4
   b89a6:	4621      	mov	r1, r4
   b89a8:	4806      	ldr	r0, [pc, #24]	; (b89c4 <_Z22__fetch_global_Serial1v+0x40>)
   b89aa:	f7ff fd15 	bl	b83d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b89ae:	4628      	mov	r0, r5
   b89b0:	f7fc f82f 	bl	b4a12 <__cxa_guard_release>
   b89b4:	4804      	ldr	r0, [pc, #16]	; (b89c8 <_Z22__fetch_global_Serial1v+0x44>)
   b89b6:	f001 f9a9 	bl	b9d0c <atexit>
    return serial1;
}
   b89ba:	4802      	ldr	r0, [pc, #8]	; (b89c4 <_Z22__fetch_global_Serial1v+0x40>)
   b89bc:	b007      	add	sp, #28
   b89be:	bd30      	pop	{r4, r5, pc}
   b89c0:	2003e744 	.word	0x2003e744
   b89c4:	2003e748 	.word	0x2003e748
   b89c8:	000b894d 	.word	0x000b894d

000b89cc <_ZnajRKSt9nothrow_t>:
   b89cc:	f7fc b80b 	b.w	b49e6 <_Znaj>

000b89d0 <_ZSt20__throw_length_errorPKc>:
   b89d0:	b508      	push	{r3, lr}
   b89d2:	f7fe fd71 	bl	b74b8 <abort>

000b89d6 <_ZSt25__throw_bad_function_callv>:
   b89d6:	b508      	push	{r3, lr}
   b89d8:	f7fe fd6e 	bl	b74b8 <abort>

000b89dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b89dc:	4901      	ldr	r1, [pc, #4]	; (b89e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b89de:	f000 b8f9 	b.w	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b89e2:	bf00      	nop
   b89e4:	000bb254 	.word	0x000bb254

000b89e8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b89e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b89ea:	2400      	movs	r4, #0
   b89ec:	2310      	movs	r3, #16
   b89ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b89f2:	6803      	ldr	r3, [r0, #0]
   b89f4:	4615      	mov	r5, r2
   b89f6:	699e      	ldr	r6, [r3, #24]
   b89f8:	6812      	ldr	r2, [r2, #0]
   b89fa:	466b      	mov	r3, sp
   b89fc:	e9cd 4400 	strd	r4, r4, [sp]
   b8a00:	47b0      	blx	r6
   b8a02:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8a06:	f003 0306 	and.w	r3, r3, #6
   b8a0a:	2b06      	cmp	r3, #6
   b8a0c:	bf03      	ittte	eq
   b8a0e:	9b00      	ldreq	r3, [sp, #0]
   b8a10:	602b      	streq	r3, [r5, #0]
   b8a12:	2001      	moveq	r0, #1
   b8a14:	4620      	movne	r0, r4
   b8a16:	b004      	add	sp, #16
   b8a18:	bd70      	pop	{r4, r5, r6, pc}

000b8a1a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8a1a:	9800      	ldr	r0, [sp, #0]
   b8a1c:	4290      	cmp	r0, r2
   b8a1e:	bf14      	ite	ne
   b8a20:	2001      	movne	r0, #1
   b8a22:	2006      	moveq	r0, #6
   b8a24:	4770      	bx	lr
	...

000b8a28 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8a28:	b510      	push	{r4, lr}
   b8a2a:	4b03      	ldr	r3, [pc, #12]	; (b8a38 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8a2c:	6003      	str	r3, [r0, #0]
   b8a2e:	4604      	mov	r4, r0
   b8a30:	f000 f8cd 	bl	b8bce <_ZNSt9type_infoD1Ev>
   b8a34:	4620      	mov	r0, r4
   b8a36:	bd10      	pop	{r4, pc}
   b8a38:	000bb294 	.word	0x000bb294

000b8a3c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8a3c:	b510      	push	{r4, lr}
   b8a3e:	4604      	mov	r4, r0
   b8a40:	f7ff fff2 	bl	b8a28 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8a44:	4620      	mov	r0, r4
   b8a46:	2108      	movs	r1, #8
   b8a48:	f7fb ffcf 	bl	b49ea <_ZdlPvj>
   b8a4c:	4620      	mov	r0, r4
   b8a4e:	bd10      	pop	{r4, pc}

000b8a50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a54:	461f      	mov	r7, r3
   b8a56:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8a5a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8a5e:	4598      	cmp	r8, r3
   b8a60:	4606      	mov	r6, r0
   b8a62:	4615      	mov	r5, r2
   b8a64:	d107      	bne.n	b8a76 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8a66:	9907      	ldr	r1, [sp, #28]
   b8a68:	f000 f8b4 	bl	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b8a6c:	b118      	cbz	r0, b8a76 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8a6e:	7165      	strb	r5, [r4, #5]
   b8a70:	2000      	movs	r0, #0
   b8a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8a76:	4639      	mov	r1, r7
   b8a78:	4630      	mov	r0, r6
   b8a7a:	f000 f8ab 	bl	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b8a7e:	2800      	cmp	r0, #0
   b8a80:	d0f6      	beq.n	b8a70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8a82:	2301      	movs	r3, #1
   b8a84:	f8c4 8000 	str.w	r8, [r4]
   b8a88:	7125      	strb	r5, [r4, #4]
   b8a8a:	71a3      	strb	r3, [r4, #6]
   b8a8c:	e7f0      	b.n	b8a70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8a8e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8a8e:	b538      	push	{r3, r4, r5, lr}
   b8a90:	4615      	mov	r5, r2
   b8a92:	461c      	mov	r4, r3
   b8a94:	f000 f89e 	bl	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b8a98:	b120      	cbz	r0, b8aa4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8a9a:	2308      	movs	r3, #8
   b8a9c:	60e3      	str	r3, [r4, #12]
   b8a9e:	2306      	movs	r3, #6
   b8aa0:	6025      	str	r5, [r4, #0]
   b8aa2:	7123      	strb	r3, [r4, #4]
   b8aa4:	bd38      	pop	{r3, r4, r5, pc}

000b8aa6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8aa8:	4605      	mov	r5, r0
   b8aaa:	460c      	mov	r4, r1
   b8aac:	9201      	str	r2, [sp, #4]
   b8aae:	461e      	mov	r6, r3
   b8ab0:	f000 f890 	bl	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b8ab4:	b950      	cbnz	r0, b8acc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8ab6:	2e03      	cmp	r6, #3
   b8ab8:	d808      	bhi.n	b8acc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8aba:	6823      	ldr	r3, [r4, #0]
   b8abc:	9a01      	ldr	r2, [sp, #4]
   b8abe:	695b      	ldr	r3, [r3, #20]
   b8ac0:	4629      	mov	r1, r5
   b8ac2:	4620      	mov	r0, r4
   b8ac4:	b002      	add	sp, #8
   b8ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8aca:	4718      	bx	r3
   b8acc:	b002      	add	sp, #8
   b8ace:	bd70      	pop	{r4, r5, r6, pc}

000b8ad0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8ad0:	b510      	push	{r4, lr}
   b8ad2:	4b03      	ldr	r3, [pc, #12]	; (b8ae0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8ad4:	6003      	str	r3, [r0, #0]
   b8ad6:	4604      	mov	r4, r0
   b8ad8:	f7ff ffa6 	bl	b8a28 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8adc:	4620      	mov	r0, r4
   b8ade:	bd10      	pop	{r4, pc}
   b8ae0:	000bb2f4 	.word	0x000bb2f4

000b8ae4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8ae4:	b510      	push	{r4, lr}
   b8ae6:	4604      	mov	r4, r0
   b8ae8:	f7ff fff2 	bl	b8ad0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8aec:	4620      	mov	r0, r4
   b8aee:	210c      	movs	r1, #12
   b8af0:	f7fb ff7b 	bl	b49ea <_ZdlPvj>
   b8af4:	4620      	mov	r0, r4
   b8af6:	bd10      	pop	{r4, pc}

000b8af8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8afa:	9f08      	ldr	r7, [sp, #32]
   b8afc:	4297      	cmp	r7, r2
   b8afe:	4605      	mov	r5, r0
   b8b00:	460e      	mov	r6, r1
   b8b02:	4614      	mov	r4, r2
   b8b04:	d00a      	beq.n	b8b1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8b06:	68a8      	ldr	r0, [r5, #8]
   b8b08:	6802      	ldr	r2, [r0, #0]
   b8b0a:	9708      	str	r7, [sp, #32]
   b8b0c:	6a15      	ldr	r5, [r2, #32]
   b8b0e:	4631      	mov	r1, r6
   b8b10:	4622      	mov	r2, r4
   b8b12:	46ac      	mov	ip, r5
   b8b14:	b003      	add	sp, #12
   b8b16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8b1a:	4760      	bx	ip
   b8b1c:	4619      	mov	r1, r3
   b8b1e:	9301      	str	r3, [sp, #4]
   b8b20:	f000 f858 	bl	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b8b24:	9b01      	ldr	r3, [sp, #4]
   b8b26:	2800      	cmp	r0, #0
   b8b28:	d0ed      	beq.n	b8b06 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8b2a:	2006      	movs	r0, #6
   b8b2c:	b003      	add	sp, #12
   b8b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8b30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b34:	460d      	mov	r5, r1
   b8b36:	4619      	mov	r1, r3
   b8b38:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8b3c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8b40:	4681      	mov	r9, r0
   b8b42:	4617      	mov	r7, r2
   b8b44:	4698      	mov	r8, r3
   b8b46:	f000 f845 	bl	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b8b4a:	b190      	cbz	r0, b8b72 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8b4c:	2d00      	cmp	r5, #0
   b8b4e:	6034      	str	r4, [r6, #0]
   b8b50:	7137      	strb	r7, [r6, #4]
   b8b52:	db09      	blt.n	b8b68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8b54:	1961      	adds	r1, r4, r5
   b8b56:	458a      	cmp	sl, r1
   b8b58:	bf0c      	ite	eq
   b8b5a:	2106      	moveq	r1, #6
   b8b5c:	2101      	movne	r1, #1
   b8b5e:	71b1      	strb	r1, [r6, #6]
   b8b60:	2000      	movs	r0, #0
   b8b62:	b001      	add	sp, #4
   b8b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8b68:	3502      	adds	r5, #2
   b8b6a:	d1f9      	bne.n	b8b60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8b6c:	2301      	movs	r3, #1
   b8b6e:	71b3      	strb	r3, [r6, #6]
   b8b70:	e7f6      	b.n	b8b60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8b72:	4554      	cmp	r4, sl
   b8b74:	d106      	bne.n	b8b84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8b76:	4659      	mov	r1, fp
   b8b78:	4648      	mov	r0, r9
   b8b7a:	f000 f82b 	bl	b8bd4 <_ZNKSt9type_infoeqERKS_>
   b8b7e:	b108      	cbz	r0, b8b84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8b80:	7177      	strb	r7, [r6, #5]
   b8b82:	e7ed      	b.n	b8b60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8b84:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8b88:	6803      	ldr	r3, [r0, #0]
   b8b8a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8b8e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8b92:	69dc      	ldr	r4, [r3, #28]
   b8b94:	463a      	mov	r2, r7
   b8b96:	4643      	mov	r3, r8
   b8b98:	4629      	mov	r1, r5
   b8b9a:	46a4      	mov	ip, r4
   b8b9c:	b001      	add	sp, #4
   b8b9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ba2:	4760      	bx	ip

000b8ba4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ba8:	4607      	mov	r7, r0
   b8baa:	460c      	mov	r4, r1
   b8bac:	4615      	mov	r5, r2
   b8bae:	461e      	mov	r6, r3
   b8bb0:	f7ff ff6d 	bl	b8a8e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8bb4:	b948      	cbnz	r0, b8bca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8bb6:	68b8      	ldr	r0, [r7, #8]
   b8bb8:	6803      	ldr	r3, [r0, #0]
   b8bba:	699f      	ldr	r7, [r3, #24]
   b8bbc:	462a      	mov	r2, r5
   b8bbe:	4633      	mov	r3, r6
   b8bc0:	4621      	mov	r1, r4
   b8bc2:	46bc      	mov	ip, r7
   b8bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8bc8:	4760      	bx	ip
   b8bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8bce <_ZNSt9type_infoD1Ev>:
   b8bce:	4770      	bx	lr

000b8bd0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8bd0:	2000      	movs	r0, #0
   b8bd2:	4770      	bx	lr

000b8bd4 <_ZNKSt9type_infoeqERKS_>:
   b8bd4:	4281      	cmp	r1, r0
   b8bd6:	b508      	push	{r3, lr}
   b8bd8:	d00e      	beq.n	b8bf8 <_ZNKSt9type_infoeqERKS_+0x24>
   b8bda:	6840      	ldr	r0, [r0, #4]
   b8bdc:	7803      	ldrb	r3, [r0, #0]
   b8bde:	2b2a      	cmp	r3, #42	; 0x2a
   b8be0:	d00c      	beq.n	b8bfc <_ZNKSt9type_infoeqERKS_+0x28>
   b8be2:	6849      	ldr	r1, [r1, #4]
   b8be4:	780b      	ldrb	r3, [r1, #0]
   b8be6:	2b2a      	cmp	r3, #42	; 0x2a
   b8be8:	bf08      	it	eq
   b8bea:	3101      	addeq	r1, #1
   b8bec:	f7fb feac 	bl	b4948 <strcmp>
   b8bf0:	fab0 f080 	clz	r0, r0
   b8bf4:	0940      	lsrs	r0, r0, #5
   b8bf6:	bd08      	pop	{r3, pc}
   b8bf8:	2001      	movs	r0, #1
   b8bfa:	e7fc      	b.n	b8bf6 <_ZNKSt9type_infoeqERKS_+0x22>
   b8bfc:	2000      	movs	r0, #0
   b8bfe:	e7fa      	b.n	b8bf6 <_ZNKSt9type_infoeqERKS_+0x22>

000b8c00 <pow>:
   b8c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c02:	ed2d 8b02 	vpush	{d8}
   b8c06:	ec57 6b10 	vmov	r6, r7, d0
   b8c0a:	ec55 4b11 	vmov	r4, r5, d1
   b8c0e:	f000 f8cb 	bl	b8da8 <__ieee754_pow>
   b8c12:	4b63      	ldr	r3, [pc, #396]	; (b8da0 <pow+0x1a0>)
   b8c14:	eeb0 8a40 	vmov.f32	s16, s0
   b8c18:	eef0 8a60 	vmov.f32	s17, s1
   b8c1c:	f993 3000 	ldrsb.w	r3, [r3]
   b8c20:	3301      	adds	r3, #1
   b8c22:	d02a      	beq.n	b8c7a <pow+0x7a>
   b8c24:	4622      	mov	r2, r4
   b8c26:	462b      	mov	r3, r5
   b8c28:	4620      	mov	r0, r4
   b8c2a:	4629      	mov	r1, r5
   b8c2c:	f7fb fe4e 	bl	b48cc <__aeabi_dcmpun>
   b8c30:	bb18      	cbnz	r0, b8c7a <pow+0x7a>
   b8c32:	4632      	mov	r2, r6
   b8c34:	463b      	mov	r3, r7
   b8c36:	4630      	mov	r0, r6
   b8c38:	4639      	mov	r1, r7
   b8c3a:	f7fb fe47 	bl	b48cc <__aeabi_dcmpun>
   b8c3e:	2800      	cmp	r0, #0
   b8c40:	d144      	bne.n	b8ccc <pow+0xcc>
   b8c42:	2200      	movs	r2, #0
   b8c44:	2300      	movs	r3, #0
   b8c46:	4630      	mov	r0, r6
   b8c48:	4639      	mov	r1, r7
   b8c4a:	f7fb fe0d 	bl	b4868 <__aeabi_dcmpeq>
   b8c4e:	b1d8      	cbz	r0, b8c88 <pow+0x88>
   b8c50:	2200      	movs	r2, #0
   b8c52:	2300      	movs	r3, #0
   b8c54:	4620      	mov	r0, r4
   b8c56:	4629      	mov	r1, r5
   b8c58:	f7fb fe06 	bl	b4868 <__aeabi_dcmpeq>
   b8c5c:	2800      	cmp	r0, #0
   b8c5e:	d13d      	bne.n	b8cdc <pow+0xdc>
   b8c60:	ec45 4b10 	vmov	d0, r4, r5
   b8c64:	f000 ff10 	bl	b9a88 <finite>
   b8c68:	b138      	cbz	r0, b8c7a <pow+0x7a>
   b8c6a:	4620      	mov	r0, r4
   b8c6c:	4629      	mov	r1, r5
   b8c6e:	2200      	movs	r2, #0
   b8c70:	2300      	movs	r3, #0
   b8c72:	f7fb fe03 	bl	b487c <__aeabi_dcmplt>
   b8c76:	2800      	cmp	r0, #0
   b8c78:	d15c      	bne.n	b8d34 <pow+0x134>
   b8c7a:	eeb0 0a48 	vmov.f32	s0, s16
   b8c7e:	eef0 0a68 	vmov.f32	s1, s17
   b8c82:	ecbd 8b02 	vpop	{d8}
   b8c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8c88:	eeb0 0a48 	vmov.f32	s0, s16
   b8c8c:	eef0 0a68 	vmov.f32	s1, s17
   b8c90:	f000 fefa 	bl	b9a88 <finite>
   b8c94:	b358      	cbz	r0, b8cee <pow+0xee>
   b8c96:	ec51 0b18 	vmov	r0, r1, d8
   b8c9a:	2200      	movs	r2, #0
   b8c9c:	2300      	movs	r3, #0
   b8c9e:	f7fb fde3 	bl	b4868 <__aeabi_dcmpeq>
   b8ca2:	2800      	cmp	r0, #0
   b8ca4:	d0e9      	beq.n	b8c7a <pow+0x7a>
   b8ca6:	ec47 6b10 	vmov	d0, r6, r7
   b8caa:	f000 feed 	bl	b9a88 <finite>
   b8cae:	2800      	cmp	r0, #0
   b8cb0:	d0e3      	beq.n	b8c7a <pow+0x7a>
   b8cb2:	ec45 4b10 	vmov	d0, r4, r5
   b8cb6:	f000 fee7 	bl	b9a88 <finite>
   b8cba:	2800      	cmp	r0, #0
   b8cbc:	d0dd      	beq.n	b8c7a <pow+0x7a>
   b8cbe:	f7fe fc03 	bl	b74c8 <__errno>
   b8cc2:	2322      	movs	r3, #34	; 0x22
   b8cc4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b8d80 <pow+0x180>
   b8cc8:	6003      	str	r3, [r0, #0]
   b8cca:	e7d6      	b.n	b8c7a <pow+0x7a>
   b8ccc:	4620      	mov	r0, r4
   b8cce:	4629      	mov	r1, r5
   b8cd0:	2200      	movs	r2, #0
   b8cd2:	2300      	movs	r3, #0
   b8cd4:	f7fb fdc8 	bl	b4868 <__aeabi_dcmpeq>
   b8cd8:	2800      	cmp	r0, #0
   b8cda:	d0ce      	beq.n	b8c7a <pow+0x7a>
   b8cdc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b8d88 <pow+0x188>
   b8ce0:	eeb0 0a48 	vmov.f32	s0, s16
   b8ce4:	eef0 0a68 	vmov.f32	s1, s17
   b8ce8:	ecbd 8b02 	vpop	{d8}
   b8cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8cee:	ec47 6b10 	vmov	d0, r6, r7
   b8cf2:	f000 fec9 	bl	b9a88 <finite>
   b8cf6:	2800      	cmp	r0, #0
   b8cf8:	d0cd      	beq.n	b8c96 <pow+0x96>
   b8cfa:	ec45 4b10 	vmov	d0, r4, r5
   b8cfe:	f000 fec3 	bl	b9a88 <finite>
   b8d02:	2800      	cmp	r0, #0
   b8d04:	d0c7      	beq.n	b8c96 <pow+0x96>
   b8d06:	ec53 2b18 	vmov	r2, r3, d8
   b8d0a:	ee18 0a10 	vmov	r0, s16
   b8d0e:	4619      	mov	r1, r3
   b8d10:	f7fb fddc 	bl	b48cc <__aeabi_dcmpun>
   b8d14:	bb20      	cbnz	r0, b8d60 <pow+0x160>
   b8d16:	f7fe fbd7 	bl	b74c8 <__errno>
   b8d1a:	4603      	mov	r3, r0
   b8d1c:	2222      	movs	r2, #34	; 0x22
   b8d1e:	601a      	str	r2, [r3, #0]
   b8d20:	4630      	mov	r0, r6
   b8d22:	4639      	mov	r1, r7
   b8d24:	2200      	movs	r2, #0
   b8d26:	2300      	movs	r3, #0
   b8d28:	f7fb fda8 	bl	b487c <__aeabi_dcmplt>
   b8d2c:	b948      	cbnz	r0, b8d42 <pow+0x142>
   b8d2e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b8d90 <pow+0x190>
   b8d32:	e7a2      	b.n	b8c7a <pow+0x7a>
   b8d34:	f7fe fbc8 	bl	b74c8 <__errno>
   b8d38:	2321      	movs	r3, #33	; 0x21
   b8d3a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b8d98 <pow+0x198>
   b8d3e:	6003      	str	r3, [r0, #0]
   b8d40:	e79b      	b.n	b8c7a <pow+0x7a>
   b8d42:	ec45 4b10 	vmov	d0, r4, r5
   b8d46:	f000 feb3 	bl	b9ab0 <rint>
   b8d4a:	4622      	mov	r2, r4
   b8d4c:	ec51 0b10 	vmov	r0, r1, d0
   b8d50:	462b      	mov	r3, r5
   b8d52:	f7fb fd89 	bl	b4868 <__aeabi_dcmpeq>
   b8d56:	2800      	cmp	r0, #0
   b8d58:	d1e9      	bne.n	b8d2e <pow+0x12e>
   b8d5a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b8d98 <pow+0x198>
   b8d5e:	e78c      	b.n	b8c7a <pow+0x7a>
   b8d60:	f7fe fbb2 	bl	b74c8 <__errno>
   b8d64:	2200      	movs	r2, #0
   b8d66:	2300      	movs	r3, #0
   b8d68:	2121      	movs	r1, #33	; 0x21
   b8d6a:	6001      	str	r1, [r0, #0]
   b8d6c:	4610      	mov	r0, r2
   b8d6e:	4619      	mov	r1, r3
   b8d70:	f7fb fc3c 	bl	b45ec <__aeabi_ddiv>
   b8d74:	ec41 0b18 	vmov	d8, r0, r1
   b8d78:	e77f      	b.n	b8c7a <pow+0x7a>
   b8d7a:	bf00      	nop
   b8d7c:	f3af 8000 	nop.w
	...
   b8d8c:	3ff00000 	.word	0x3ff00000
   b8d90:	00000000 	.word	0x00000000
   b8d94:	7ff00000 	.word	0x7ff00000
   b8d98:	00000000 	.word	0x00000000
   b8d9c:	fff00000 	.word	0xfff00000
   b8da0:	2003e54c 	.word	0x2003e54c
   b8da4:	00000000 	.word	0x00000000

000b8da8 <__ieee754_pow>:
   b8da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8dac:	ec57 6b11 	vmov	r6, r7, d1
   b8db0:	ed2d 8b0c 	vpush	{d8-d13}
   b8db4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b8db8:	ea5a 0206 	orrs.w	r2, sl, r6
   b8dbc:	b087      	sub	sp, #28
   b8dbe:	d03d      	beq.n	b8e3c <__ieee754_pow+0x94>
   b8dc0:	ec55 4b10 	vmov	r4, r5, d0
   b8dc4:	4972      	ldr	r1, [pc, #456]	; (b8f90 <__ieee754_pow+0x1e8>)
   b8dc6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b8dca:	4588      	cmp	r8, r1
   b8dcc:	ee10 2a10 	vmov	r2, s0
   b8dd0:	46a9      	mov	r9, r5
   b8dd2:	dc2c      	bgt.n	b8e2e <__ieee754_pow+0x86>
   b8dd4:	ee11 3a10 	vmov	r3, s2
   b8dd8:	46bb      	mov	fp, r7
   b8dda:	d036      	beq.n	b8e4a <__ieee754_pow+0xa2>
   b8ddc:	458a      	cmp	sl, r1
   b8dde:	dc26      	bgt.n	b8e2e <__ieee754_pow+0x86>
   b8de0:	496b      	ldr	r1, [pc, #428]	; (b8f90 <__ieee754_pow+0x1e8>)
   b8de2:	458a      	cmp	sl, r1
   b8de4:	d021      	beq.n	b8e2a <__ieee754_pow+0x82>
   b8de6:	f1b9 0f00 	cmp.w	r9, #0
   b8dea:	db39      	blt.n	b8e60 <__ieee754_pow+0xb8>
   b8dec:	2100      	movs	r1, #0
   b8dee:	9100      	str	r1, [sp, #0]
   b8df0:	2b00      	cmp	r3, #0
   b8df2:	d151      	bne.n	b8e98 <__ieee754_pow+0xf0>
   b8df4:	4b66      	ldr	r3, [pc, #408]	; (b8f90 <__ieee754_pow+0x1e8>)
   b8df6:	459a      	cmp	sl, r3
   b8df8:	f000 80a2 	beq.w	b8f40 <__ieee754_pow+0x198>
   b8dfc:	4b65      	ldr	r3, [pc, #404]	; (b8f94 <__ieee754_pow+0x1ec>)
   b8dfe:	459a      	cmp	sl, r3
   b8e00:	f000 80b0 	beq.w	b8f64 <__ieee754_pow+0x1bc>
   b8e04:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b8e08:	f000 84c0 	beq.w	b978c <__ieee754_pow+0x9e4>
   b8e0c:	4b62      	ldr	r3, [pc, #392]	; (b8f98 <__ieee754_pow+0x1f0>)
   b8e0e:	459b      	cmp	fp, r3
   b8e10:	d142      	bne.n	b8e98 <__ieee754_pow+0xf0>
   b8e12:	f1b9 0f00 	cmp.w	r9, #0
   b8e16:	db3f      	blt.n	b8e98 <__ieee754_pow+0xf0>
   b8e18:	ec45 4b10 	vmov	d0, r4, r5
   b8e1c:	b007      	add	sp, #28
   b8e1e:	ecbd 8b0c 	vpop	{d8-d13}
   b8e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e26:	f000 bd59 	b.w	b98dc <__ieee754_sqrt>
   b8e2a:	2b00      	cmp	r3, #0
   b8e2c:	d0db      	beq.n	b8de6 <__ieee754_pow+0x3e>
   b8e2e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b8e32:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b8e36:	ea58 0302 	orrs.w	r3, r8, r2
   b8e3a:	d109      	bne.n	b8e50 <__ieee754_pow+0xa8>
   b8e3c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b8f80 <__ieee754_pow+0x1d8>
   b8e40:	b007      	add	sp, #28
   b8e42:	ecbd 8b0c 	vpop	{d8-d13}
   b8e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8e4a:	b90c      	cbnz	r4, b8e50 <__ieee754_pow+0xa8>
   b8e4c:	45c2      	cmp	sl, r8
   b8e4e:	ddc7      	ble.n	b8de0 <__ieee754_pow+0x38>
   b8e50:	4852      	ldr	r0, [pc, #328]	; (b8f9c <__ieee754_pow+0x1f4>)
   b8e52:	b007      	add	sp, #28
   b8e54:	ecbd 8b0c 	vpop	{d8-d13}
   b8e58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e5c:	f000 be20 	b.w	b9aa0 <nan>
   b8e60:	494f      	ldr	r1, [pc, #316]	; (b8fa0 <__ieee754_pow+0x1f8>)
   b8e62:	458a      	cmp	sl, r1
   b8e64:	f300 8085 	bgt.w	b8f72 <__ieee754_pow+0x1ca>
   b8e68:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b8e6c:	458a      	cmp	sl, r1
   b8e6e:	dd0f      	ble.n	b8e90 <__ieee754_pow+0xe8>
   b8e70:	ea4f 512a 	mov.w	r1, sl, asr #20
   b8e74:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b8e78:	2914      	cmp	r1, #20
   b8e7a:	f340 849b 	ble.w	b97b4 <__ieee754_pow+0xa0c>
   b8e7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b8e82:	fa23 f001 	lsr.w	r0, r3, r1
   b8e86:	fa00 f101 	lsl.w	r1, r0, r1
   b8e8a:	4299      	cmp	r1, r3
   b8e8c:	f000 84ed 	beq.w	b986a <__ieee754_pow+0xac2>
   b8e90:	2100      	movs	r1, #0
   b8e92:	9100      	str	r1, [sp, #0]
   b8e94:	2b00      	cmp	r3, #0
   b8e96:	d0b1      	beq.n	b8dfc <__ieee754_pow+0x54>
   b8e98:	ec45 4b10 	vmov	d0, r4, r5
   b8e9c:	9202      	str	r2, [sp, #8]
   b8e9e:	f000 fde9 	bl	b9a74 <fabs>
   b8ea2:	9a02      	ldr	r2, [sp, #8]
   b8ea4:	bb5a      	cbnz	r2, b8efe <__ieee754_pow+0x156>
   b8ea6:	f1b8 0f00 	cmp.w	r8, #0
   b8eaa:	d004      	beq.n	b8eb6 <__ieee754_pow+0x10e>
   b8eac:	4b39      	ldr	r3, [pc, #228]	; (b8f94 <__ieee754_pow+0x1ec>)
   b8eae:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b8eb2:	429a      	cmp	r2, r3
   b8eb4:	d123      	bne.n	b8efe <__ieee754_pow+0x156>
   b8eb6:	f1bb 0f00 	cmp.w	fp, #0
   b8eba:	da07      	bge.n	b8ecc <__ieee754_pow+0x124>
   b8ebc:	ec53 2b10 	vmov	r2, r3, d0
   b8ec0:	4934      	ldr	r1, [pc, #208]	; (b8f94 <__ieee754_pow+0x1ec>)
   b8ec2:	2000      	movs	r0, #0
   b8ec4:	f7fb fb92 	bl	b45ec <__aeabi_ddiv>
   b8ec8:	ec41 0b10 	vmov	d0, r0, r1
   b8ecc:	f1b9 0f00 	cmp.w	r9, #0
   b8ed0:	dab6      	bge.n	b8e40 <__ieee754_pow+0x98>
   b8ed2:	9b00      	ldr	r3, [sp, #0]
   b8ed4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b8ed8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b8edc:	ea58 0303 	orrs.w	r3, r8, r3
   b8ee0:	f040 848d 	bne.w	b97fe <__ieee754_pow+0xa56>
   b8ee4:	ec53 2b10 	vmov	r2, r3, d0
   b8ee8:	4610      	mov	r0, r2
   b8eea:	4619      	mov	r1, r3
   b8eec:	f7fb f89c 	bl	b4028 <__aeabi_dsub>
   b8ef0:	4602      	mov	r2, r0
   b8ef2:	460b      	mov	r3, r1
   b8ef4:	f7fb fb7a 	bl	b45ec <__aeabi_ddiv>
   b8ef8:	ec41 0b10 	vmov	d0, r0, r1
   b8efc:	e7a0      	b.n	b8e40 <__ieee754_pow+0x98>
   b8efe:	9a00      	ldr	r2, [sp, #0]
   b8f00:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b8f04:	3b01      	subs	r3, #1
   b8f06:	9304      	str	r3, [sp, #16]
   b8f08:	4313      	orrs	r3, r2
   b8f0a:	d035      	beq.n	b8f78 <__ieee754_pow+0x1d0>
   b8f0c:	4b25      	ldr	r3, [pc, #148]	; (b8fa4 <__ieee754_pow+0x1fc>)
   b8f0e:	459a      	cmp	sl, r3
   b8f10:	dd4c      	ble.n	b8fac <__ieee754_pow+0x204>
   b8f12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b8f16:	459a      	cmp	sl, r3
   b8f18:	4b23      	ldr	r3, [pc, #140]	; (b8fa8 <__ieee754_pow+0x200>)
   b8f1a:	f340 83db 	ble.w	b96d4 <__ieee754_pow+0x92c>
   b8f1e:	4598      	cmp	r8, r3
   b8f20:	f340 8360 	ble.w	b95e4 <__ieee754_pow+0x83c>
   b8f24:	f1bb 0f00 	cmp.w	fp, #0
   b8f28:	f340 8360 	ble.w	b95ec <__ieee754_pow+0x844>
   b8f2c:	a316      	add	r3, pc, #88	; (adr r3, b8f88 <__ieee754_pow+0x1e0>)
   b8f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f32:	4610      	mov	r0, r2
   b8f34:	4619      	mov	r1, r3
   b8f36:	f7fb fa2f 	bl	b4398 <__aeabi_dmul>
   b8f3a:	ec41 0b10 	vmov	d0, r0, r1
   b8f3e:	e77f      	b.n	b8e40 <__ieee754_pow+0x98>
   b8f40:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b8f44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b8f48:	4313      	orrs	r3, r2
   b8f4a:	f43f af77 	beq.w	b8e3c <__ieee754_pow+0x94>
   b8f4e:	4b16      	ldr	r3, [pc, #88]	; (b8fa8 <__ieee754_pow+0x200>)
   b8f50:	4598      	cmp	r8, r3
   b8f52:	f340 837a 	ble.w	b964a <__ieee754_pow+0x8a2>
   b8f56:	f1bb 0f00 	cmp.w	fp, #0
   b8f5a:	f2c0 8347 	blt.w	b95ec <__ieee754_pow+0x844>
   b8f5e:	ec47 6b10 	vmov	d0, r6, r7
   b8f62:	e76d      	b.n	b8e40 <__ieee754_pow+0x98>
   b8f64:	f1bb 0f00 	cmp.w	fp, #0
   b8f68:	f2c0 841a 	blt.w	b97a0 <__ieee754_pow+0x9f8>
   b8f6c:	ec45 4b10 	vmov	d0, r4, r5
   b8f70:	e766      	b.n	b8e40 <__ieee754_pow+0x98>
   b8f72:	2102      	movs	r1, #2
   b8f74:	9100      	str	r1, [sp, #0]
   b8f76:	e73b      	b.n	b8df0 <__ieee754_pow+0x48>
   b8f78:	4622      	mov	r2, r4
   b8f7a:	462b      	mov	r3, r5
   b8f7c:	e7b4      	b.n	b8ee8 <__ieee754_pow+0x140>
   b8f7e:	bf00      	nop
   b8f80:	00000000 	.word	0x00000000
   b8f84:	3ff00000 	.word	0x3ff00000
   b8f88:	8800759c 	.word	0x8800759c
   b8f8c:	7e37e43c 	.word	0x7e37e43c
   b8f90:	7ff00000 	.word	0x7ff00000
   b8f94:	3ff00000 	.word	0x3ff00000
   b8f98:	3fe00000 	.word	0x3fe00000
   b8f9c:	000bb330 	.word	0x000bb330
   b8fa0:	433fffff 	.word	0x433fffff
   b8fa4:	41e00000 	.word	0x41e00000
   b8fa8:	3fefffff 	.word	0x3fefffff
   b8fac:	4be4      	ldr	r3, [pc, #912]	; (b9340 <__ieee754_pow+0x598>)
   b8fae:	ea09 0303 	and.w	r3, r9, r3
   b8fb2:	2200      	movs	r2, #0
   b8fb4:	b953      	cbnz	r3, b8fcc <__ieee754_pow+0x224>
   b8fb6:	ec51 0b10 	vmov	r0, r1, d0
   b8fba:	4be2      	ldr	r3, [pc, #904]	; (b9344 <__ieee754_pow+0x59c>)
   b8fbc:	f7fb f9ec 	bl	b4398 <__aeabi_dmul>
   b8fc0:	ec41 0b10 	vmov	d0, r0, r1
   b8fc4:	ee10 8a90 	vmov	r8, s1
   b8fc8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b8fcc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b8fd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b8fd4:	189a      	adds	r2, r3, r2
   b8fd6:	4bdc      	ldr	r3, [pc, #880]	; (b9348 <__ieee754_pow+0x5a0>)
   b8fd8:	9205      	str	r2, [sp, #20]
   b8fda:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b8fde:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b8fe2:	4598      	cmp	r8, r3
   b8fe4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b8fe8:	dd07      	ble.n	b8ffa <__ieee754_pow+0x252>
   b8fea:	4bd8      	ldr	r3, [pc, #864]	; (b934c <__ieee754_pow+0x5a4>)
   b8fec:	4598      	cmp	r8, r3
   b8fee:	f340 8414 	ble.w	b981a <__ieee754_pow+0xa72>
   b8ff2:	3201      	adds	r2, #1
   b8ff4:	9205      	str	r2, [sp, #20]
   b8ff6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b8ffa:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b92e0 <__ieee754_pow+0x538>
   b8ffe:	ed9f 7bba 	vldr	d7, [pc, #744]	; b92e8 <__ieee754_pow+0x540>
   b9002:	ec53 2b16 	vmov	r2, r3, d6
   b9006:	eeb0 ca47 	vmov.f32	s24, s14
   b900a:	eef0 ca67 	vmov.f32	s25, s15
   b900e:	2500      	movs	r5, #0
   b9010:	eeb0 da47 	vmov.f32	s26, s14
   b9014:	eef0 da67 	vmov.f32	s27, s15
   b9018:	ec5b ab10 	vmov	sl, fp, d0
   b901c:	46a3      	mov	fp, r4
   b901e:	4650      	mov	r0, sl
   b9020:	4659      	mov	r1, fp
   b9022:	ec43 2b1a 	vmov	d10, r2, r3
   b9026:	f7fa ffff 	bl	b4028 <__aeabi_dsub>
   b902a:	ec53 2b1a 	vmov	r2, r3, d10
   b902e:	4680      	mov	r8, r0
   b9030:	4689      	mov	r9, r1
   b9032:	4650      	mov	r0, sl
   b9034:	4659      	mov	r1, fp
   b9036:	f7fa fff9 	bl	b402c <__adddf3>
   b903a:	4602      	mov	r2, r0
   b903c:	460b      	mov	r3, r1
   b903e:	2000      	movs	r0, #0
   b9040:	49c3      	ldr	r1, [pc, #780]	; (b9350 <__ieee754_pow+0x5a8>)
   b9042:	f7fb fad3 	bl	b45ec <__aeabi_ddiv>
   b9046:	ec41 0b1b 	vmov	d11, r0, r1
   b904a:	4640      	mov	r0, r8
   b904c:	ec53 2b1b 	vmov	r2, r3, d11
   b9050:	4649      	mov	r1, r9
   b9052:	f7fb f9a1 	bl	b4398 <__aeabi_dmul>
   b9056:	ec41 0b18 	vmov	d8, r0, r1
   b905a:	460a      	mov	r2, r1
   b905c:	4601      	mov	r1, r0
   b905e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b9062:	2100      	movs	r1, #0
   b9064:	9102      	str	r1, [sp, #8]
   b9066:	1064      	asrs	r4, r4, #1
   b9068:	ec4b ab19 	vmov	d9, sl, fp
   b906c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b9070:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b9074:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b9078:	2000      	movs	r0, #0
   b907a:	1959      	adds	r1, r3, r5
   b907c:	4604      	mov	r4, r0
   b907e:	460d      	mov	r5, r1
   b9080:	4602      	mov	r2, r0
   b9082:	460b      	mov	r3, r1
   b9084:	4650      	mov	r0, sl
   b9086:	4659      	mov	r1, fp
   b9088:	f7fb f986 	bl	b4398 <__aeabi_dmul>
   b908c:	4602      	mov	r2, r0
   b908e:	460b      	mov	r3, r1
   b9090:	4640      	mov	r0, r8
   b9092:	4649      	mov	r1, r9
   b9094:	f7fa ffc8 	bl	b4028 <__aeabi_dsub>
   b9098:	ec53 2b1a 	vmov	r2, r3, d10
   b909c:	4680      	mov	r8, r0
   b909e:	4689      	mov	r9, r1
   b90a0:	4620      	mov	r0, r4
   b90a2:	4629      	mov	r1, r5
   b90a4:	f7fa ffc0 	bl	b4028 <__aeabi_dsub>
   b90a8:	4602      	mov	r2, r0
   b90aa:	460b      	mov	r3, r1
   b90ac:	ec51 0b19 	vmov	r0, r1, d9
   b90b0:	f7fa ffba 	bl	b4028 <__aeabi_dsub>
   b90b4:	4652      	mov	r2, sl
   b90b6:	465b      	mov	r3, fp
   b90b8:	f7fb f96e 	bl	b4398 <__aeabi_dmul>
   b90bc:	4602      	mov	r2, r0
   b90be:	460b      	mov	r3, r1
   b90c0:	4640      	mov	r0, r8
   b90c2:	4649      	mov	r1, r9
   b90c4:	f7fa ffb0 	bl	b4028 <__aeabi_dsub>
   b90c8:	ec53 2b1b 	vmov	r2, r3, d11
   b90cc:	f7fb f964 	bl	b4398 <__aeabi_dmul>
   b90d0:	ec53 2b18 	vmov	r2, r3, d8
   b90d4:	ec41 0b19 	vmov	d9, r0, r1
   b90d8:	ec51 0b18 	vmov	r0, r1, d8
   b90dc:	f7fb f95c 	bl	b4398 <__aeabi_dmul>
   b90e0:	a383      	add	r3, pc, #524	; (adr r3, b92f0 <__ieee754_pow+0x548>)
   b90e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90e6:	4604      	mov	r4, r0
   b90e8:	460d      	mov	r5, r1
   b90ea:	f7fb f955 	bl	b4398 <__aeabi_dmul>
   b90ee:	a382      	add	r3, pc, #520	; (adr r3, b92f8 <__ieee754_pow+0x550>)
   b90f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90f4:	f7fa ff9a 	bl	b402c <__adddf3>
   b90f8:	4622      	mov	r2, r4
   b90fa:	462b      	mov	r3, r5
   b90fc:	f7fb f94c 	bl	b4398 <__aeabi_dmul>
   b9100:	a37f      	add	r3, pc, #508	; (adr r3, b9300 <__ieee754_pow+0x558>)
   b9102:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9106:	f7fa ff91 	bl	b402c <__adddf3>
   b910a:	4622      	mov	r2, r4
   b910c:	462b      	mov	r3, r5
   b910e:	f7fb f943 	bl	b4398 <__aeabi_dmul>
   b9112:	a37d      	add	r3, pc, #500	; (adr r3, b9308 <__ieee754_pow+0x560>)
   b9114:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9118:	f7fa ff88 	bl	b402c <__adddf3>
   b911c:	4622      	mov	r2, r4
   b911e:	462b      	mov	r3, r5
   b9120:	f7fb f93a 	bl	b4398 <__aeabi_dmul>
   b9124:	a37a      	add	r3, pc, #488	; (adr r3, b9310 <__ieee754_pow+0x568>)
   b9126:	e9d3 2300 	ldrd	r2, r3, [r3]
   b912a:	f7fa ff7f 	bl	b402c <__adddf3>
   b912e:	4622      	mov	r2, r4
   b9130:	462b      	mov	r3, r5
   b9132:	f7fb f931 	bl	b4398 <__aeabi_dmul>
   b9136:	a378      	add	r3, pc, #480	; (adr r3, b9318 <__ieee754_pow+0x570>)
   b9138:	e9d3 2300 	ldrd	r2, r3, [r3]
   b913c:	f7fa ff76 	bl	b402c <__adddf3>
   b9140:	4622      	mov	r2, r4
   b9142:	4680      	mov	r8, r0
   b9144:	4689      	mov	r9, r1
   b9146:	462b      	mov	r3, r5
   b9148:	4620      	mov	r0, r4
   b914a:	4629      	mov	r1, r5
   b914c:	f7fb f924 	bl	b4398 <__aeabi_dmul>
   b9150:	4602      	mov	r2, r0
   b9152:	460b      	mov	r3, r1
   b9154:	4640      	mov	r0, r8
   b9156:	4649      	mov	r1, r9
   b9158:	f7fb f91e 	bl	b4398 <__aeabi_dmul>
   b915c:	4652      	mov	r2, sl
   b915e:	4604      	mov	r4, r0
   b9160:	460d      	mov	r5, r1
   b9162:	465b      	mov	r3, fp
   b9164:	ec51 0b18 	vmov	r0, r1, d8
   b9168:	f7fa ff60 	bl	b402c <__adddf3>
   b916c:	ec53 2b19 	vmov	r2, r3, d9
   b9170:	f7fb f912 	bl	b4398 <__aeabi_dmul>
   b9174:	4622      	mov	r2, r4
   b9176:	462b      	mov	r3, r5
   b9178:	f7fa ff58 	bl	b402c <__adddf3>
   b917c:	4652      	mov	r2, sl
   b917e:	4680      	mov	r8, r0
   b9180:	4689      	mov	r9, r1
   b9182:	465b      	mov	r3, fp
   b9184:	4650      	mov	r0, sl
   b9186:	4659      	mov	r1, fp
   b9188:	f7fb f906 	bl	b4398 <__aeabi_dmul>
   b918c:	4602      	mov	r2, r0
   b918e:	460b      	mov	r3, r1
   b9190:	ec43 2b1a 	vmov	d10, r2, r3
   b9194:	4b6f      	ldr	r3, [pc, #444]	; (b9354 <__ieee754_pow+0x5ac>)
   b9196:	2200      	movs	r2, #0
   b9198:	f7fa ff48 	bl	b402c <__adddf3>
   b919c:	4642      	mov	r2, r8
   b919e:	464b      	mov	r3, r9
   b91a0:	f7fa ff44 	bl	b402c <__adddf3>
   b91a4:	2400      	movs	r4, #0
   b91a6:	460d      	mov	r5, r1
   b91a8:	4622      	mov	r2, r4
   b91aa:	462b      	mov	r3, r5
   b91ac:	4650      	mov	r0, sl
   b91ae:	4659      	mov	r1, fp
   b91b0:	f7fb f8f2 	bl	b4398 <__aeabi_dmul>
   b91b4:	4b67      	ldr	r3, [pc, #412]	; (b9354 <__ieee754_pow+0x5ac>)
   b91b6:	4682      	mov	sl, r0
   b91b8:	468b      	mov	fp, r1
   b91ba:	2200      	movs	r2, #0
   b91bc:	4620      	mov	r0, r4
   b91be:	4629      	mov	r1, r5
   b91c0:	f7fa ff32 	bl	b4028 <__aeabi_dsub>
   b91c4:	ec53 2b1a 	vmov	r2, r3, d10
   b91c8:	f7fa ff2e 	bl	b4028 <__aeabi_dsub>
   b91cc:	4602      	mov	r2, r0
   b91ce:	460b      	mov	r3, r1
   b91d0:	4640      	mov	r0, r8
   b91d2:	4649      	mov	r1, r9
   b91d4:	f7fa ff28 	bl	b4028 <__aeabi_dsub>
   b91d8:	ec53 2b18 	vmov	r2, r3, d8
   b91dc:	f7fb f8dc 	bl	b4398 <__aeabi_dmul>
   b91e0:	4622      	mov	r2, r4
   b91e2:	462b      	mov	r3, r5
   b91e4:	4604      	mov	r4, r0
   b91e6:	460d      	mov	r5, r1
   b91e8:	ec51 0b19 	vmov	r0, r1, d9
   b91ec:	f7fb f8d4 	bl	b4398 <__aeabi_dmul>
   b91f0:	4602      	mov	r2, r0
   b91f2:	460b      	mov	r3, r1
   b91f4:	4620      	mov	r0, r4
   b91f6:	4629      	mov	r1, r5
   b91f8:	f7fa ff18 	bl	b402c <__adddf3>
   b91fc:	4680      	mov	r8, r0
   b91fe:	4689      	mov	r9, r1
   b9200:	4642      	mov	r2, r8
   b9202:	464b      	mov	r3, r9
   b9204:	4650      	mov	r0, sl
   b9206:	4659      	mov	r1, fp
   b9208:	f7fa ff10 	bl	b402c <__adddf3>
   b920c:	a344      	add	r3, pc, #272	; (adr r3, b9320 <__ieee754_pow+0x578>)
   b920e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9212:	2000      	movs	r0, #0
   b9214:	4604      	mov	r4, r0
   b9216:	460d      	mov	r5, r1
   b9218:	f7fb f8be 	bl	b4398 <__aeabi_dmul>
   b921c:	4652      	mov	r2, sl
   b921e:	ec41 0b19 	vmov	d9, r0, r1
   b9222:	465b      	mov	r3, fp
   b9224:	4620      	mov	r0, r4
   b9226:	4629      	mov	r1, r5
   b9228:	f7fa fefe 	bl	b4028 <__aeabi_dsub>
   b922c:	4602      	mov	r2, r0
   b922e:	460b      	mov	r3, r1
   b9230:	4640      	mov	r0, r8
   b9232:	4649      	mov	r1, r9
   b9234:	f7fa fef8 	bl	b4028 <__aeabi_dsub>
   b9238:	a33b      	add	r3, pc, #236	; (adr r3, b9328 <__ieee754_pow+0x580>)
   b923a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b923e:	f7fb f8ab 	bl	b4398 <__aeabi_dmul>
   b9242:	4602      	mov	r2, r0
   b9244:	460b      	mov	r3, r1
   b9246:	4620      	mov	r0, r4
   b9248:	4629      	mov	r1, r5
   b924a:	4614      	mov	r4, r2
   b924c:	461d      	mov	r5, r3
   b924e:	a338      	add	r3, pc, #224	; (adr r3, b9330 <__ieee754_pow+0x588>)
   b9250:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9254:	f7fb f8a0 	bl	b4398 <__aeabi_dmul>
   b9258:	4602      	mov	r2, r0
   b925a:	460b      	mov	r3, r1
   b925c:	4620      	mov	r0, r4
   b925e:	4629      	mov	r1, r5
   b9260:	f7fa fee4 	bl	b402c <__adddf3>
   b9264:	ec53 2b1d 	vmov	r2, r3, d13
   b9268:	f7fa fee0 	bl	b402c <__adddf3>
   b926c:	4680      	mov	r8, r0
   b926e:	9805      	ldr	r0, [sp, #20]
   b9270:	4689      	mov	r9, r1
   b9272:	f7fb f827 	bl	b42c4 <__aeabi_i2d>
   b9276:	4642      	mov	r2, r8
   b9278:	4682      	mov	sl, r0
   b927a:	468b      	mov	fp, r1
   b927c:	464b      	mov	r3, r9
   b927e:	ec51 0b19 	vmov	r0, r1, d9
   b9282:	f7fa fed3 	bl	b402c <__adddf3>
   b9286:	ec53 2b1c 	vmov	r2, r3, d12
   b928a:	f7fa fecf 	bl	b402c <__adddf3>
   b928e:	4652      	mov	r2, sl
   b9290:	465b      	mov	r3, fp
   b9292:	f7fa fecb 	bl	b402c <__adddf3>
   b9296:	4652      	mov	r2, sl
   b9298:	465b      	mov	r3, fp
   b929a:	2000      	movs	r0, #0
   b929c:	4604      	mov	r4, r0
   b929e:	460d      	mov	r5, r1
   b92a0:	f7fa fec2 	bl	b4028 <__aeabi_dsub>
   b92a4:	ec53 2b1c 	vmov	r2, r3, d12
   b92a8:	f7fa febe 	bl	b4028 <__aeabi_dsub>
   b92ac:	ec53 2b19 	vmov	r2, r3, d9
   b92b0:	f7fa feba 	bl	b4028 <__aeabi_dsub>
   b92b4:	4602      	mov	r2, r0
   b92b6:	460b      	mov	r3, r1
   b92b8:	4640      	mov	r0, r8
   b92ba:	4649      	mov	r1, r9
   b92bc:	f7fa feb4 	bl	b4028 <__aeabi_dsub>
   b92c0:	9b00      	ldr	r3, [sp, #0]
   b92c2:	9a04      	ldr	r2, [sp, #16]
   b92c4:	3b01      	subs	r3, #1
   b92c6:	4313      	orrs	r3, r2
   b92c8:	4682      	mov	sl, r0
   b92ca:	468b      	mov	fp, r1
   b92cc:	f040 81b6 	bne.w	b963c <__ieee754_pow+0x894>
   b92d0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b9338 <__ieee754_pow+0x590>
   b92d4:	eeb0 8a47 	vmov.f32	s16, s14
   b92d8:	eef0 8a67 	vmov.f32	s17, s15
   b92dc:	e03c      	b.n	b9358 <__ieee754_pow+0x5b0>
   b92de:	bf00      	nop
   b92e0:	00000000 	.word	0x00000000
   b92e4:	3ff00000 	.word	0x3ff00000
	...
   b92f0:	4a454eef 	.word	0x4a454eef
   b92f4:	3fca7e28 	.word	0x3fca7e28
   b92f8:	93c9db65 	.word	0x93c9db65
   b92fc:	3fcd864a 	.word	0x3fcd864a
   b9300:	a91d4101 	.word	0xa91d4101
   b9304:	3fd17460 	.word	0x3fd17460
   b9308:	518f264d 	.word	0x518f264d
   b930c:	3fd55555 	.word	0x3fd55555
   b9310:	db6fabff 	.word	0xdb6fabff
   b9314:	3fdb6db6 	.word	0x3fdb6db6
   b9318:	33333303 	.word	0x33333303
   b931c:	3fe33333 	.word	0x3fe33333
   b9320:	e0000000 	.word	0xe0000000
   b9324:	3feec709 	.word	0x3feec709
   b9328:	dc3a03fd 	.word	0xdc3a03fd
   b932c:	3feec709 	.word	0x3feec709
   b9330:	145b01f5 	.word	0x145b01f5
   b9334:	be3e2fe0 	.word	0xbe3e2fe0
   b9338:	00000000 	.word	0x00000000
   b933c:	bff00000 	.word	0xbff00000
   b9340:	7ff00000 	.word	0x7ff00000
   b9344:	43400000 	.word	0x43400000
   b9348:	0003988e 	.word	0x0003988e
   b934c:	000bb679 	.word	0x000bb679
   b9350:	3ff00000 	.word	0x3ff00000
   b9354:	40080000 	.word	0x40080000
   b9358:	2300      	movs	r3, #0
   b935a:	e9cd 6700 	strd	r6, r7, [sp]
   b935e:	9300      	str	r3, [sp, #0]
   b9360:	e9dd 8900 	ldrd	r8, r9, [sp]
   b9364:	4630      	mov	r0, r6
   b9366:	4642      	mov	r2, r8
   b9368:	464b      	mov	r3, r9
   b936a:	4639      	mov	r1, r7
   b936c:	f7fa fe5c 	bl	b4028 <__aeabi_dsub>
   b9370:	4622      	mov	r2, r4
   b9372:	462b      	mov	r3, r5
   b9374:	f7fb f810 	bl	b4398 <__aeabi_dmul>
   b9378:	4632      	mov	r2, r6
   b937a:	463b      	mov	r3, r7
   b937c:	4606      	mov	r6, r0
   b937e:	460f      	mov	r7, r1
   b9380:	4650      	mov	r0, sl
   b9382:	4659      	mov	r1, fp
   b9384:	f7fb f808 	bl	b4398 <__aeabi_dmul>
   b9388:	4602      	mov	r2, r0
   b938a:	460b      	mov	r3, r1
   b938c:	4630      	mov	r0, r6
   b938e:	4639      	mov	r1, r7
   b9390:	f7fa fe4c 	bl	b402c <__adddf3>
   b9394:	4642      	mov	r2, r8
   b9396:	464b      	mov	r3, r9
   b9398:	4606      	mov	r6, r0
   b939a:	460f      	mov	r7, r1
   b939c:	4620      	mov	r0, r4
   b939e:	4629      	mov	r1, r5
   b93a0:	f7fa fffa 	bl	b4398 <__aeabi_dmul>
   b93a4:	4604      	mov	r4, r0
   b93a6:	460d      	mov	r5, r1
   b93a8:	462b      	mov	r3, r5
   b93aa:	4630      	mov	r0, r6
   b93ac:	4639      	mov	r1, r7
   b93ae:	4622      	mov	r2, r4
   b93b0:	f7fa fe3c 	bl	b402c <__adddf3>
   b93b4:	4bc2      	ldr	r3, [pc, #776]	; (b96c0 <__ieee754_pow+0x918>)
   b93b6:	4299      	cmp	r1, r3
   b93b8:	4680      	mov	r8, r0
   b93ba:	4689      	mov	r9, r1
   b93bc:	468a      	mov	sl, r1
   b93be:	f340 8118 	ble.w	b95f2 <__ieee754_pow+0x84a>
   b93c2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b93c6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b93ca:	4303      	orrs	r3, r0
   b93cc:	f040 8207 	bne.w	b97de <__ieee754_pow+0xa36>
   b93d0:	a3a3      	add	r3, pc, #652	; (adr r3, b9660 <__ieee754_pow+0x8b8>)
   b93d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b93d6:	4630      	mov	r0, r6
   b93d8:	4639      	mov	r1, r7
   b93da:	f7fa fe27 	bl	b402c <__adddf3>
   b93de:	4602      	mov	r2, r0
   b93e0:	460b      	mov	r3, r1
   b93e2:	4640      	mov	r0, r8
   b93e4:	4649      	mov	r1, r9
   b93e6:	4690      	mov	r8, r2
   b93e8:	4699      	mov	r9, r3
   b93ea:	4622      	mov	r2, r4
   b93ec:	462b      	mov	r3, r5
   b93ee:	f7fa fe1b 	bl	b4028 <__aeabi_dsub>
   b93f2:	4602      	mov	r2, r0
   b93f4:	460b      	mov	r3, r1
   b93f6:	4640      	mov	r0, r8
   b93f8:	4649      	mov	r1, r9
   b93fa:	f7fb fa5d 	bl	b48b8 <__aeabi_dcmpgt>
   b93fe:	2800      	cmp	r0, #0
   b9400:	f040 81ed 	bne.w	b97de <__ieee754_pow+0xa36>
   b9404:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b9408:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b940c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b9410:	fa42 f303 	asr.w	r3, r2, r3
   b9414:	4453      	add	r3, sl
   b9416:	49ab      	ldr	r1, [pc, #684]	; (b96c4 <__ieee754_pow+0x91c>)
   b9418:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b941c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b9420:	fa41 fc02 	asr.w	ip, r1, r2
   b9424:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b9428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b942c:	f1c2 0214 	rsb	r2, r2, #20
   b9430:	fa41 f202 	asr.w	r2, r1, r2
   b9434:	2000      	movs	r0, #0
   b9436:	ea23 010c 	bic.w	r1, r3, ip
   b943a:	f1ba 0f00 	cmp.w	sl, #0
   b943e:	9200      	str	r2, [sp, #0]
   b9440:	460b      	mov	r3, r1
   b9442:	4602      	mov	r2, r0
   b9444:	da02      	bge.n	b944c <__ieee754_pow+0x6a4>
   b9446:	9900      	ldr	r1, [sp, #0]
   b9448:	4249      	negs	r1, r1
   b944a:	9100      	str	r1, [sp, #0]
   b944c:	4620      	mov	r0, r4
   b944e:	4629      	mov	r1, r5
   b9450:	f7fa fdea 	bl	b4028 <__aeabi_dsub>
   b9454:	9b00      	ldr	r3, [sp, #0]
   b9456:	051b      	lsls	r3, r3, #20
   b9458:	9302      	str	r3, [sp, #8]
   b945a:	4602      	mov	r2, r0
   b945c:	460b      	mov	r3, r1
   b945e:	4604      	mov	r4, r0
   b9460:	460d      	mov	r5, r1
   b9462:	4630      	mov	r0, r6
   b9464:	4639      	mov	r1, r7
   b9466:	f7fa fde1 	bl	b402c <__adddf3>
   b946a:	4689      	mov	r9, r1
   b946c:	f04f 0800 	mov.w	r8, #0
   b9470:	a37d      	add	r3, pc, #500	; (adr r3, b9668 <__ieee754_pow+0x8c0>)
   b9472:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9476:	4640      	mov	r0, r8
   b9478:	4649      	mov	r1, r9
   b947a:	f7fa ff8d 	bl	b4398 <__aeabi_dmul>
   b947e:	4622      	mov	r2, r4
   b9480:	462b      	mov	r3, r5
   b9482:	4682      	mov	sl, r0
   b9484:	468b      	mov	fp, r1
   b9486:	4640      	mov	r0, r8
   b9488:	4649      	mov	r1, r9
   b948a:	f7fa fdcd 	bl	b4028 <__aeabi_dsub>
   b948e:	4602      	mov	r2, r0
   b9490:	460b      	mov	r3, r1
   b9492:	4630      	mov	r0, r6
   b9494:	4639      	mov	r1, r7
   b9496:	f7fa fdc7 	bl	b4028 <__aeabi_dsub>
   b949a:	a375      	add	r3, pc, #468	; (adr r3, b9670 <__ieee754_pow+0x8c8>)
   b949c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b94a0:	f7fa ff7a 	bl	b4398 <__aeabi_dmul>
   b94a4:	a374      	add	r3, pc, #464	; (adr r3, b9678 <__ieee754_pow+0x8d0>)
   b94a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b94aa:	4604      	mov	r4, r0
   b94ac:	460d      	mov	r5, r1
   b94ae:	4640      	mov	r0, r8
   b94b0:	4649      	mov	r1, r9
   b94b2:	f7fa ff71 	bl	b4398 <__aeabi_dmul>
   b94b6:	4602      	mov	r2, r0
   b94b8:	460b      	mov	r3, r1
   b94ba:	4620      	mov	r0, r4
   b94bc:	4629      	mov	r1, r5
   b94be:	f7fa fdb5 	bl	b402c <__adddf3>
   b94c2:	4606      	mov	r6, r0
   b94c4:	460f      	mov	r7, r1
   b94c6:	4632      	mov	r2, r6
   b94c8:	463b      	mov	r3, r7
   b94ca:	4650      	mov	r0, sl
   b94cc:	4659      	mov	r1, fp
   b94ce:	f7fa fdad 	bl	b402c <__adddf3>
   b94d2:	4652      	mov	r2, sl
   b94d4:	465b      	mov	r3, fp
   b94d6:	4604      	mov	r4, r0
   b94d8:	460d      	mov	r5, r1
   b94da:	f7fa fda5 	bl	b4028 <__aeabi_dsub>
   b94de:	4602      	mov	r2, r0
   b94e0:	460b      	mov	r3, r1
   b94e2:	4630      	mov	r0, r6
   b94e4:	4639      	mov	r1, r7
   b94e6:	f7fa fd9f 	bl	b4028 <__aeabi_dsub>
   b94ea:	4622      	mov	r2, r4
   b94ec:	4680      	mov	r8, r0
   b94ee:	4689      	mov	r9, r1
   b94f0:	462b      	mov	r3, r5
   b94f2:	4620      	mov	r0, r4
   b94f4:	4629      	mov	r1, r5
   b94f6:	f7fa ff4f 	bl	b4398 <__aeabi_dmul>
   b94fa:	a361      	add	r3, pc, #388	; (adr r3, b9680 <__ieee754_pow+0x8d8>)
   b94fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9500:	4606      	mov	r6, r0
   b9502:	460f      	mov	r7, r1
   b9504:	f7fa ff48 	bl	b4398 <__aeabi_dmul>
   b9508:	a35f      	add	r3, pc, #380	; (adr r3, b9688 <__ieee754_pow+0x8e0>)
   b950a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b950e:	f7fa fd8b 	bl	b4028 <__aeabi_dsub>
   b9512:	4632      	mov	r2, r6
   b9514:	463b      	mov	r3, r7
   b9516:	f7fa ff3f 	bl	b4398 <__aeabi_dmul>
   b951a:	a35d      	add	r3, pc, #372	; (adr r3, b9690 <__ieee754_pow+0x8e8>)
   b951c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9520:	f7fa fd84 	bl	b402c <__adddf3>
   b9524:	4632      	mov	r2, r6
   b9526:	463b      	mov	r3, r7
   b9528:	f7fa ff36 	bl	b4398 <__aeabi_dmul>
   b952c:	a35a      	add	r3, pc, #360	; (adr r3, b9698 <__ieee754_pow+0x8f0>)
   b952e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9532:	f7fa fd79 	bl	b4028 <__aeabi_dsub>
   b9536:	4632      	mov	r2, r6
   b9538:	463b      	mov	r3, r7
   b953a:	f7fa ff2d 	bl	b4398 <__aeabi_dmul>
   b953e:	a358      	add	r3, pc, #352	; (adr r3, b96a0 <__ieee754_pow+0x8f8>)
   b9540:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9544:	f7fa fd72 	bl	b402c <__adddf3>
   b9548:	4632      	mov	r2, r6
   b954a:	463b      	mov	r3, r7
   b954c:	f7fa ff24 	bl	b4398 <__aeabi_dmul>
   b9550:	4602      	mov	r2, r0
   b9552:	460b      	mov	r3, r1
   b9554:	4620      	mov	r0, r4
   b9556:	4629      	mov	r1, r5
   b9558:	f7fa fd66 	bl	b4028 <__aeabi_dsub>
   b955c:	4606      	mov	r6, r0
   b955e:	460f      	mov	r7, r1
   b9560:	4632      	mov	r2, r6
   b9562:	463b      	mov	r3, r7
   b9564:	4620      	mov	r0, r4
   b9566:	4629      	mov	r1, r5
   b9568:	f7fa ff16 	bl	b4398 <__aeabi_dmul>
   b956c:	4602      	mov	r2, r0
   b956e:	460b      	mov	r3, r1
   b9570:	4630      	mov	r0, r6
   b9572:	4639      	mov	r1, r7
   b9574:	4616      	mov	r6, r2
   b9576:	461f      	mov	r7, r3
   b9578:	2200      	movs	r2, #0
   b957a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b957e:	f7fa fd53 	bl	b4028 <__aeabi_dsub>
   b9582:	4602      	mov	r2, r0
   b9584:	460b      	mov	r3, r1
   b9586:	4630      	mov	r0, r6
   b9588:	4639      	mov	r1, r7
   b958a:	f7fb f82f 	bl	b45ec <__aeabi_ddiv>
   b958e:	4642      	mov	r2, r8
   b9590:	4606      	mov	r6, r0
   b9592:	460f      	mov	r7, r1
   b9594:	464b      	mov	r3, r9
   b9596:	4620      	mov	r0, r4
   b9598:	4629      	mov	r1, r5
   b959a:	f7fa fefd 	bl	b4398 <__aeabi_dmul>
   b959e:	4642      	mov	r2, r8
   b95a0:	464b      	mov	r3, r9
   b95a2:	f7fa fd43 	bl	b402c <__adddf3>
   b95a6:	4602      	mov	r2, r0
   b95a8:	460b      	mov	r3, r1
   b95aa:	4630      	mov	r0, r6
   b95ac:	4639      	mov	r1, r7
   b95ae:	f7fa fd3b 	bl	b4028 <__aeabi_dsub>
   b95b2:	4622      	mov	r2, r4
   b95b4:	462b      	mov	r3, r5
   b95b6:	f7fa fd37 	bl	b4028 <__aeabi_dsub>
   b95ba:	4602      	mov	r2, r0
   b95bc:	460b      	mov	r3, r1
   b95be:	2000      	movs	r0, #0
   b95c0:	4941      	ldr	r1, [pc, #260]	; (b96c8 <__ieee754_pow+0x920>)
   b95c2:	f7fa fd31 	bl	b4028 <__aeabi_dsub>
   b95c6:	9a02      	ldr	r2, [sp, #8]
   b95c8:	460b      	mov	r3, r1
   b95ca:	4413      	add	r3, r2
   b95cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b95d0:	f2c0 8143 	blt.w	b985a <__ieee754_pow+0xab2>
   b95d4:	4619      	mov	r1, r3
   b95d6:	ec53 2b18 	vmov	r2, r3, d8
   b95da:	f7fa fedd 	bl	b4398 <__aeabi_dmul>
   b95de:	ec41 0b10 	vmov	d0, r0, r1
   b95e2:	e42d      	b.n	b8e40 <__ieee754_pow+0x98>
   b95e4:	f1bb 0f00 	cmp.w	fp, #0
   b95e8:	f6ff aca0 	blt.w	b8f2c <__ieee754_pow+0x184>
   b95ec:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b96a8 <__ieee754_pow+0x900>
   b95f0:	e426      	b.n	b8e40 <__ieee754_pow+0x98>
   b95f2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b96d0 <__ieee754_pow+0x928>
   b95f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b95fa:	4563      	cmp	r3, ip
   b95fc:	f340 80e7 	ble.w	b97ce <__ieee754_pow+0xa26>
   b9600:	4b32      	ldr	r3, [pc, #200]	; (b96cc <__ieee754_pow+0x924>)
   b9602:	440b      	add	r3, r1
   b9604:	4303      	orrs	r3, r0
   b9606:	d10a      	bne.n	b961e <__ieee754_pow+0x876>
   b9608:	4622      	mov	r2, r4
   b960a:	462b      	mov	r3, r5
   b960c:	f7fa fd0c 	bl	b4028 <__aeabi_dsub>
   b9610:	4632      	mov	r2, r6
   b9612:	463b      	mov	r3, r7
   b9614:	f7fb f946 	bl	b48a4 <__aeabi_dcmpge>
   b9618:	2800      	cmp	r0, #0
   b961a:	f43f aef3 	beq.w	b9404 <__ieee754_pow+0x65c>
   b961e:	a324      	add	r3, pc, #144	; (adr r3, b96b0 <__ieee754_pow+0x908>)
   b9620:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9624:	ec51 0b18 	vmov	r0, r1, d8
   b9628:	f7fa feb6 	bl	b4398 <__aeabi_dmul>
   b962c:	a320      	add	r3, pc, #128	; (adr r3, b96b0 <__ieee754_pow+0x908>)
   b962e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9632:	f7fa feb1 	bl	b4398 <__aeabi_dmul>
   b9636:	ec41 0b10 	vmov	d0, r0, r1
   b963a:	e401      	b.n	b8e40 <__ieee754_pow+0x98>
   b963c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b96b8 <__ieee754_pow+0x910>
   b9640:	eeb0 8a47 	vmov.f32	s16, s14
   b9644:	eef0 8a67 	vmov.f32	s17, s15
   b9648:	e686      	b.n	b9358 <__ieee754_pow+0x5b0>
   b964a:	f1bb 0f00 	cmp.w	fp, #0
   b964e:	dacd      	bge.n	b95ec <__ieee754_pow+0x844>
   b9650:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b9654:	ee00 6a10 	vmov	s0, r6
   b9658:	ee00 3a90 	vmov	s1, r3
   b965c:	f7ff bbf0 	b.w	b8e40 <__ieee754_pow+0x98>
   b9660:	652b82fe 	.word	0x652b82fe
   b9664:	3c971547 	.word	0x3c971547
   b9668:	00000000 	.word	0x00000000
   b966c:	3fe62e43 	.word	0x3fe62e43
   b9670:	fefa39ef 	.word	0xfefa39ef
   b9674:	3fe62e42 	.word	0x3fe62e42
   b9678:	0ca86c39 	.word	0x0ca86c39
   b967c:	be205c61 	.word	0xbe205c61
   b9680:	72bea4d0 	.word	0x72bea4d0
   b9684:	3e663769 	.word	0x3e663769
   b9688:	c5d26bf1 	.word	0xc5d26bf1
   b968c:	3ebbbd41 	.word	0x3ebbbd41
   b9690:	af25de2c 	.word	0xaf25de2c
   b9694:	3f11566a 	.word	0x3f11566a
   b9698:	16bebd93 	.word	0x16bebd93
   b969c:	3f66c16c 	.word	0x3f66c16c
   b96a0:	5555553e 	.word	0x5555553e
   b96a4:	3fc55555 	.word	0x3fc55555
	...
   b96b0:	c2f8f359 	.word	0xc2f8f359
   b96b4:	01a56e1f 	.word	0x01a56e1f
   b96b8:	00000000 	.word	0x00000000
   b96bc:	3ff00000 	.word	0x3ff00000
   b96c0:	408fffff 	.word	0x408fffff
   b96c4:	000fffff 	.word	0x000fffff
   b96c8:	3ff00000 	.word	0x3ff00000
   b96cc:	3f6f3400 	.word	0x3f6f3400
   b96d0:	4090cbff 	.word	0x4090cbff
   b96d4:	4598      	cmp	r8, r3
   b96d6:	db85      	blt.n	b95e4 <__ieee754_pow+0x83c>
   b96d8:	4b7d      	ldr	r3, [pc, #500]	; (b98d0 <__ieee754_pow+0xb28>)
   b96da:	4598      	cmp	r8, r3
   b96dc:	f73f ac22 	bgt.w	b8f24 <__ieee754_pow+0x17c>
   b96e0:	ec51 0b10 	vmov	r0, r1, d0
   b96e4:	4b7a      	ldr	r3, [pc, #488]	; (b98d0 <__ieee754_pow+0xb28>)
   b96e6:	2200      	movs	r2, #0
   b96e8:	f7fa fc9e 	bl	b4028 <__aeabi_dsub>
   b96ec:	a368      	add	r3, pc, #416	; (adr r3, b9890 <__ieee754_pow+0xae8>)
   b96ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b96f2:	4604      	mov	r4, r0
   b96f4:	460d      	mov	r5, r1
   b96f6:	f7fa fe4f 	bl	b4398 <__aeabi_dmul>
   b96fa:	a367      	add	r3, pc, #412	; (adr r3, b9898 <__ieee754_pow+0xaf0>)
   b96fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9700:	4682      	mov	sl, r0
   b9702:	468b      	mov	fp, r1
   b9704:	4620      	mov	r0, r4
   b9706:	4629      	mov	r1, r5
   b9708:	f7fa fe46 	bl	b4398 <__aeabi_dmul>
   b970c:	4b71      	ldr	r3, [pc, #452]	; (b98d4 <__ieee754_pow+0xb2c>)
   b970e:	ec41 0b18 	vmov	d8, r0, r1
   b9712:	2200      	movs	r2, #0
   b9714:	4620      	mov	r0, r4
   b9716:	4629      	mov	r1, r5
   b9718:	f7fa fe3e 	bl	b4398 <__aeabi_dmul>
   b971c:	4602      	mov	r2, r0
   b971e:	460b      	mov	r3, r1
   b9720:	a15f      	add	r1, pc, #380	; (adr r1, b98a0 <__ieee754_pow+0xaf8>)
   b9722:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9726:	f7fa fc7f 	bl	b4028 <__aeabi_dsub>
   b972a:	4622      	mov	r2, r4
   b972c:	462b      	mov	r3, r5
   b972e:	f7fa fe33 	bl	b4398 <__aeabi_dmul>
   b9732:	4602      	mov	r2, r0
   b9734:	460b      	mov	r3, r1
   b9736:	2000      	movs	r0, #0
   b9738:	4967      	ldr	r1, [pc, #412]	; (b98d8 <__ieee754_pow+0xb30>)
   b973a:	f7fa fc75 	bl	b4028 <__aeabi_dsub>
   b973e:	4622      	mov	r2, r4
   b9740:	4680      	mov	r8, r0
   b9742:	4689      	mov	r9, r1
   b9744:	462b      	mov	r3, r5
   b9746:	4620      	mov	r0, r4
   b9748:	4629      	mov	r1, r5
   b974a:	f7fa fe25 	bl	b4398 <__aeabi_dmul>
   b974e:	4602      	mov	r2, r0
   b9750:	460b      	mov	r3, r1
   b9752:	4640      	mov	r0, r8
   b9754:	4649      	mov	r1, r9
   b9756:	f7fa fe1f 	bl	b4398 <__aeabi_dmul>
   b975a:	a353      	add	r3, pc, #332	; (adr r3, b98a8 <__ieee754_pow+0xb00>)
   b975c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9760:	f7fa fe1a 	bl	b4398 <__aeabi_dmul>
   b9764:	4602      	mov	r2, r0
   b9766:	460b      	mov	r3, r1
   b9768:	ec51 0b18 	vmov	r0, r1, d8
   b976c:	f7fa fc5c 	bl	b4028 <__aeabi_dsub>
   b9770:	4680      	mov	r8, r0
   b9772:	4689      	mov	r9, r1
   b9774:	4642      	mov	r2, r8
   b9776:	464b      	mov	r3, r9
   b9778:	4650      	mov	r0, sl
   b977a:	4659      	mov	r1, fp
   b977c:	f7fa fc56 	bl	b402c <__adddf3>
   b9780:	2000      	movs	r0, #0
   b9782:	4652      	mov	r2, sl
   b9784:	465b      	mov	r3, fp
   b9786:	4604      	mov	r4, r0
   b9788:	460d      	mov	r5, r1
   b978a:	e591      	b.n	b92b0 <__ieee754_pow+0x508>
   b978c:	4622      	mov	r2, r4
   b978e:	462b      	mov	r3, r5
   b9790:	4620      	mov	r0, r4
   b9792:	4629      	mov	r1, r5
   b9794:	f7fa fe00 	bl	b4398 <__aeabi_dmul>
   b9798:	ec41 0b10 	vmov	d0, r0, r1
   b979c:	f7ff bb50 	b.w	b8e40 <__ieee754_pow+0x98>
   b97a0:	494b      	ldr	r1, [pc, #300]	; (b98d0 <__ieee754_pow+0xb28>)
   b97a2:	2000      	movs	r0, #0
   b97a4:	4622      	mov	r2, r4
   b97a6:	462b      	mov	r3, r5
   b97a8:	f7fa ff20 	bl	b45ec <__aeabi_ddiv>
   b97ac:	ec41 0b10 	vmov	d0, r0, r1
   b97b0:	f7ff bb46 	b.w	b8e40 <__ieee754_pow+0x98>
   b97b4:	2b00      	cmp	r3, #0
   b97b6:	d144      	bne.n	b9842 <__ieee754_pow+0xa9a>
   b97b8:	f1c1 0114 	rsb	r1, r1, #20
   b97bc:	fa4a f001 	asr.w	r0, sl, r1
   b97c0:	fa00 f101 	lsl.w	r1, r0, r1
   b97c4:	4551      	cmp	r1, sl
   b97c6:	d05a      	beq.n	b987e <__ieee754_pow+0xad6>
   b97c8:	9300      	str	r3, [sp, #0]
   b97ca:	f7ff bb17 	b.w	b8dfc <__ieee754_pow+0x54>
   b97ce:	4a42      	ldr	r2, [pc, #264]	; (b98d8 <__ieee754_pow+0xb30>)
   b97d0:	4293      	cmp	r3, r2
   b97d2:	dc5b      	bgt.n	b988c <__ieee754_pow+0xae4>
   b97d4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b97d8:	9102      	str	r1, [sp, #8]
   b97da:	9100      	str	r1, [sp, #0]
   b97dc:	e646      	b.n	b946c <__ieee754_pow+0x6c4>
   b97de:	a334      	add	r3, pc, #208	; (adr r3, b98b0 <__ieee754_pow+0xb08>)
   b97e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b97e4:	ec51 0b18 	vmov	r0, r1, d8
   b97e8:	f7fa fdd6 	bl	b4398 <__aeabi_dmul>
   b97ec:	a330      	add	r3, pc, #192	; (adr r3, b98b0 <__ieee754_pow+0xb08>)
   b97ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b97f2:	f7fa fdd1 	bl	b4398 <__aeabi_dmul>
   b97f6:	ec41 0b10 	vmov	d0, r0, r1
   b97fa:	f7ff bb21 	b.w	b8e40 <__ieee754_pow+0x98>
   b97fe:	9b00      	ldr	r3, [sp, #0]
   b9800:	2b01      	cmp	r3, #1
   b9802:	f47f ab1d 	bne.w	b8e40 <__ieee754_pow+0x98>
   b9806:	ee10 1a90 	vmov	r1, s1
   b980a:	ee10 2a10 	vmov	r2, s0
   b980e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9812:	ec43 2b10 	vmov	d0, r2, r3
   b9816:	f7ff bb13 	b.w	b8e40 <__ieee754_pow+0x98>
   b981a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b98b8 <__ieee754_pow+0xb10>
   b981e:	eeb0 ca47 	vmov.f32	s24, s14
   b9822:	eef0 ca67 	vmov.f32	s25, s15
   b9826:	ed9f 7b26 	vldr	d7, [pc, #152]	; b98c0 <__ieee754_pow+0xb18>
   b982a:	eeb0 da47 	vmov.f32	s26, s14
   b982e:	eef0 da67 	vmov.f32	s27, s15
   b9832:	ed9f 7b25 	vldr	d7, [pc, #148]	; b98c8 <__ieee754_pow+0xb20>
   b9836:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b983a:	ec53 2b17 	vmov	r2, r3, d7
   b983e:	f7ff bbeb 	b.w	b9018 <__ieee754_pow+0x270>
   b9842:	ec45 4b10 	vmov	d0, r4, r5
   b9846:	9200      	str	r2, [sp, #0]
   b9848:	f000 f914 	bl	b9a74 <fabs>
   b984c:	9a00      	ldr	r2, [sp, #0]
   b984e:	2a00      	cmp	r2, #0
   b9850:	f47f ab92 	bne.w	b8f78 <__ieee754_pow+0x1d0>
   b9854:	9200      	str	r2, [sp, #0]
   b9856:	f7ff bb26 	b.w	b8ea6 <__ieee754_pow+0xfe>
   b985a:	ec41 0b10 	vmov	d0, r0, r1
   b985e:	9800      	ldr	r0, [sp, #0]
   b9860:	f000 f9c2 	bl	b9be8 <scalbn>
   b9864:	ec51 0b10 	vmov	r0, r1, d0
   b9868:	e6b5      	b.n	b95d6 <__ieee754_pow+0x82e>
   b986a:	f000 0001 	and.w	r0, r0, #1
   b986e:	f1c0 0102 	rsb	r1, r0, #2
   b9872:	9100      	str	r1, [sp, #0]
   b9874:	2b00      	cmp	r3, #0
   b9876:	f43f aac1 	beq.w	b8dfc <__ieee754_pow+0x54>
   b987a:	f7ff bb0d 	b.w	b8e98 <__ieee754_pow+0xf0>
   b987e:	f000 0001 	and.w	r0, r0, #1
   b9882:	f1c0 0302 	rsb	r3, r0, #2
   b9886:	9300      	str	r3, [sp, #0]
   b9888:	f7ff bab8 	b.w	b8dfc <__ieee754_pow+0x54>
   b988c:	151b      	asrs	r3, r3, #20
   b988e:	e5bb      	b.n	b9408 <__ieee754_pow+0x660>
   b9890:	60000000 	.word	0x60000000
   b9894:	3ff71547 	.word	0x3ff71547
   b9898:	f85ddf44 	.word	0xf85ddf44
   b989c:	3e54ae0b 	.word	0x3e54ae0b
   b98a0:	55555555 	.word	0x55555555
   b98a4:	3fd55555 	.word	0x3fd55555
   b98a8:	652b82fe 	.word	0x652b82fe
   b98ac:	3ff71547 	.word	0x3ff71547
   b98b0:	8800759c 	.word	0x8800759c
   b98b4:	7e37e43c 	.word	0x7e37e43c
   b98b8:	40000000 	.word	0x40000000
   b98bc:	3fe2b803 	.word	0x3fe2b803
   b98c0:	43cfd006 	.word	0x43cfd006
   b98c4:	3e4cfdeb 	.word	0x3e4cfdeb
   b98c8:	00000000 	.word	0x00000000
   b98cc:	3ff80000 	.word	0x3ff80000
   b98d0:	3ff00000 	.word	0x3ff00000
   b98d4:	3fd00000 	.word	0x3fd00000
   b98d8:	3fe00000 	.word	0x3fe00000

000b98dc <__ieee754_sqrt>:
   b98dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b98e0:	4a63      	ldr	r2, [pc, #396]	; (b9a70 <__ieee754_sqrt+0x194>)
   b98e2:	ec55 4b10 	vmov	r4, r5, d0
   b98e6:	43aa      	bics	r2, r5
   b98e8:	f000 809f 	beq.w	b9a2a <__ieee754_sqrt+0x14e>
   b98ec:	2d00      	cmp	r5, #0
   b98ee:	ee10 ca10 	vmov	ip, s0
   b98f2:	462b      	mov	r3, r5
   b98f4:	dd54      	ble.n	b99a0 <__ieee754_sqrt+0xc4>
   b98f6:	1529      	asrs	r1, r5, #20
   b98f8:	d063      	beq.n	b99c2 <__ieee754_sqrt+0xe6>
   b98fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b98fe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b9902:	07c9      	lsls	r1, r1, #31
   b9904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9908:	d404      	bmi.n	b9914 <__ieee754_sqrt+0x38>
   b990a:	005b      	lsls	r3, r3, #1
   b990c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9910:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9914:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b9918:	2600      	movs	r6, #0
   b991a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b991e:	107f      	asrs	r7, r7, #1
   b9920:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9924:	f04f 0e16 	mov.w	lr, #22
   b9928:	4634      	mov	r4, r6
   b992a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b992e:	18a1      	adds	r1, r4, r2
   b9930:	4299      	cmp	r1, r3
   b9932:	dc02      	bgt.n	b993a <__ieee754_sqrt+0x5e>
   b9934:	1a5b      	subs	r3, r3, r1
   b9936:	188c      	adds	r4, r1, r2
   b9938:	4416      	add	r6, r2
   b993a:	005b      	lsls	r3, r3, #1
   b993c:	f1be 0e01 	subs.w	lr, lr, #1
   b9940:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9944:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9948:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b994c:	d1ef      	bne.n	b992e <__ieee754_sqrt+0x52>
   b994e:	4675      	mov	r5, lr
   b9950:	2020      	movs	r0, #32
   b9952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b9956:	e00a      	b.n	b996e <__ieee754_sqrt+0x92>
   b9958:	d044      	beq.n	b99e4 <__ieee754_sqrt+0x108>
   b995a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b995e:	3801      	subs	r0, #1
   b9960:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b9964:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9968:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b996c:	d043      	beq.n	b99f6 <__ieee754_sqrt+0x11a>
   b996e:	42a3      	cmp	r3, r4
   b9970:	eb02 010e 	add.w	r1, r2, lr
   b9974:	ddf0      	ble.n	b9958 <__ieee754_sqrt+0x7c>
   b9976:	2900      	cmp	r1, #0
   b9978:	eb01 0e02 	add.w	lr, r1, r2
   b997c:	db0a      	blt.n	b9994 <__ieee754_sqrt+0xb8>
   b997e:	46a0      	mov	r8, r4
   b9980:	1b1b      	subs	r3, r3, r4
   b9982:	4561      	cmp	r1, ip
   b9984:	bf88      	it	hi
   b9986:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b998a:	ebac 0c01 	sub.w	ip, ip, r1
   b998e:	4415      	add	r5, r2
   b9990:	4644      	mov	r4, r8
   b9992:	e7e2      	b.n	b995a <__ieee754_sqrt+0x7e>
   b9994:	f1be 0f00 	cmp.w	lr, #0
   b9998:	dbf1      	blt.n	b997e <__ieee754_sqrt+0xa2>
   b999a:	f104 0801 	add.w	r8, r4, #1
   b999e:	e7ef      	b.n	b9980 <__ieee754_sqrt+0xa4>
   b99a0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b99a4:	4322      	orrs	r2, r4
   b99a6:	d038      	beq.n	b9a1a <__ieee754_sqrt+0x13e>
   b99a8:	2d00      	cmp	r5, #0
   b99aa:	d14e      	bne.n	b9a4a <__ieee754_sqrt+0x16e>
   b99ac:	4629      	mov	r1, r5
   b99ae:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b99b2:	3915      	subs	r1, #21
   b99b4:	4613      	mov	r3, r2
   b99b6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b99ba:	2a00      	cmp	r2, #0
   b99bc:	d0f7      	beq.n	b99ae <__ieee754_sqrt+0xd2>
   b99be:	02d6      	lsls	r6, r2, #11
   b99c0:	d450      	bmi.n	b9a64 <__ieee754_sqrt+0x188>
   b99c2:	2000      	movs	r0, #0
   b99c4:	005b      	lsls	r3, r3, #1
   b99c6:	02dd      	lsls	r5, r3, #11
   b99c8:	4604      	mov	r4, r0
   b99ca:	f100 0001 	add.w	r0, r0, #1
   b99ce:	d5f9      	bpl.n	b99c4 <__ieee754_sqrt+0xe8>
   b99d0:	461a      	mov	r2, r3
   b99d2:	4663      	mov	r3, ip
   b99d4:	fa0c fc00 	lsl.w	ip, ip, r0
   b99d8:	f1c0 0020 	rsb	r0, r0, #32
   b99dc:	40c3      	lsrs	r3, r0
   b99de:	1b09      	subs	r1, r1, r4
   b99e0:	4313      	orrs	r3, r2
   b99e2:	e78a      	b.n	b98fa <__ieee754_sqrt+0x1e>
   b99e4:	4561      	cmp	r1, ip
   b99e6:	d8b8      	bhi.n	b995a <__ieee754_sqrt+0x7e>
   b99e8:	2900      	cmp	r1, #0
   b99ea:	eb01 0e02 	add.w	lr, r1, r2
   b99ee:	dbd1      	blt.n	b9994 <__ieee754_sqrt+0xb8>
   b99f0:	4698      	mov	r8, r3
   b99f2:	2300      	movs	r3, #0
   b99f4:	e7c9      	b.n	b998a <__ieee754_sqrt+0xae>
   b99f6:	ea53 030c 	orrs.w	r3, r3, ip
   b99fa:	d110      	bne.n	b9a1e <__ieee754_sqrt+0x142>
   b99fc:	0868      	lsrs	r0, r5, #1
   b99fe:	1071      	asrs	r1, r6, #1
   b9a00:	07f3      	lsls	r3, r6, #31
   b9a02:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b9a06:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b9a0a:	bf48      	it	mi
   b9a0c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b9a10:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b9a14:	4602      	mov	r2, r0
   b9a16:	ec43 2b10 	vmov	d0, r2, r3
   b9a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9a1e:	1c6a      	adds	r2, r5, #1
   b9a20:	bf16      	itet	ne
   b9a22:	1c68      	addne	r0, r5, #1
   b9a24:	3601      	addeq	r6, #1
   b9a26:	0840      	lsrne	r0, r0, #1
   b9a28:	e7e9      	b.n	b99fe <__ieee754_sqrt+0x122>
   b9a2a:	ee10 2a10 	vmov	r2, s0
   b9a2e:	ee10 0a10 	vmov	r0, s0
   b9a32:	462b      	mov	r3, r5
   b9a34:	4629      	mov	r1, r5
   b9a36:	f7fa fcaf 	bl	b4398 <__aeabi_dmul>
   b9a3a:	4622      	mov	r2, r4
   b9a3c:	462b      	mov	r3, r5
   b9a3e:	f7fa faf5 	bl	b402c <__adddf3>
   b9a42:	ec41 0b10 	vmov	d0, r0, r1
   b9a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9a4a:	ee10 2a10 	vmov	r2, s0
   b9a4e:	4620      	mov	r0, r4
   b9a50:	4629      	mov	r1, r5
   b9a52:	f7fa fae9 	bl	b4028 <__aeabi_dsub>
   b9a56:	4602      	mov	r2, r0
   b9a58:	460b      	mov	r3, r1
   b9a5a:	f7fa fdc7 	bl	b45ec <__aeabi_ddiv>
   b9a5e:	ec41 0b10 	vmov	d0, r0, r1
   b9a62:	e7da      	b.n	b9a1a <__ieee754_sqrt+0x13e>
   b9a64:	4663      	mov	r3, ip
   b9a66:	2020      	movs	r0, #32
   b9a68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9a6c:	e7b6      	b.n	b99dc <__ieee754_sqrt+0x100>
   b9a6e:	bf00      	nop
   b9a70:	7ff00000 	.word	0x7ff00000

000b9a74 <fabs>:
   b9a74:	ec51 0b10 	vmov	r0, r1, d0
   b9a78:	ee10 2a10 	vmov	r2, s0
   b9a7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b9a80:	ec43 2b10 	vmov	d0, r2, r3
   b9a84:	4770      	bx	lr
   b9a86:	bf00      	nop

000b9a88 <finite>:
   b9a88:	b082      	sub	sp, #8
   b9a8a:	ed8d 0b00 	vstr	d0, [sp]
   b9a8e:	9801      	ldr	r0, [sp, #4]
   b9a90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b9a94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b9a98:	0fc0      	lsrs	r0, r0, #31
   b9a9a:	b002      	add	sp, #8
   b9a9c:	4770      	bx	lr
   b9a9e:	bf00      	nop

000b9aa0 <nan>:
   b9aa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9aa8 <nan+0x8>
   b9aa4:	4770      	bx	lr
   b9aa6:	bf00      	nop
   b9aa8:	00000000 	.word	0x00000000
   b9aac:	7ff80000 	.word	0x7ff80000

000b9ab0 <rint>:
   b9ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9ab2:	ec53 2b10 	vmov	r2, r3, d0
   b9ab6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b9aba:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b9abe:	2913      	cmp	r1, #19
   b9ac0:	ee10 0a10 	vmov	r0, s0
   b9ac4:	b083      	sub	sp, #12
   b9ac6:	461c      	mov	r4, r3
   b9ac8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b9acc:	dc3a      	bgt.n	b9b44 <rint+0x94>
   b9ace:	2900      	cmp	r1, #0
   b9ad0:	db30      	blt.n	b9b34 <rint+0x84>
   b9ad2:	4d42      	ldr	r5, [pc, #264]	; (b9bdc <rint+0x12c>)
   b9ad4:	fa45 fc01 	asr.w	ip, r5, r1
   b9ad8:	ea03 050c 	and.w	r5, r3, ip
   b9adc:	4315      	orrs	r5, r2
   b9ade:	d02d      	beq.n	b9b3c <rint+0x8c>
   b9ae0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b9ae4:	4318      	orrs	r0, r3
   b9ae6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b9aea:	d00c      	beq.n	b9b06 <rint+0x56>
   b9aec:	ea24 0c0c 	bic.w	ip, r4, ip
   b9af0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b9af4:	2913      	cmp	r1, #19
   b9af6:	fa44 f101 	asr.w	r1, r4, r1
   b9afa:	bf0c      	ite	eq
   b9afc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b9b00:	2000      	movne	r0, #0
   b9b02:	ea4c 0401 	orr.w	r4, ip, r1
   b9b06:	4936      	ldr	r1, [pc, #216]	; (b9be0 <rint+0x130>)
   b9b08:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b9b0c:	4623      	mov	r3, r4
   b9b0e:	e9de 4500 	ldrd	r4, r5, [lr]
   b9b12:	4602      	mov	r2, r0
   b9b14:	4629      	mov	r1, r5
   b9b16:	4620      	mov	r0, r4
   b9b18:	f7fa fa88 	bl	b402c <__adddf3>
   b9b1c:	e9cd 0100 	strd	r0, r1, [sp]
   b9b20:	e9dd 0100 	ldrd	r0, r1, [sp]
   b9b24:	4622      	mov	r2, r4
   b9b26:	462b      	mov	r3, r5
   b9b28:	f7fa fa7e 	bl	b4028 <__aeabi_dsub>
   b9b2c:	ec41 0b10 	vmov	d0, r0, r1
   b9b30:	b003      	add	sp, #12
   b9b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9b34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b9b38:	4311      	orrs	r1, r2
   b9b3a:	d124      	bne.n	b9b86 <rint+0xd6>
   b9b3c:	ec43 2b10 	vmov	d0, r2, r3
   b9b40:	b003      	add	sp, #12
   b9b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9b44:	2933      	cmp	r1, #51	; 0x33
   b9b46:	dd08      	ble.n	b9b5a <rint+0xaa>
   b9b48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b9b4c:	d1f6      	bne.n	b9b3c <rint+0x8c>
   b9b4e:	4619      	mov	r1, r3
   b9b50:	f7fa fa6c 	bl	b402c <__adddf3>
   b9b54:	ec41 0b10 	vmov	d0, r0, r1
   b9b58:	e7f2      	b.n	b9b40 <rint+0x90>
   b9b5a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b9b5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b9b62:	fa21 f10c 	lsr.w	r1, r1, ip
   b9b66:	420a      	tst	r2, r1
   b9b68:	d0e8      	beq.n	b9b3c <rint+0x8c>
   b9b6a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b9b6e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b9b72:	d0c8      	beq.n	b9b06 <rint+0x56>
   b9b74:	ea20 0303 	bic.w	r3, r0, r3
   b9b78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b9b7c:	fa40 fc0c 	asr.w	ip, r0, ip
   b9b80:	ea43 000c 	orr.w	r0, r3, ip
   b9b84:	e7bf      	b.n	b9b06 <rint+0x56>
   b9b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b9b8a:	4318      	orrs	r0, r3
   b9b8c:	4a14      	ldr	r2, [pc, #80]	; (b9be0 <rint+0x130>)
   b9b8e:	4243      	negs	r3, r0
   b9b90:	4303      	orrs	r3, r0
   b9b92:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b9b96:	0b1b      	lsrs	r3, r3, #12
   b9b98:	0c62      	lsrs	r2, r4, #17
   b9b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b9b9e:	0452      	lsls	r2, r2, #17
   b9ba0:	ea43 0702 	orr.w	r7, r3, r2
   b9ba4:	463b      	mov	r3, r7
   b9ba6:	e9de 6700 	ldrd	r6, r7, [lr]
   b9baa:	ee10 2a10 	vmov	r2, s0
   b9bae:	4630      	mov	r0, r6
   b9bb0:	4639      	mov	r1, r7
   b9bb2:	f7fa fa3b 	bl	b402c <__adddf3>
   b9bb6:	e9cd 0100 	strd	r0, r1, [sp]
   b9bba:	4632      	mov	r2, r6
   b9bbc:	463b      	mov	r3, r7
   b9bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
   b9bc2:	f7fa fa31 	bl	b4028 <__aeabi_dsub>
   b9bc6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b9bca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9bce:	4602      	mov	r2, r0
   b9bd0:	ea41 0304 	orr.w	r3, r1, r4
   b9bd4:	ec43 2b10 	vmov	d0, r2, r3
   b9bd8:	b003      	add	sp, #12
   b9bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9bdc:	000fffff 	.word	0x000fffff
   b9be0:	000bb338 	.word	0x000bb338
   b9be4:	00000000 	.word	0x00000000

000b9be8 <scalbn>:
   b9be8:	b538      	push	{r3, r4, r5, lr}
   b9bea:	ec53 2b10 	vmov	r2, r3, d0
   b9bee:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b9bf2:	4604      	mov	r4, r0
   b9bf4:	469c      	mov	ip, r3
   b9bf6:	bb89      	cbnz	r1, b9c5c <scalbn+0x74>
   b9bf8:	ee10 1a10 	vmov	r1, s0
   b9bfc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b9c00:	ea5c 0101 	orrs.w	r1, ip, r1
   b9c04:	d029      	beq.n	b9c5a <scalbn+0x72>
   b9c06:	4619      	mov	r1, r3
   b9c08:	2200      	movs	r2, #0
   b9c0a:	4b3d      	ldr	r3, [pc, #244]	; (b9d00 <scalbn+0x118>)
   b9c0c:	4d3d      	ldr	r5, [pc, #244]	; (b9d04 <scalbn+0x11c>)
   b9c0e:	ee10 0a10 	vmov	r0, s0
   b9c12:	f7fa fbc1 	bl	b4398 <__aeabi_dmul>
   b9c16:	42ac      	cmp	r4, r5
   b9c18:	4602      	mov	r2, r0
   b9c1a:	460b      	mov	r3, r1
   b9c1c:	db16      	blt.n	b9c4c <scalbn+0x64>
   b9c1e:	468c      	mov	ip, r1
   b9c20:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b9c24:	3936      	subs	r1, #54	; 0x36
   b9c26:	4421      	add	r1, r4
   b9c28:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b9c2c:	4281      	cmp	r1, r0
   b9c2e:	dc21      	bgt.n	b9c74 <scalbn+0x8c>
   b9c30:	2900      	cmp	r1, #0
   b9c32:	dc47      	bgt.n	b9cc4 <scalbn+0xdc>
   b9c34:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b9c38:	da34      	bge.n	b9ca4 <scalbn+0xbc>
   b9c3a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b9c3e:	428c      	cmp	r4, r1
   b9c40:	dc18      	bgt.n	b9c74 <scalbn+0x8c>
   b9c42:	2b00      	cmp	r3, #0
   b9c44:	a126      	add	r1, pc, #152	; (adr r1, b9ce0 <scalbn+0xf8>)
   b9c46:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9c4a:	db44      	blt.n	b9cd6 <scalbn+0xee>
   b9c4c:	a324      	add	r3, pc, #144	; (adr r3, b9ce0 <scalbn+0xf8>)
   b9c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c52:	f7fa fba1 	bl	b4398 <__aeabi_dmul>
   b9c56:	ec41 0b10 	vmov	d0, r0, r1
   b9c5a:	bd38      	pop	{r3, r4, r5, pc}
   b9c5c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b9c60:	4281      	cmp	r1, r0
   b9c62:	d1e0      	bne.n	b9c26 <scalbn+0x3e>
   b9c64:	ee10 0a10 	vmov	r0, s0
   b9c68:	4619      	mov	r1, r3
   b9c6a:	f7fa f9df 	bl	b402c <__adddf3>
   b9c6e:	ec41 0b10 	vmov	d0, r0, r1
   b9c72:	bd38      	pop	{r3, r4, r5, pc}
   b9c74:	2b00      	cmp	r3, #0
   b9c76:	a11c      	add	r1, pc, #112	; (adr r1, b9ce8 <scalbn+0x100>)
   b9c78:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9c7c:	db07      	blt.n	b9c8e <scalbn+0xa6>
   b9c7e:	a31a      	add	r3, pc, #104	; (adr r3, b9ce8 <scalbn+0x100>)
   b9c80:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c84:	f7fa fb88 	bl	b4398 <__aeabi_dmul>
   b9c88:	ec41 0b10 	vmov	d0, r0, r1
   b9c8c:	bd38      	pop	{r3, r4, r5, pc}
   b9c8e:	a118      	add	r1, pc, #96	; (adr r1, b9cf0 <scalbn+0x108>)
   b9c90:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9c94:	a314      	add	r3, pc, #80	; (adr r3, b9ce8 <scalbn+0x100>)
   b9c96:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c9a:	f7fa fb7d 	bl	b4398 <__aeabi_dmul>
   b9c9e:	ec41 0b10 	vmov	d0, r0, r1
   b9ca2:	e7f3      	b.n	b9c8c <scalbn+0xa4>
   b9ca4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b9ca8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b9cac:	3136      	adds	r1, #54	; 0x36
   b9cae:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b9cb2:	4610      	mov	r0, r2
   b9cb4:	4619      	mov	r1, r3
   b9cb6:	2200      	movs	r2, #0
   b9cb8:	4b13      	ldr	r3, [pc, #76]	; (b9d08 <scalbn+0x120>)
   b9cba:	f7fa fb6d 	bl	b4398 <__aeabi_dmul>
   b9cbe:	ec41 0b10 	vmov	d0, r0, r1
   b9cc2:	bd38      	pop	{r3, r4, r5, pc}
   b9cc4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b9cc8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b9ccc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b9cd0:	ec43 2b10 	vmov	d0, r2, r3
   b9cd4:	bd38      	pop	{r3, r4, r5, pc}
   b9cd6:	a108      	add	r1, pc, #32	; (adr r1, b9cf8 <scalbn+0x110>)
   b9cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9cdc:	e7b6      	b.n	b9c4c <scalbn+0x64>
   b9cde:	bf00      	nop
   b9ce0:	c2f8f359 	.word	0xc2f8f359
   b9ce4:	01a56e1f 	.word	0x01a56e1f
   b9ce8:	8800759c 	.word	0x8800759c
   b9cec:	7e37e43c 	.word	0x7e37e43c
   b9cf0:	8800759c 	.word	0x8800759c
   b9cf4:	fe37e43c 	.word	0xfe37e43c
   b9cf8:	c2f8f359 	.word	0xc2f8f359
   b9cfc:	81a56e1f 	.word	0x81a56e1f
   b9d00:	43500000 	.word	0x43500000
   b9d04:	ffff3cb0 	.word	0xffff3cb0
   b9d08:	3c900000 	.word	0x3c900000

000b9d0c <atexit>:
   b9d0c:	2300      	movs	r3, #0
   b9d0e:	4601      	mov	r1, r0
   b9d10:	461a      	mov	r2, r3
   b9d12:	4618      	mov	r0, r3
   b9d14:	f000 b8ec 	b.w	b9ef0 <__register_exitproc>

000b9d18 <atoi>:
   b9d18:	220a      	movs	r2, #10
   b9d1a:	2100      	movs	r1, #0
   b9d1c:	f000 b8de 	b.w	b9edc <strtol>

000b9d20 <atol>:
   b9d20:	220a      	movs	r2, #10
   b9d22:	2100      	movs	r1, #0
   b9d24:	f000 b8da 	b.w	b9edc <strtol>

000b9d28 <memcpy>:
   b9d28:	440a      	add	r2, r1
   b9d2a:	4291      	cmp	r1, r2
   b9d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9d30:	d100      	bne.n	b9d34 <memcpy+0xc>
   b9d32:	4770      	bx	lr
   b9d34:	b510      	push	{r4, lr}
   b9d36:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9d3e:	4291      	cmp	r1, r2
   b9d40:	d1f9      	bne.n	b9d36 <memcpy+0xe>
   b9d42:	bd10      	pop	{r4, pc}

000b9d44 <memset>:
   b9d44:	4402      	add	r2, r0
   b9d46:	4603      	mov	r3, r0
   b9d48:	4293      	cmp	r3, r2
   b9d4a:	d100      	bne.n	b9d4e <memset+0xa>
   b9d4c:	4770      	bx	lr
   b9d4e:	f803 1b01 	strb.w	r1, [r3], #1
   b9d52:	e7f9      	b.n	b9d48 <memset+0x4>

000b9d54 <srand>:
   b9d54:	b538      	push	{r3, r4, r5, lr}
   b9d56:	4b10      	ldr	r3, [pc, #64]	; (b9d98 <srand+0x44>)
   b9d58:	681d      	ldr	r5, [r3, #0]
   b9d5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9d5c:	4604      	mov	r4, r0
   b9d5e:	b9b3      	cbnz	r3, b9d8e <srand+0x3a>
   b9d60:	2018      	movs	r0, #24
   b9d62:	f7fd fb81 	bl	b7468 <malloc>
   b9d66:	4602      	mov	r2, r0
   b9d68:	63a8      	str	r0, [r5, #56]	; 0x38
   b9d6a:	b920      	cbnz	r0, b9d76 <srand+0x22>
   b9d6c:	4b0b      	ldr	r3, [pc, #44]	; (b9d9c <srand+0x48>)
   b9d6e:	480c      	ldr	r0, [pc, #48]	; (b9da0 <srand+0x4c>)
   b9d70:	2142      	movs	r1, #66	; 0x42
   b9d72:	f7fd fbb1 	bl	b74d8 <__assert_func>
   b9d76:	490b      	ldr	r1, [pc, #44]	; (b9da4 <srand+0x50>)
   b9d78:	4b0b      	ldr	r3, [pc, #44]	; (b9da8 <srand+0x54>)
   b9d7a:	e9c0 1300 	strd	r1, r3, [r0]
   b9d7e:	4b0b      	ldr	r3, [pc, #44]	; (b9dac <srand+0x58>)
   b9d80:	6083      	str	r3, [r0, #8]
   b9d82:	230b      	movs	r3, #11
   b9d84:	8183      	strh	r3, [r0, #12]
   b9d86:	2100      	movs	r1, #0
   b9d88:	2001      	movs	r0, #1
   b9d8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9d8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9d90:	2200      	movs	r2, #0
   b9d92:	611c      	str	r4, [r3, #16]
   b9d94:	615a      	str	r2, [r3, #20]
   b9d96:	bd38      	pop	{r3, r4, r5, pc}
   b9d98:	2003e550 	.word	0x2003e550
   b9d9c:	000bb348 	.word	0x000bb348
   b9da0:	000bb35f 	.word	0x000bb35f
   b9da4:	abcd330e 	.word	0xabcd330e
   b9da8:	e66d1234 	.word	0xe66d1234
   b9dac:	0005deec 	.word	0x0005deec

000b9db0 <strncpy>:
   b9db0:	b510      	push	{r4, lr}
   b9db2:	3901      	subs	r1, #1
   b9db4:	4603      	mov	r3, r0
   b9db6:	b132      	cbz	r2, b9dc6 <strncpy+0x16>
   b9db8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9dbc:	f803 4b01 	strb.w	r4, [r3], #1
   b9dc0:	3a01      	subs	r2, #1
   b9dc2:	2c00      	cmp	r4, #0
   b9dc4:	d1f7      	bne.n	b9db6 <strncpy+0x6>
   b9dc6:	441a      	add	r2, r3
   b9dc8:	2100      	movs	r1, #0
   b9dca:	4293      	cmp	r3, r2
   b9dcc:	d100      	bne.n	b9dd0 <strncpy+0x20>
   b9dce:	bd10      	pop	{r4, pc}
   b9dd0:	f803 1b01 	strb.w	r1, [r3], #1
   b9dd4:	e7f9      	b.n	b9dca <strncpy+0x1a>
	...

000b9dd8 <_strtol_l.constprop.0>:
   b9dd8:	2b01      	cmp	r3, #1
   b9dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9dde:	d001      	beq.n	b9de4 <_strtol_l.constprop.0+0xc>
   b9de0:	2b24      	cmp	r3, #36	; 0x24
   b9de2:	d906      	bls.n	b9df2 <_strtol_l.constprop.0+0x1a>
   b9de4:	f7fd fb70 	bl	b74c8 <__errno>
   b9de8:	2316      	movs	r3, #22
   b9dea:	6003      	str	r3, [r0, #0]
   b9dec:	2000      	movs	r0, #0
   b9dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9df2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9ed8 <_strtol_l.constprop.0+0x100>
   b9df6:	460d      	mov	r5, r1
   b9df8:	462e      	mov	r6, r5
   b9dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9dfe:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9e02:	f017 0708 	ands.w	r7, r7, #8
   b9e06:	d1f7      	bne.n	b9df8 <_strtol_l.constprop.0+0x20>
   b9e08:	2c2d      	cmp	r4, #45	; 0x2d
   b9e0a:	d132      	bne.n	b9e72 <_strtol_l.constprop.0+0x9a>
   b9e0c:	782c      	ldrb	r4, [r5, #0]
   b9e0e:	2701      	movs	r7, #1
   b9e10:	1cb5      	adds	r5, r6, #2
   b9e12:	2b00      	cmp	r3, #0
   b9e14:	d05b      	beq.n	b9ece <_strtol_l.constprop.0+0xf6>
   b9e16:	2b10      	cmp	r3, #16
   b9e18:	d109      	bne.n	b9e2e <_strtol_l.constprop.0+0x56>
   b9e1a:	2c30      	cmp	r4, #48	; 0x30
   b9e1c:	d107      	bne.n	b9e2e <_strtol_l.constprop.0+0x56>
   b9e1e:	782c      	ldrb	r4, [r5, #0]
   b9e20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9e24:	2c58      	cmp	r4, #88	; 0x58
   b9e26:	d14d      	bne.n	b9ec4 <_strtol_l.constprop.0+0xec>
   b9e28:	786c      	ldrb	r4, [r5, #1]
   b9e2a:	2310      	movs	r3, #16
   b9e2c:	3502      	adds	r5, #2
   b9e2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9e32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9e36:	f04f 0c00 	mov.w	ip, #0
   b9e3a:	fbb8 f9f3 	udiv	r9, r8, r3
   b9e3e:	4666      	mov	r6, ip
   b9e40:	fb03 8a19 	mls	sl, r3, r9, r8
   b9e44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9e48:	f1be 0f09 	cmp.w	lr, #9
   b9e4c:	d816      	bhi.n	b9e7c <_strtol_l.constprop.0+0xa4>
   b9e4e:	4674      	mov	r4, lr
   b9e50:	42a3      	cmp	r3, r4
   b9e52:	dd24      	ble.n	b9e9e <_strtol_l.constprop.0+0xc6>
   b9e54:	f1bc 0f00 	cmp.w	ip, #0
   b9e58:	db1e      	blt.n	b9e98 <_strtol_l.constprop.0+0xc0>
   b9e5a:	45b1      	cmp	r9, r6
   b9e5c:	d31c      	bcc.n	b9e98 <_strtol_l.constprop.0+0xc0>
   b9e5e:	d101      	bne.n	b9e64 <_strtol_l.constprop.0+0x8c>
   b9e60:	45a2      	cmp	sl, r4
   b9e62:	db19      	blt.n	b9e98 <_strtol_l.constprop.0+0xc0>
   b9e64:	fb06 4603 	mla	r6, r6, r3, r4
   b9e68:	f04f 0c01 	mov.w	ip, #1
   b9e6c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9e70:	e7e8      	b.n	b9e44 <_strtol_l.constprop.0+0x6c>
   b9e72:	2c2b      	cmp	r4, #43	; 0x2b
   b9e74:	bf04      	itt	eq
   b9e76:	782c      	ldrbeq	r4, [r5, #0]
   b9e78:	1cb5      	addeq	r5, r6, #2
   b9e7a:	e7ca      	b.n	b9e12 <_strtol_l.constprop.0+0x3a>
   b9e7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9e80:	f1be 0f19 	cmp.w	lr, #25
   b9e84:	d801      	bhi.n	b9e8a <_strtol_l.constprop.0+0xb2>
   b9e86:	3c37      	subs	r4, #55	; 0x37
   b9e88:	e7e2      	b.n	b9e50 <_strtol_l.constprop.0+0x78>
   b9e8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9e8e:	f1be 0f19 	cmp.w	lr, #25
   b9e92:	d804      	bhi.n	b9e9e <_strtol_l.constprop.0+0xc6>
   b9e94:	3c57      	subs	r4, #87	; 0x57
   b9e96:	e7db      	b.n	b9e50 <_strtol_l.constprop.0+0x78>
   b9e98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9e9c:	e7e6      	b.n	b9e6c <_strtol_l.constprop.0+0x94>
   b9e9e:	f1bc 0f00 	cmp.w	ip, #0
   b9ea2:	da05      	bge.n	b9eb0 <_strtol_l.constprop.0+0xd8>
   b9ea4:	2322      	movs	r3, #34	; 0x22
   b9ea6:	6003      	str	r3, [r0, #0]
   b9ea8:	4646      	mov	r6, r8
   b9eaa:	b942      	cbnz	r2, b9ebe <_strtol_l.constprop.0+0xe6>
   b9eac:	4630      	mov	r0, r6
   b9eae:	e79e      	b.n	b9dee <_strtol_l.constprop.0+0x16>
   b9eb0:	b107      	cbz	r7, b9eb4 <_strtol_l.constprop.0+0xdc>
   b9eb2:	4276      	negs	r6, r6
   b9eb4:	2a00      	cmp	r2, #0
   b9eb6:	d0f9      	beq.n	b9eac <_strtol_l.constprop.0+0xd4>
   b9eb8:	f1bc 0f00 	cmp.w	ip, #0
   b9ebc:	d000      	beq.n	b9ec0 <_strtol_l.constprop.0+0xe8>
   b9ebe:	1e69      	subs	r1, r5, #1
   b9ec0:	6011      	str	r1, [r2, #0]
   b9ec2:	e7f3      	b.n	b9eac <_strtol_l.constprop.0+0xd4>
   b9ec4:	2430      	movs	r4, #48	; 0x30
   b9ec6:	2b00      	cmp	r3, #0
   b9ec8:	d1b1      	bne.n	b9e2e <_strtol_l.constprop.0+0x56>
   b9eca:	2308      	movs	r3, #8
   b9ecc:	e7af      	b.n	b9e2e <_strtol_l.constprop.0+0x56>
   b9ece:	2c30      	cmp	r4, #48	; 0x30
   b9ed0:	d0a5      	beq.n	b9e1e <_strtol_l.constprop.0+0x46>
   b9ed2:	230a      	movs	r3, #10
   b9ed4:	e7ab      	b.n	b9e2e <_strtol_l.constprop.0+0x56>
   b9ed6:	bf00      	nop
   b9ed8:	000bb3b9 	.word	0x000bb3b9

000b9edc <strtol>:
   b9edc:	4613      	mov	r3, r2
   b9ede:	460a      	mov	r2, r1
   b9ee0:	4601      	mov	r1, r0
   b9ee2:	4802      	ldr	r0, [pc, #8]	; (b9eec <strtol+0x10>)
   b9ee4:	6800      	ldr	r0, [r0, #0]
   b9ee6:	f7ff bf77 	b.w	b9dd8 <_strtol_l.constprop.0>
   b9eea:	bf00      	nop
   b9eec:	2003e550 	.word	0x2003e550

000b9ef0 <__register_exitproc>:
   b9ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9ef4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9fb0 <__register_exitproc+0xc0>
   b9ef8:	4606      	mov	r6, r0
   b9efa:	f8d8 0000 	ldr.w	r0, [r8]
   b9efe:	461f      	mov	r7, r3
   b9f00:	460d      	mov	r5, r1
   b9f02:	4691      	mov	r9, r2
   b9f04:	f000 f856 	bl	b9fb4 <__retarget_lock_acquire_recursive>
   b9f08:	4b25      	ldr	r3, [pc, #148]	; (b9fa0 <__register_exitproc+0xb0>)
   b9f0a:	681c      	ldr	r4, [r3, #0]
   b9f0c:	b934      	cbnz	r4, b9f1c <__register_exitproc+0x2c>
   b9f0e:	4c25      	ldr	r4, [pc, #148]	; (b9fa4 <__register_exitproc+0xb4>)
   b9f10:	601c      	str	r4, [r3, #0]
   b9f12:	4b25      	ldr	r3, [pc, #148]	; (b9fa8 <__register_exitproc+0xb8>)
   b9f14:	b113      	cbz	r3, b9f1c <__register_exitproc+0x2c>
   b9f16:	681b      	ldr	r3, [r3, #0]
   b9f18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9f1c:	6863      	ldr	r3, [r4, #4]
   b9f1e:	2b1f      	cmp	r3, #31
   b9f20:	dd07      	ble.n	b9f32 <__register_exitproc+0x42>
   b9f22:	f8d8 0000 	ldr.w	r0, [r8]
   b9f26:	f000 f847 	bl	b9fb8 <__retarget_lock_release_recursive>
   b9f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9f32:	b34e      	cbz	r6, b9f88 <__register_exitproc+0x98>
   b9f34:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9f38:	b988      	cbnz	r0, b9f5e <__register_exitproc+0x6e>
   b9f3a:	4b1c      	ldr	r3, [pc, #112]	; (b9fac <__register_exitproc+0xbc>)
   b9f3c:	b923      	cbnz	r3, b9f48 <__register_exitproc+0x58>
   b9f3e:	f8d8 0000 	ldr.w	r0, [r8]
   b9f42:	f000 f838 	bl	b9fb6 <__retarget_lock_release>
   b9f46:	e7f0      	b.n	b9f2a <__register_exitproc+0x3a>
   b9f48:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9f4c:	f7fd fa8c 	bl	b7468 <malloc>
   b9f50:	2800      	cmp	r0, #0
   b9f52:	d0f4      	beq.n	b9f3e <__register_exitproc+0x4e>
   b9f54:	2300      	movs	r3, #0
   b9f56:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9f5a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9f5e:	6863      	ldr	r3, [r4, #4]
   b9f60:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9f64:	2201      	movs	r2, #1
   b9f66:	409a      	lsls	r2, r3
   b9f68:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9f6c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9f70:	4313      	orrs	r3, r2
   b9f72:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9f76:	2e02      	cmp	r6, #2
   b9f78:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9f7c:	bf02      	ittt	eq
   b9f7e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9f82:	4313      	orreq	r3, r2
   b9f84:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9f88:	6863      	ldr	r3, [r4, #4]
   b9f8a:	f8d8 0000 	ldr.w	r0, [r8]
   b9f8e:	1c5a      	adds	r2, r3, #1
   b9f90:	3302      	adds	r3, #2
   b9f92:	6062      	str	r2, [r4, #4]
   b9f94:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9f98:	f000 f80e 	bl	b9fb8 <__retarget_lock_release_recursive>
   b9f9c:	2000      	movs	r0, #0
   b9f9e:	e7c6      	b.n	b9f2e <__register_exitproc+0x3e>
   b9fa0:	2003e7e8 	.word	0x2003e7e8
   b9fa4:	2003e75c 	.word	0x2003e75c
   b9fa8:	00000000 	.word	0x00000000
   b9fac:	000b7469 	.word	0x000b7469
   b9fb0:	2003e5b4 	.word	0x2003e5b4

000b9fb4 <__retarget_lock_acquire_recursive>:
   b9fb4:	4770      	bx	lr

000b9fb6 <__retarget_lock_release>:
   b9fb6:	4770      	bx	lr

000b9fb8 <__retarget_lock_release_recursive>:
   b9fb8:	4770      	bx	lr

000b9fba <link_code_end>:
	...

000b9fbc <dynalib_user>:
   b9fbc:	496d 000b 49a9 000b 49d1 000b 49d5 000b     mI...I...I...I..
   b9fcc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9fdc:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   b9fec:	6576 7463 726f 3a3a 4d5f 725f 6165 6c6c     vector::_M_reall
   b9ffc:	636f 695f 736e 7265 0074 6e69 6f00 7475     oc_insert.in.out
   ba00c:	7000 6d77 6400 0077 7761 7400 706d 006c     .pwm.dw.aw.tmpl.
   ba01c:	4d54 4c50 7032 5275 4e67 7931 0046 7776     TMPL2puRgN1yF.vw
   ba02c:	4900 666e 726f 616d 6974 6e6f 6f20 206e     .Information on 
   ba03c:	6c42 6e79 206b 7061 0070 694c 6867 2074     Blynk app.Light 
   ba04c:	654c 6576 3a6c 4400 7369 6174 636e 3a65     Level:.Distance:
   ba05c:	3200 5151 5a36 326e 7530 4e42 7752 6857     .2QQ6Zn20uBNRwWh
   ba06c:	4c6d 5731 4450 7041 4c31 7145 6941 5755     mL1WPDAp1LEqAiUW
   ba07c:	0038 6c62 6e79 2e6b 6c63 756f 0064 6f4e     8.blynk.cloud.No
   ba08c:	2074 6f43 6e6e 6365 6574 0064               t Connected.

000ba098 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   ba098:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   ba0a8:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   ba0b8:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   ba0c8:	6974 6c63 2065 7241 6f67 006e 7766 742d     ticle Argon.fw-t
   ba0d8:	7079 0065 4d54 4c50 7032 5275 4e67 7931     ype.TMPL2puRgN1y
   ba0e8:	0046 7562 6c69 0064 754a 206c 3320 3220     F.build.Jul  3 2
   ba0f8:	3230 2033 3830 343a 3a36 3835 0000           023 08:46:58...

000ba107 <_ZL4font>:
   ba107:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ba117:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ba127:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ba137:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ba147:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ba157:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ba167:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ba177:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ba187:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ba197:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ba1a7:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ba1b7:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ba1c7:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ba1d7:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ba1e7:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ba1f7:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ba207:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ba217:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ba227:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba237:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba247:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba257:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba267:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba277:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba287:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba297:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba2a7:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba2b7:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba2c7:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba2d7:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba2e7:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba2f7:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba307:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba317:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba327:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba337:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba347:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba357:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba367:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba377:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba387:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba397:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   ba3a7:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba3b7:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba3c7:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   ba3d7:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba3e7:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   ba3f7:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   ba407:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   ba417:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba427:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba437:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba447:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba457:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba467:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba477:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   ba487:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   ba497:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   ba4a7:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   ba4b7:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   ba4c7:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   ba4d7:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   ba4e7:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   ba4f7:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   ba507:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   ba517:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   ba527:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ba537:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ba547:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ba557:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ba567:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ba577:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ba587:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ba597:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ba5a7:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ba5b7:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ba5c7:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ba5d7:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ba5e7:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   ba5f7:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000ba608 <_ZTV12Adafruit_GFX>:
	...
   ba618:	5fbd 000b 7951 000b 49f1 000b 59c3 000b     ._..Qy...I...Y..
   ba628:	59c5 000b 59f7 000b 59d3 000b 59e5 000b     .Y...Y...Y...Y..
   ba638:	5905 000b 59c3 000b 5bef 000b 5bed 000b     .Y...Y...[...[..
   ba648:	5a0f 000b 5a4d 000b 5a87 000b 5acd 000b     .Z..MZ...Z...Z..
   ba658:	5ae9 000b 5b6d 000b 6564 6166 6c75 2074     .Z..m[..default 
   ba668:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   ba678:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   ba688:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   ba698:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000ba6a4 <_ZTVN8particle11SPISettingsE>:
	...
   ba6ac:	60f9 000b 60cb 000b 60cd 000b               .`...`...`..

000ba6b8 <_ZL12splash1_data>:
   ba6b8:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   ba6c8:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   ba6d8:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   ba6e8:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   ba6f8:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   ba708:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   ba720:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   ba730:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   ba740:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   ba750:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   ba760:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   ba770:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   ba780:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   ba790:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   ba7a0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   ba7b0:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   ba7c0:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   ba7d0:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   ba7e0:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   ba7f0:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   ba800:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   ba810:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   ba820:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   ba830:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   ba848:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   ba860:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   ba870:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   ba880:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   ba890:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   ba8a0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   ba8b0:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   ba8c0:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   ba8d0:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   ba8e0:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   ba8f0:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   ba900:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   ba910:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   ba920:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   ba930:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   ba940:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   ba950:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   ba960:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   ba970:	fdff 5b6b 6adb c0fd                         ..k[.j..

000ba978 <_ZL12splash2_data>:
   ba978:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   ba988:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   ba998:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   ba9b4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   ba9c4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   ba9d4:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   ba9e4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   ba9f4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   baa04:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   baa14:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   baa24:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   baa34:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   baa44:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   baa54:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   baa64:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   baa74:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   baa84:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   baa94:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   baaa4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   baab4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   baac4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   baad4:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   baae4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   baaf4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bab0c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bab1c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bab2c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bab3c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bab4c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bab58 <_ZTV16Adafruit_SSD1306>:
	...
   bab60:	614d 000b 6165 000b 5fbd 000b 7951 000b     Ma..ea..._..Qy..
   bab70:	6179 000b 59c3 000b 59c5 000b 59f7 000b     ya...Y...Y...Y..
   bab80:	59d3 000b 59e5 000b 5905 000b 59c3 000b     .Y...Y...Y...Y..
   bab90:	5bef 000b 6317 000b 68bf 000b 6871 000b     .[...c...h..qh..
   baba0:	5a87 000b 5acd 000b 5ae9 000b 5b6d 000b     .Z...Z...Z..m[..

000babb0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   babb0:	8000 e0c0 f8f0 fefc                         ........

000babb8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   babb8:	0100 0703 1f0f 7f3f                         ......?.

000babc0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   babc0:	d5ae a880                                   ....

000babc4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   babc4:	00d3 8d40                                   ..@.

000babc8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   babc8:	0020 c8a1                                    ...

000babcc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   babcc:	40db a6a4 af2e                              .@....

000babd2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   babd2:	02da 8f81                                   ....

000babd6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   babd6:	12da                                         ...

000babd9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   babd9:	02da                                         ...

000babdc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   babdc:	0022 21ff 0000 0000                         "..!....

000babe4 <_ZL22BlynkReadHandlerVector>:
   babe4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   babf4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac04:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac14:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac24:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac34:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac44:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac54:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac64:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac74:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac84:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bac94:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   baca4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bacb4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bacc4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bacd4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bace4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bacf4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad04:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad14:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad24:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad34:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad44:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad54:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad64:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad74:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad84:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bad94:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   bada4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   badb4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   badc4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..
   badd4:	6da1 000b 6da1 000b 6da1 000b 6da1 000b     .m...m...m...m..

000bade4 <_ZL23BlynkWriteHandlerVector>:
   bade4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   badf4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae04:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae14:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae24:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae34:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae44:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae54:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae64:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae74:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae84:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bae94:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baea4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baeb4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baec4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baed4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baee4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baef4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf04:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf14:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf24:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf34:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf44:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf54:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf64:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf74:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf84:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   baf94:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bafa4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bafb4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bafc4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..
   bafd4:	6da3 000b 6da3 000b 6da3 000b 6da3 000b     .m...m...m...m..

000bafe4 <_ZTV16OledWingAdafruit>:
	...
   bafec:	6dd1 000b 6df1 000b 5fbd 000b 7951 000b     .m...m..._..Qy..
   baffc:	6179 000b 59c3 000b 59c5 000b 59f7 000b     ya...Y...Y...Y..
   bb00c:	59d3 000b 59e5 000b 5905 000b 59c3 000b     .Y...Y...Y...Y..
   bb01c:	5bef 000b 6317 000b 68bf 000b 6871 000b     .[...c...h..qh..
   bb02c:	5a87 000b 5acd 000b 5ae9 000b 5b6d 000b     .Z...Z...Z..m[..

000bb03c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bb044 <_ZTVN5spark13EthernetClassE>:
	...
   bb04c:	7587 000b 757d 000b 7573 000b 7569 000b     .u..}u..su..iu..
   bb05c:	755d 000b 7551 000b 782d 000b 7835 000b     ]u..Qu..-x..5x..
   bb06c:	7545 000b 753d 000b 7533 000b 7529 000b     Eu..=u..3u..)u..
   bb07c:	7865 000b                                   ex..

000bb080 <_ZTV7TwoWire>:
	...
   bb088:	75a5 000b 75ef 000b 75c7 000b 75a7 000b     .u...u...u...u..
   bb098:	75cf 000b 75d7 000b 75df 000b 75e7 000b     .u...u...u...u..

000bb0a8 <_ZTV9IPAddress>:
	...
   bb0b0:	76d1 000b 76c1 000b 76c3 000b               .v...v...v..

000bb0bc <_ZTVN5spark12NetworkClassE>:
	...
   bb0c4:	77ed 000b 77f7 000b 7801 000b 780b 000b     .w...w...x...x..
   bb0d4:	7815 000b 7821 000b 782d 000b 7835 000b     .x..!x..-x..5x..
   bb0e4:	783d 000b 7849 000b 7851 000b 785b 000b     =x..Ix..Qx..[x..
   bb0f4:	7865 000b                                   ex..

000bb0f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bb0f8:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   bb108:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000bb118 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb120:	7ded 000b 7e11 000b 8343 000b 7e1f 000b     .}...~..C....~..
   bb130:	7df1 000b                                   .}..

000bb134 <_ZTV9TCPClient>:
	...
   bb13c:	7e9d 000b 7ed1 000b 7d69 000b 7d83 000b     .~...~..i}...}..
   bb14c:	81d9 000b 7dad 000b 804f 000b 7de1 000b     .....}..O....}..
   bb15c:	80e1 000b 7f21 000b 807d 000b 828d 000b     ....!...}.......
   bb16c:	801d 000b 7de3 000b 7d95 000b 7e25 000b     .....}...}..%~..
   bb17c:	7f01 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bb18c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bb19c <_ZTV11USARTSerial>:
	...
   bb1a4:	835d 000b 83c9 000b 83a1 000b 7951 000b     ]...........Qy..
   bb1b4:	8371 000b 838d 000b 837f 000b 839b 000b     q...............
   bb1c4:	835f 000b 8363 000b                         _...c...

000bb1cc <_ZTV9USBSerial>:
	...
   bb1d4:	8407 000b 846f 000b 8445 000b 7951 000b     ....o...E...Qy..
   bb1e4:	8437 000b 8409 000b 8419 000b 8469 000b     7...........i...
   bb1f4:	8429 000b 8401 000b                         ).......

000bb1fc <_ZTVN5spark9WiFiClassE>:
	...
   bb204:	856f 000b 8565 000b 855b 000b 8511 000b     o...e...[.......
   bb214:	854f 000b 8543 000b 782d 000b 7835 000b     O...C...-x..5x..
   bb224:	8537 000b 852f 000b 8525 000b 851b 000b     7.../...%.......
   bb234:	7865 000b                                   ex..

000bb238 <_ZSt7nothrow>:
	...

000bb239 <_ZTSSt19_Sp_make_shared_tag>:
   bb239:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb249:	6572 5f64 6174 0067 0000                     red_tag....

000bb254 <_ZTISt19_Sp_make_shared_tag>:
   bb254:	b294 000b b239 000b                         ....9...

000bb25c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb25c:	b2f4 000b b268 000b b318 000b               ....h.......

000bb268 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb268:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb278:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb288:	0045 0000                                   E...

000bb28c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb28c:	0000 0000 b25c 000b 8a29 000b 8a3d 000b     ....\...)...=...
   bb29c:	8bd1 000b 8bd1 000b 8aa7 000b 89e9 000b     ................
   bb2ac:	8a8f 000b 8a51 000b 8a1b 000b               ....Q.......

000bb2b8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb2b8:	b2f4 000b b2c4 000b b25c 000b               ........\...

000bb2c4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb2c4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb2d4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb2e4:	666e 456f 0000 0000                         nfoE....

000bb2ec <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb2ec:	0000 0000 b2b8 000b 8ad1 000b 8ae5 000b     ................
   bb2fc:	8bd1 000b 8bd1 000b 8aa7 000b 89e9 000b     ................
   bb30c:	8ba5 000b 8b31 000b 8af9 000b               ....1.......

000bb318 <_ZTISt9type_info>:
   bb318:	b294 000b b320 000b                         .... ...

000bb320 <_ZTSSt9type_info>:
   bb320:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
	...

000bb338 <TWO52>:
   bb338:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   bb348:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   bb358:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   bb368:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   bb378:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   bb388:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   bb398:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   bb3a8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000bb3b8 <_ctype_>:
   bb3b8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb3c8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb3d8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb3e8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb3f8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb408:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb418:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb428:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb438:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bb4b9 <link_const_data_end>:
   bb4b9:	00          	.byte	0x00
	...

000bb4bc <link_constructors_location>:
   bb4bc:	000b5891 	.word	0x000b5891
   bb4c0:	000b7519 	.word	0x000b7519
   bb4c4:	000b7591 	.word	0x000b7591
   bb4c8:	000b77dd 	.word	0x000b77dd
   bb4cc:	000b793d 	.word	0x000b793d
   bb4d0:	000b7a79 	.word	0x000b7a79
   bb4d4:	000b7d45 	.word	0x000b7d45
   bb4d8:	000b8349 	.word	0x000b8349
   bb4dc:	000b8579 	.word	0x000b8579
